// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LightningDevKit
import Darwin.C
import Darwin
import Foundation
@_exported import LightningDevKit
import Swift
import _Concurrency
public typealias Result_RouteDecodeErrorZ = LightningDevKit.Bindings.Result_RouteDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Route) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Route?
    @objc deinit
  }
}
public typealias ChannelDetails = LightningDevKit.Bindings.ChannelDetails
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelDetails : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getCounterparty() -> LightningDevKit.Bindings.ChannelCounterparty
    public func setCounterparty(val: LightningDevKit.Bindings.ChannelCounterparty)
    public func getFundingTxo() -> LightningDevKit.Bindings.OutPoint?
    public func setFundingTxo(val: LightningDevKit.Bindings.OutPoint)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func getShortChannelId() -> Swift.UInt64?
    public func setShortChannelId(val: Swift.UInt64?)
    public func getOutboundScidAlias() -> Swift.UInt64?
    public func setOutboundScidAlias(val: Swift.UInt64?)
    public func getInboundScidAlias() -> Swift.UInt64?
    public func setInboundScidAlias(val: Swift.UInt64?)
    public func getChannelValueSatoshis() -> Swift.UInt64
    public func setChannelValueSatoshis(val: Swift.UInt64)
    public func getUnspendablePunishmentReserve() -> Swift.UInt64?
    public func setUnspendablePunishmentReserve(val: Swift.UInt64?)
    public func getUserChannelId() -> [Swift.UInt8]
    public func setUserChannelId(val: [Swift.UInt8])
    public func getBalanceMsat() -> Swift.UInt64
    public func setBalanceMsat(val: Swift.UInt64)
    public func getOutboundCapacityMsat() -> Swift.UInt64
    public func setOutboundCapacityMsat(val: Swift.UInt64)
    public func getNextOutboundHtlcLimitMsat() -> Swift.UInt64
    public func setNextOutboundHtlcLimitMsat(val: Swift.UInt64)
    public func getInboundCapacityMsat() -> Swift.UInt64
    public func setInboundCapacityMsat(val: Swift.UInt64)
    public func getConfirmationsRequired() -> Swift.UInt32?
    public func setConfirmationsRequired(val: Swift.UInt32?)
    public func getConfirmations() -> Swift.UInt32?
    public func setConfirmations(val: Swift.UInt32?)
    public func getForceCloseSpendDelay() -> Swift.UInt16?
    public func setForceCloseSpendDelay(val: Swift.UInt16?)
    public func getIsOutbound() -> Swift.Bool
    public func setIsOutbound(val: Swift.Bool)
    public func getIsChannelReady() -> Swift.Bool
    public func setIsChannelReady(val: Swift.Bool)
    public func getIsUsable() -> Swift.Bool
    public func setIsUsable(val: Swift.Bool)
    public func getIsPublic() -> Swift.Bool
    public func setIsPublic(val: Swift.Bool)
    public func getInboundHtlcMinimumMsat() -> Swift.UInt64?
    public func setInboundHtlcMinimumMsat(val: Swift.UInt64?)
    public func getInboundHtlcMaximumMsat() -> Swift.UInt64?
    public func setInboundHtlcMaximumMsat(val: Swift.UInt64?)
    public func getConfig() -> LightningDevKit.Bindings.ChannelConfig?
    public func setConfig(val: LightningDevKit.Bindings.ChannelConfig)
    public init(channelIdArg: [Swift.UInt8], counterpartyArg: LightningDevKit.Bindings.ChannelCounterparty, fundingTxoArg: LightningDevKit.Bindings.OutPoint, channelTypeArg: LightningDevKit.Bindings.ChannelTypeFeatures, shortChannelIdArg: Swift.UInt64?, outboundScidAliasArg: Swift.UInt64?, inboundScidAliasArg: Swift.UInt64?, channelValueSatoshisArg: Swift.UInt64, unspendablePunishmentReserveArg: Swift.UInt64?, userChannelIdArg: [Swift.UInt8], balanceMsatArg: Swift.UInt64, outboundCapacityMsatArg: Swift.UInt64, nextOutboundHtlcLimitMsatArg: Swift.UInt64, inboundCapacityMsatArg: Swift.UInt64, confirmationsRequiredArg: Swift.UInt32?, confirmationsArg: Swift.UInt32?, forceCloseSpendDelayArg: Swift.UInt16?, isOutboundArg: Swift.Bool, isChannelReadyArg: Swift.Bool, isUsableArg: Swift.Bool, isPublicArg: Swift.Bool, inboundHtlcMinimumMsatArg: Swift.UInt64?, inboundHtlcMaximumMsatArg: Swift.UInt64?, configArg: LightningDevKit.Bindings.ChannelConfig)
    public func getInboundPaymentScid() -> Swift.UInt64?
    public func getOutboundPaymentScid() -> Swift.UInt64?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PaymentError = LightningDevKit.Bindings.PaymentError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentError : LightningDevKit.NativeTypeWrapper {
    public enum PaymentErrorType {
      case Invoice
      case Routing
      case Sending
      public static func == (a: LightningDevKit.Bindings.PaymentError.PaymentErrorType, b: LightningDevKit.Bindings.PaymentError.PaymentErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentError.PaymentErrorType
    public class func initWithInvoice(a: Swift.String) -> LightningDevKit.Bindings.PaymentError
    public class func initWithRouting(a: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.PaymentError
    public class func initWithSending(a: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.PaymentError
    public func getValueAsInvoice() -> Swift.String?
    public func getValueAsRouting() -> LightningDevKit.Bindings.LightningError?
    public func getValueAsSending() -> LightningDevKit.Bindings.PaymentSendFailure?
    @objc deinit
  }
}
public typealias Result_ChannelUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelUpdate?
    @objc deinit
  }
}
public typealias UpdateFulfillHTLC = LightningDevKit.Bindings.UpdateFulfillHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFulfillHTLC : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func getPaymentPreimage() -> [Swift.UInt8]?
    public func setPaymentPreimage(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], htlcIdArg: Swift.UInt64, paymentPreimageArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.UpdateFulfillHTLC, b: LightningDevKit.Bindings.UpdateFulfillHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias IgnoringMessageHandler = LightningDevKit.Bindings.IgnoringMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class IgnoringMessageHandler : LightningDevKit.NativeTypeWrapper {
    public init()
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func asRoutingMessageHandler() -> LightningDevKit.Bindings.RoutingMessageHandler
    public func asOnionMessageProvider() -> LightningDevKit.Bindings.OnionMessageProvider
    public func asOnionMessageHandler() -> LightningDevKit.Bindings.OnionMessageHandler
    public func asCustomOnionMessageHandler() -> LightningDevKit.Bindings.CustomOnionMessageHandler
    public func asCustomMessageReader() -> LightningDevKit.Bindings.CustomMessageReader
    public func asCustomMessageHandler() -> LightningDevKit.Bindings.CustomMessageHandler
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias NodeAnnouncementInfo = LightningDevKit.Bindings.NodeAnnouncementInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAnnouncementInfo : LightningDevKit.NativeTypeWrapper {
    public func getFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func setFeatures(val: LightningDevKit.Bindings.NodeFeatures)
    public func getLastUpdate() -> Swift.UInt32
    public func setLastUpdate(val: Swift.UInt32)
    public func getRgb() -> [Swift.UInt8]?
    public func setRgb(val: [Swift.UInt8])
    public func getAlias() -> LightningDevKit.Bindings.NodeAlias
    public func setAlias(val: LightningDevKit.Bindings.NodeAlias)
    public func getAddresses() -> [LightningDevKit.Bindings.NetAddress]
    public func setAddresses(val: [LightningDevKit.Bindings.NetAddress])
    public func getAnnouncementMessage() -> LightningDevKit.Bindings.NodeAnnouncement?
    public func setAnnouncementMessage(val: LightningDevKit.Bindings.NodeAnnouncement)
    public init(featuresArg: LightningDevKit.Bindings.NodeFeatures, lastUpdateArg: Swift.UInt32, rgbArg: [Swift.UInt8], aliasArg: LightningDevKit.Bindings.NodeAlias, addressesArg: [LightningDevKit.Bindings.NetAddress], announcementMessageArg: LightningDevKit.Bindings.NodeAnnouncement)
    public class func eq(a: LightningDevKit.Bindings.NodeAnnouncementInfo, b: LightningDevKit.Bindings.NodeAnnouncementInfo) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RoutingFees = LightningDevKit.Bindings.RoutingFees
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RoutingFees : LightningDevKit.NativeTypeWrapper {
    public func getBaseMsat() -> Swift.UInt32
    public func setBaseMsat(val: Swift.UInt32)
    public func getProportionalMillionths() -> Swift.UInt32
    public func setProportionalMillionths(val: Swift.UInt32)
    public init(baseMsatArg: Swift.UInt32, proportionalMillionthsArg: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.RoutingFees, b: LightningDevKit.Bindings.RoutingFees) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Destination = LightningDevKit.Bindings.Destination
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Destination : LightningDevKit.NativeTypeWrapper {
    public enum DestinationType {
      case Node
      case BlindedPath
      public static func == (a: LightningDevKit.Bindings.Destination.DestinationType, b: LightningDevKit.Bindings.Destination.DestinationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Destination.DestinationType
    public class func initWithNode(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Destination
    public class func initWithBlindedPath(a: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Destination
    public func getValueAsNode() -> [Swift.UInt8]?
    public func getValueAsBlindedPath() -> LightningDevKit.Bindings.BlindedPath?
    @objc deinit
  }
}
public typealias FilesystemPersister = LightningDevKit.Bindings.FilesystemPersister
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FilesystemPersister : LightningDevKit.NativeTypeWrapper {
    public init(pathToChannelData: Swift.String)
    public func getDataDir() -> Swift.String
    public func readChannelmonitors(keysManager: LightningDevKit.Bindings.KeysInterface) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_UnsignedChannelAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedChannelAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement?
    @objc deinit
  }
}
public typealias NodeInfo = LightningDevKit.Bindings.NodeInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeInfo : LightningDevKit.NativeTypeWrapper {
    public func getChannels() -> [Swift.UInt64]
    public func setChannels(val: [Swift.UInt64])
    public func getLowestInboundChannelFees() -> LightningDevKit.Bindings.RoutingFees?
    public func setLowestInboundChannelFees(val: LightningDevKit.Bindings.RoutingFees)
    public func getAnnouncementInfo() -> LightningDevKit.Bindings.NodeAnnouncementInfo?
    public func setAnnouncementInfo(val: LightningDevKit.Bindings.NodeAnnouncementInfo)
    public init(channelsArg: [Swift.UInt64], lowestInboundChannelFeesArg: LightningDevKit.Bindings.RoutingFees, announcementInfoArg: LightningDevKit.Bindings.NodeAnnouncementInfo)
    public class func eq(a: LightningDevKit.Bindings.NodeInfo, b: LightningDevKit.Bindings.NodeInfo) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias HTLCDestination = LightningDevKit.Bindings.HTLCDestination
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCDestination : LightningDevKit.NativeTypeWrapper {
    public enum HTLCDestinationType {
      case NextHopChannel
      case UnknownNextHop
      case InvalidForward
      case FailedPayment
      public static func == (a: LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType, b: LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType
    public class func initWithNextHopChannel(nodeId: [Swift.UInt8], channelId: [Swift.UInt8]) -> LightningDevKit.Bindings.HTLCDestination
    public class func initWithUnknownNextHop(requestedForwardScid: Swift.UInt64) -> LightningDevKit.Bindings.HTLCDestination
    public class func initWithInvalidForward(requestedForwardScid: Swift.UInt64) -> LightningDevKit.Bindings.HTLCDestination
    public class func initWithFailedPayment(paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.HTLCDestination
    public class func eq(a: LightningDevKit.Bindings.HTLCDestination, b: LightningDevKit.Bindings.HTLCDestination) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public func getValueAsNextHopChannel() -> LightningDevKit.Bindings.HTLCDestination.NextHopChannel?
    public func getValueAsUnknownNextHop() -> LightningDevKit.Bindings.HTLCDestination.UnknownNextHop?
    public func getValueAsInvalidForward() -> LightningDevKit.Bindings.HTLCDestination.InvalidForward?
    public func getValueAsFailedPayment() -> LightningDevKit.Bindings.HTLCDestination.FailedPayment?
    @objc deinit
    @_hasMissingDesignatedInitializers public class NextHopChannel : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getChannelId() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class UnknownNextHop : LightningDevKit.NativeTypeWrapper {
      public func getRequestedForwardScid() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class InvalidForward : LightningDevKit.NativeTypeWrapper {
      public func getRequestedForwardScid() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class FailedPayment : LightningDevKit.NativeTypeWrapper {
      public func getPaymentHash() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias BindingsError = LightningDevKit.Bindings.BindingsError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BindingsError : LightningDevKit.NativeTypeWrapper {
    public func getDummy() -> Swift.UInt8
    @objc deinit
  }
}
public typealias ChannelUpdate = LightningDevKit.Bindings.ChannelUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUpdate : LightningDevKit.NativeTypeWrapper {
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getContents() -> LightningDevKit.Bindings.UnsignedChannelUpdate
    public func setContents(val: LightningDevKit.Bindings.UnsignedChannelUpdate)
    public init(signatureArg: [Swift.UInt8], contentsArg: LightningDevKit.Bindings.UnsignedChannelUpdate)
    public class func eq(a: LightningDevKit.Bindings.ChannelUpdate, b: LightningDevKit.Bindings.ChannelUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MultiThreadedScoreLock = LightningDevKit.Bindings.MultiThreadedScoreLock
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MultiThreadedScoreLock : LightningDevKit.NativeTypeWrapper {
    public func asScore() -> LightningDevKit.Bindings.Score
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InvoiceRequestFeatures = LightningDevKit.Bindings.InvoiceRequestFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceRequestFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.InvoiceRequestFeatures, b: LightningDevKit.Bindings.InvoiceRequestFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.InvoiceRequestFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InvoiceRequestFeaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias SignOrCreationError = LightningDevKit.Bindings.SignOrCreationError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SignOrCreationError : LightningDevKit.NativeTypeWrapper {
    public enum SignOrCreationErrorType {
      case SignError
      case CreationError
      public static func == (a: LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType, b: LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType
    public class func initWithSignError() -> LightningDevKit.Bindings.SignOrCreationError
    public class func initWithCreationError(a: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.SignOrCreationError
    public class func eq(a: LightningDevKit.Bindings.SignOrCreationError, b: LightningDevKit.Bindings.SignOrCreationError) -> Swift.Bool
    public func toStr() -> Swift.String
    public func getValueAsCreationError() -> LightningDevKit.Bindings.CreationError?
    @objc deinit
  }
}
public typealias FixedPenaltyScorer = LightningDevKit.Bindings.FixedPenaltyScorer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FixedPenaltyScorer : LightningDevKit.NativeTypeWrapper {
    public class func initWithWithPenalty(penaltyMsat: Swift.UInt64) -> LightningDevKit.Bindings.FixedPenaltyScorer
    public func asScore() -> LightningDevKit.Bindings.Score
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: Swift.UInt64) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UpdateAddHTLC = LightningDevKit.Bindings.UpdateAddHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateAddHTLC : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func getAmountMsat() -> Swift.UInt64
    public func setAmountMsat(val: Swift.UInt64)
    public func getPaymentHash() -> [Swift.UInt8]?
    public func setPaymentHash(val: [Swift.UInt8])
    public func getCltvExpiry() -> Swift.UInt32
    public func setCltvExpiry(val: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.UpdateAddHTLC, b: LightningDevKit.Bindings.UpdateAddHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias FutureCallback = LightningDevKit.Bindings.FutureCallback
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class FutureCallback : LightningDevKit.NativeTraitWrapper {
    public init()
    open func call()
    @objc deinit
  }
}
public typealias CustomMessageReader = LightningDevKit.Bindings.CustomMessageReader
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomMessageReader : LightningDevKit.NativeTraitWrapper {
    public init()
    open func read(messageType: Swift.UInt16, buffer: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    @objc deinit
  }
}
public typealias GossipTimestampFilter = LightningDevKit.Bindings.GossipTimestampFilter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GossipTimestampFilter : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFirstTimestamp() -> Swift.UInt32
    public func setFirstTimestamp(val: Swift.UInt32)
    public func getTimestampRange() -> Swift.UInt32
    public func setTimestampRange(val: Swift.UInt32)
    public init(chainHashArg: [Swift.UInt8], firstTimestampArg: Swift.UInt32, timestampRangeArg: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.GossipTimestampFilter, b: LightningDevKit.Bindings.GossipTimestampFilter) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MinFinalCltvExpiry = LightningDevKit.Bindings.MinFinalCltvExpiry
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MinFinalCltvExpiry : LightningDevKit.NativeTypeWrapper {
    public func getA() -> Swift.UInt64
    public func setA(val: Swift.UInt64)
    public init(aArg: Swift.UInt64)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.MinFinalCltvExpiry, b: LightningDevKit.Bindings.MinFinalCltvExpiry) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Currency = LightningDevKit.Bindings.Currency
extension LightningDevKit.Bindings {
  public enum Currency {
    case Bitcoin
    case BitcoinTestnet
    case Regtest
    case Simnet
    case Signet
    public static func == (a: LightningDevKit.Bindings.Currency, b: LightningDevKit.Bindings.Currency) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_UpdateAddHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateAddHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateAddHTLC) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateAddHTLC?
    @objc deinit
  }
}
public typealias Result_UpdateFailHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFailHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFailHTLC) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFailHTLC?
    @objc deinit
  }
}
public typealias ConfirmationTarget = LightningDevKit.Bindings.ConfirmationTarget
extension LightningDevKit.Bindings {
  public enum ConfirmationTarget {
    case Background
    case Normal
    case HighPriority
    public static func == (a: LightningDevKit.Bindings.ConfirmationTarget, b: LightningDevKit.Bindings.ConfirmationTarget) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias NodeId = LightningDevKit.Bindings.NodeId
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeId : LightningDevKit.NativeTypeWrapper {
    public class func initWithPubkey(pubkey: [Swift.UInt8]) -> LightningDevKit.Bindings.NodeId
    public func asSlice() -> [Swift.UInt8]
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_FundingCreatedDecodeErrorZ = LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FundingCreatedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.FundingCreated) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FundingCreated?
    @objc deinit
  }
}
public typealias TrustedClosingTransaction = LightningDevKit.Bindings.TrustedClosingTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TrustedClosingTransaction : LightningDevKit.NativeTypeWrapper {
    public func builtTransaction() -> [Swift.UInt8]
    public func getSighashAll(fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func sign(fundingKey: [Swift.UInt8], fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelPublicKeys = LightningDevKit.Bindings.ChannelPublicKeys
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelPublicKeys : LightningDevKit.NativeTypeWrapper {
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentPoint() -> [Swift.UInt8]
    public func setPaymentPoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public init(fundingPubkeyArg: [Swift.UInt8], revocationBasepointArg: [Swift.UInt8], paymentPointArg: [Swift.UInt8], delayedPaymentBasepointArg: [Swift.UInt8], htlcBasepointArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.ChannelPublicKeys, b: LightningDevKit.Bindings.ChannelPublicKeys) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_CustomOnionMessageContentsZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_CustomOnionMessageContentsZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_CustomOnionMessageContentsZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.CustomOnionMessageContents?) -> LightningDevKit.Bindings.Result_COption_CustomOnionMessageContentsZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_CustomOnionMessageContentsZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CustomOnionMessageContents?
    @objc deinit
  }
}
public typealias Result_NodeAnnouncementInfoDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAnnouncementInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NodeAnnouncementInfo) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAnnouncementInfo?
    @objc deinit
  }
}
public typealias Result_NonePaymentErrorZ = LightningDevKit.Bindings.Result_NonePaymentErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePaymentErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NonePaymentErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentError) -> LightningDevKit.Bindings.Result_NonePaymentErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentError?
    @objc deinit
  }
}
public typealias Route = LightningDevKit.Bindings.Route
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Route : LightningDevKit.NativeTypeWrapper {
    public func getPaths() -> [[LightningDevKit.Bindings.RouteHop]]
    public func setPaths(val: [[LightningDevKit.Bindings.RouteHop]])
    public func getPaymentParams() -> LightningDevKit.Bindings.PaymentParameters?
    public func setPaymentParams(val: LightningDevKit.Bindings.PaymentParameters)
    public init(pathsArg: [[LightningDevKit.Bindings.RouteHop]], paymentParamsArg: LightningDevKit.Bindings.PaymentParameters)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Route, b: LightningDevKit.Bindings.Route) -> Swift.Bool
    public func getTotalFees() -> Swift.UInt64
    public func getTotalAmount() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_OutPointDecodeErrorZ = LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OutPointDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OutPoint?
    @objc deinit
  }
}
public typealias ChannelTransactionParameters = LightningDevKit.Bindings.ChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public func getHolderPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func setHolderPubkeys(val: LightningDevKit.Bindings.ChannelPublicKeys)
    public func getHolderSelectedContestDelay() -> Swift.UInt16
    public func setHolderSelectedContestDelay(val: Swift.UInt16)
    public func getIsOutboundFromHolder() -> Swift.Bool
    public func setIsOutboundFromHolder(val: Swift.Bool)
    public func getCounterpartyParameters() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters?
    public func setCounterpartyParameters(val: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters)
    public func getFundingOutpoint() -> LightningDevKit.Bindings.OutPoint?
    public func setFundingOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getOptAnchors() -> LightningDevKit.Bindings.Option_NoneZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `val`.")
    public func setOptAnchors(val: LightningDevKit.Bindings.Option_NoneZ)
    public func getOptNonZeroFeeAnchors() -> LightningDevKit.Bindings.Option_NoneZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `val`.")
    public func setOptNonZeroFeeAnchors(val: LightningDevKit.Bindings.Option_NoneZ)
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `optAnchorsArg`, `optNonZeroFeeAnchorsArg`.")
    public init(holderPubkeysArg: LightningDevKit.Bindings.ChannelPublicKeys, holderSelectedContestDelayArg: Swift.UInt16, isOutboundFromHolderArg: Swift.Bool, counterpartyParametersArg: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters, fundingOutpointArg: LightningDevKit.Bindings.OutPoint, optAnchorsArg: LightningDevKit.Bindings.Option_NoneZ, optNonZeroFeeAnchorsArg: LightningDevKit.Bindings.Option_NoneZ)
    public func isPopulated() -> Swift.Bool
    public func asHolderBroadcastable() -> LightningDevKit.Bindings.DirectedChannelTransactionParameters
    public func asCounterpartyBroadcastable() -> LightningDevKit.Bindings.DirectedChannelTransactionParameters
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Fallback = LightningDevKit.Bindings.Fallback
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Fallback : LightningDevKit.NativeTypeWrapper {
    public enum FallbackType {
      case SegWitProgram
      case PubKeyHash
      case ScriptHash
      public static func == (a: LightningDevKit.Bindings.Fallback.FallbackType, b: LightningDevKit.Bindings.Fallback.FallbackType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Fallback.FallbackType
    public class func initWithSegWitProgram(version: Swift.UInt8, program: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public class func initWithPubKeyHash(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public class func initWithScriptHash(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Fallback, b: LightningDevKit.Bindings.Fallback) -> Swift.Bool
    public func getValueAsSegWitProgram() -> LightningDevKit.Bindings.Fallback.SegWitProgram?
    public func getValueAsPubKeyHash() -> [Swift.UInt8]?
    public func getValueAsScriptHash() -> [Swift.UInt8]?
    @objc deinit
    @_hasMissingDesignatedInitializers public class SegWitProgram : LightningDevKit.NativeTypeWrapper {
      public func getVersion() -> Swift.UInt8
      public func getProgram() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias Persist = LightningDevKit.Bindings.Persist
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Persist : LightningDevKit.NativeTraitWrapper {
    public init()
    open func persistNewChannel(channelId: LightningDevKit.Bindings.OutPoint, data: LightningDevKit.Bindings.ChannelMonitor, updateId: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    open func updatePersistedChannel(channelId: LightningDevKit.Bindings.OutPoint, update: LightningDevKit.Bindings.ChannelMonitorUpdate, data: LightningDevKit.Bindings.ChannelMonitor, updateId: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    @objc deinit
  }
}
public typealias CounterpartyForwardingInfo = LightningDevKit.Bindings.CounterpartyForwardingInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyForwardingInfo : LightningDevKit.NativeTypeWrapper {
    public func getFeeBaseMsat() -> Swift.UInt32
    public func setFeeBaseMsat(val: Swift.UInt32)
    public func getFeeProportionalMillionths() -> Swift.UInt32
    public func setFeeProportionalMillionths(val: Swift.UInt32)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public init(feeBaseMsatArg: Swift.UInt32, feeProportionalMillionthsArg: Swift.UInt32, cltvExpiryDeltaArg: Swift.UInt16)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OnionMessageHandler = LightningDevKit.Bindings.OnionMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class OnionMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init(OnionMessageProvider: LightningDevKit.Bindings.OnionMessageProvider)
    open func handleOnionMessage(peerNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OnionMessage)
    open func peerConnected(theirNodeId: [Swift.UInt8], initArgument: LightningDevKit.Bindings.BindingsInit) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func peerDisconnected(theirNodeId: [Swift.UInt8], noConnectionPossible: Swift.Bool)
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    public func getOnionMessageProvider() -> LightningDevKit.Bindings.OnionMessageProvider
    @objc deinit
  }
}
public typealias Result_CommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.CommitmentTransaction) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CommitmentTransaction?
    @objc deinit
  }
}
public typealias Result_LockedChannelMonitorNoneZ = LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_LockedChannelMonitorNoneZ : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.LockedChannelMonitor) -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.LockedChannelMonitor?
    @objc deinit
  }
}
public typealias WriteableScore = LightningDevKit.Bindings.WriteableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class WriteableScore : LightningDevKit.NativeTraitWrapper {
    public init(LockableScore: LightningDevKit.Bindings.LockableScore)
    open func write() -> [Swift.UInt8]
    public func getLockableScore() -> LightningDevKit.Bindings.LockableScore
    @objc deinit
  }
}
public typealias ChannelInfo = LightningDevKit.Bindings.ChannelInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelInfo : LightningDevKit.NativeTypeWrapper {
    public func getFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func setFeatures(val: LightningDevKit.Bindings.ChannelFeatures)
    public func getNodeOne() -> LightningDevKit.Bindings.NodeId
    public func setNodeOne(val: LightningDevKit.Bindings.NodeId)
    public func getOneToTwo() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public func setOneToTwo(val: LightningDevKit.Bindings.ChannelUpdateInfo)
    public func getNodeTwo() -> LightningDevKit.Bindings.NodeId
    public func setNodeTwo(val: LightningDevKit.Bindings.NodeId)
    public func getTwoToOne() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public func setTwoToOne(val: LightningDevKit.Bindings.ChannelUpdateInfo)
    public func getCapacitySats() -> Swift.UInt64?
    public func setCapacitySats(val: Swift.UInt64?)
    public func getAnnouncementMessage() -> LightningDevKit.Bindings.ChannelAnnouncement?
    public func setAnnouncementMessage(val: LightningDevKit.Bindings.ChannelAnnouncement)
    public class func eq(a: LightningDevKit.Bindings.ChannelInfo, b: LightningDevKit.Bindings.ChannelInfo) -> Swift.Bool
    public func getDirectionalInfo(channelFlags: Swift.UInt8) -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InitFeatures = LightningDevKit.Bindings.InitFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InitFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.InitFeatures, b: LightningDevKit.Bindings.InitFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.InitFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public func setDataLossProtectOptional()
    public func setDataLossProtectRequired()
    public func supportsDataLossProtect() -> Swift.Bool
    public func requiresDataLossProtect() -> Swift.Bool
    public func setInitialRoutingSyncOptional()
    public func setInitialRoutingSyncRequired()
    public func initialRoutingSync() -> Swift.Bool
    public func setUpfrontShutdownScriptOptional()
    public func setUpfrontShutdownScriptRequired()
    public func supportsUpfrontShutdownScript() -> Swift.Bool
    public func requiresUpfrontShutdownScript() -> Swift.Bool
    public func setGossipQueriesOptional()
    public func setGossipQueriesRequired()
    public func supportsGossipQueries() -> Swift.Bool
    public func requiresGossipQueries() -> Swift.Bool
    public func setVariableLengthOnionOptional()
    public func setVariableLengthOnionRequired()
    public func supportsVariableLengthOnion() -> Swift.Bool
    public func requiresVariableLengthOnion() -> Swift.Bool
    public func setStaticRemoteKeyOptional()
    public func setStaticRemoteKeyRequired()
    public func supportsStaticRemoteKey() -> Swift.Bool
    public func requiresStaticRemoteKey() -> Swift.Bool
    public func setPaymentSecretOptional()
    public func setPaymentSecretRequired()
    public func supportsPaymentSecret() -> Swift.Bool
    public func requiresPaymentSecret() -> Swift.Bool
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func setWumboOptional()
    public func setWumboRequired()
    public func supportsWumbo() -> Swift.Bool
    public func requiresWumbo() -> Swift.Bool
    public func setShutdownAnySegwitOptional()
    public func setShutdownAnySegwitRequired()
    public func supportsShutdownAnysegwit() -> Swift.Bool
    public func requiresShutdownAnysegwit() -> Swift.Bool
    public func setOnionMessagesOptional()
    public func setOnionMessagesRequired()
    public func supportsOnionMessages() -> Swift.Bool
    public func requiresOnionMessages() -> Swift.Bool
    public func setChannelTypeOptional()
    public func setChannelTypeRequired()
    public func supportsChannelType() -> Swift.Bool
    public func requiresChannelType() -> Swift.Bool
    public func setScidPrivacyOptional()
    public func setScidPrivacyRequired()
    public func supportsScidPrivacy() -> Swift.Bool
    public func requiresScidPrivacy() -> Swift.Bool
    public func setZeroConfOptional()
    public func setZeroConfRequired()
    public func supportsZeroConf() -> Swift.Bool
    public func requiresZeroConf() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Ping = LightningDevKit.Bindings.Ping
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Ping : LightningDevKit.NativeTypeWrapper {
    public func getPonglen() -> Swift.UInt16
    public func setPonglen(val: Swift.UInt16)
    public func getByteslen() -> Swift.UInt16
    public func setByteslen(val: Swift.UInt16)
    public init(ponglenArg: Swift.UInt16, byteslenArg: Swift.UInt16)
    public class func eq(a: LightningDevKit.Bindings.Ping, b: LightningDevKit.Bindings.Ping) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PaymentPurposeDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentPurposeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentPurpose) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentPurpose?
    @objc deinit
  }
}
public typealias Router = LightningDevKit.Bindings.Router
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Router : LightningDevKit.NativeTraitWrapper {
    public init()
    open func findRoute(payer: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, firstHops: [LightningDevKit.Bindings.ChannelDetails]?, inflightHtlcs: LightningDevKit.Bindings.InFlightHtlcs) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    open func findRouteWithId(payer: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, firstHops: [LightningDevKit.Bindings.ChannelDetails]?, inflightHtlcs: LightningDevKit.Bindings.InFlightHtlcs, PaymentHash: [Swift.UInt8], PaymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    open func notifyPaymentPathFailed(path: [LightningDevKit.Bindings.RouteHop], shortChannelId: Swift.UInt64)
    open func notifyPaymentPathSuccessful(path: [LightningDevKit.Bindings.RouteHop])
    open func notifyPaymentProbeSuccessful(path: [LightningDevKit.Bindings.RouteHop])
    open func notifyPaymentProbeFailed(path: [LightningDevKit.Bindings.RouteHop], shortChannelId: Swift.UInt64)
    @objc deinit
  }
}
public typealias Result_TxCreationKeysDecodeErrorZ = LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxCreationKeysDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.TxCreationKeys) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxCreationKeys?
    @objc deinit
  }
}
public typealias Result_RouteHintHopDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHintHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.RouteHintHop) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHintHop?
    @objc deinit
  }
}
public typealias PhantomRouteHints = LightningDevKit.Bindings.PhantomRouteHints
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PhantomRouteHints : LightningDevKit.NativeTypeWrapper {
    public func getChannels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func setChannels(val: [LightningDevKit.Bindings.ChannelDetails])
    public func getPhantomScid() -> Swift.UInt64
    public func setPhantomScid(val: Swift.UInt64)
    public func getRealNodePubkey() -> [Swift.UInt8]
    public func setRealNodePubkey(val: [Swift.UInt8])
    public init(channelsArg: [LightningDevKit.Bindings.ChannelDetails], phantomScidArg: Swift.UInt64, realNodePubkeyArg: [Swift.UInt8])
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Filter = LightningDevKit.Bindings.Filter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Filter : LightningDevKit.NativeTraitWrapper {
    public init()
    open func registerTx(txid: [Swift.UInt8]?, scriptPubkey: [Swift.UInt8])
    open func registerOutput(output: LightningDevKit.Bindings.WatchedOutput)
    @objc deinit
  }
}
public typealias QueryChannelRange = LightningDevKit.Bindings.QueryChannelRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class QueryChannelRange : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFirstBlocknum() -> Swift.UInt32
    public func setFirstBlocknum(val: Swift.UInt32)
    public func getNumberOfBlocks() -> Swift.UInt32
    public func setNumberOfBlocks(val: Swift.UInt32)
    public init(chainHashArg: [Swift.UInt8], firstBlocknumArg: Swift.UInt32, numberOfBlocksArg: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.QueryChannelRange, b: LightningDevKit.Bindings.QueryChannelRange) -> Swift.Bool
    public func endBlocknum() -> Swift.UInt32
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CounterpartyChannelTransactionParametersDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyChannelTransactionParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters?
    @objc deinit
  }
}
public typealias Result_boolPeerHandleErrorZ = LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_boolPeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: Swift.Bool) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public func getValue() -> Swift.Bool?
    @objc deinit
  }
}
public typealias TxOut = LightningDevKit.Bindings.TxOut
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxOut : LightningDevKit.NativeTypeWrapper {
    public init(scriptPubkey: [Swift.UInt8], value: Swift.UInt64)
    public func getScriptPubkey() -> [Swift.UInt8]
    public func getValue() -> Swift.UInt64
    @objc deinit
  }
}
public typealias HolderCommitmentTransaction = LightningDevKit.Bindings.HolderCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HolderCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public func getCounterpartySig() -> [Swift.UInt8]
    public func setCounterpartySig(val: [Swift.UInt8])
    public func getCounterpartyHtlcSigs() -> [[Swift.UInt8]]
    public func setCounterpartyHtlcSigs(val: [[Swift.UInt8]])
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public init(commitmentTx: LightningDevKit.Bindings.CommitmentTransaction, counterpartySig: [Swift.UInt8], counterpartyHtlcSigs: [[Swift.UInt8]], holderFundingKey: [Swift.UInt8], counterpartyFundingKey: [Swift.UInt8])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelConfig = LightningDevKit.Bindings.ChannelConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelConfig : LightningDevKit.NativeTypeWrapper {
    public func getForwardingFeeProportionalMillionths() -> Swift.UInt32
    public func setForwardingFeeProportionalMillionths(val: Swift.UInt32)
    public func getForwardingFeeBaseMsat() -> Swift.UInt32
    public func setForwardingFeeBaseMsat(val: Swift.UInt32)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getMaxDustHtlcExposureMsat() -> Swift.UInt64
    public func setMaxDustHtlcExposureMsat(val: Swift.UInt64)
    public func getForceCloseAvoidanceMaxFeeSatoshis() -> Swift.UInt64
    public func setForceCloseAvoidanceMaxFeeSatoshis(val: Swift.UInt64)
    public init(forwardingFeeProportionalMillionthsArg: Swift.UInt32, forwardingFeeBaseMsatArg: Swift.UInt32, cltvExpiryDeltaArg: Swift.UInt16, maxDustHtlcExposureMsatArg: Swift.UInt64, forceCloseAvoidanceMaxFeeSatoshisArg: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.ChannelConfig, b: LightningDevKit.Bindings.ChannelConfig) -> Swift.Bool
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelConfig
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CounterpartyCommitmentSecretsDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyCommitmentSecretsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.CounterpartyCommitmentSecrets) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyCommitmentSecrets?
    @objc deinit
  }
}
public typealias Result__u832APIErrorZ = LightningDevKit.Bindings.Result__u832APIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result__u832APIErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result__u832APIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result__u832APIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_TxOutAccessErrorZ = LightningDevKit.Bindings.Result_TxOutAccessErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxOutAccessErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.TxOut) -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.AccessError) -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.AccessError?
    public func getValue() -> LightningDevKit.Bindings.TxOut?
    @objc deinit
  }
}
public typealias Result_PrivateRouteCreationErrorZ = LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PrivateRouteCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.PrivateRoute) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.CreationError?
    public func getValue() -> LightningDevKit.Bindings.PrivateRoute?
    @objc deinit
  }
}
public typealias Result_NoneErrorZ = LightningDevKit.Bindings.Result_NoneErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_NoneErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    @objc deinit
  }
}
public typealias NodeFeatures = LightningDevKit.Bindings.NodeFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.NodeFeatures, b: LightningDevKit.Bindings.NodeFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.NodeFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public func setDataLossProtectOptional()
    public func setDataLossProtectRequired()
    public func supportsDataLossProtect() -> Swift.Bool
    public func requiresDataLossProtect() -> Swift.Bool
    public func setUpfrontShutdownScriptOptional()
    public func setUpfrontShutdownScriptRequired()
    public func supportsUpfrontShutdownScript() -> Swift.Bool
    public func requiresUpfrontShutdownScript() -> Swift.Bool
    public func setGossipQueriesOptional()
    public func setGossipQueriesRequired()
    public func supportsGossipQueries() -> Swift.Bool
    public func requiresGossipQueries() -> Swift.Bool
    public func setVariableLengthOnionOptional()
    public func setVariableLengthOnionRequired()
    public func supportsVariableLengthOnion() -> Swift.Bool
    public func requiresVariableLengthOnion() -> Swift.Bool
    public func setStaticRemoteKeyOptional()
    public func setStaticRemoteKeyRequired()
    public func supportsStaticRemoteKey() -> Swift.Bool
    public func requiresStaticRemoteKey() -> Swift.Bool
    public func setPaymentSecretOptional()
    public func setPaymentSecretRequired()
    public func supportsPaymentSecret() -> Swift.Bool
    public func requiresPaymentSecret() -> Swift.Bool
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func setWumboOptional()
    public func setWumboRequired()
    public func supportsWumbo() -> Swift.Bool
    public func requiresWumbo() -> Swift.Bool
    public func setShutdownAnySegwitOptional()
    public func setShutdownAnySegwitRequired()
    public func supportsShutdownAnysegwit() -> Swift.Bool
    public func requiresShutdownAnysegwit() -> Swift.Bool
    public func setOnionMessagesOptional()
    public func setOnionMessagesRequired()
    public func supportsOnionMessages() -> Swift.Bool
    public func requiresOnionMessages() -> Swift.Bool
    public func setChannelTypeOptional()
    public func setChannelTypeRequired()
    public func supportsChannelType() -> Swift.Bool
    public func requiresChannelType() -> Swift.Bool
    public func setScidPrivacyOptional()
    public func setScidPrivacyRequired()
    public func supportsScidPrivacy() -> Swift.Bool
    public func requiresScidPrivacy() -> Swift.Bool
    public func setZeroConfOptional()
    public func setZeroConfRequired()
    public func supportsZeroConf() -> Swift.Bool
    public func requiresZeroConf() -> Swift.Bool
    public func setKeysendOptional()
    public func setKeysendRequired()
    public func supportsKeysend() -> Swift.Bool
    public func requiresKeysend() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CreationError = LightningDevKit.Bindings.CreationError
extension LightningDevKit.Bindings {
  public enum CreationError {
    case DescriptionTooLong
    case RouteTooLong
    case TimestampOutOfBounds
    case InvalidAmount
    case MissingRouteHints
    public static func == (a: LightningDevKit.Bindings.CreationError, b: LightningDevKit.Bindings.CreationError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Secp256k1Error = LightningDevKit.Bindings.Secp256k1Error
extension LightningDevKit.Bindings {
  public enum Secp256k1Error {
    case IncorrectSignature
    case InvalidMessage
    case InvalidPublicKey
    case InvalidSignature
    case InvalidSecretKey
    case InvalidSharedSecret
    case InvalidRecoveryId
    case InvalidTweak
    case NotEnoughMemory
    case InvalidPublicKeySum
    case InvalidParityValue
    public static func == (a: LightningDevKit.Bindings.Secp256k1Error, b: LightningDevKit.Bindings.Secp256k1Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias SemanticError = LightningDevKit.Bindings.SemanticError
extension LightningDevKit.Bindings {
  public enum SemanticError {
    case NoPaymentHash
    case MultiplePaymentHashes
    case NoDescription
    case MultipleDescriptions
    case NoPaymentSecret
    case MultiplePaymentSecrets
    case InvalidFeatures
    case InvalidRecoveryId
    case InvalidSignature
    case ImpreciseAmount
    public static func == (a: LightningDevKit.Bindings.SemanticError, b: LightningDevKit.Bindings.SemanticError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_BlindedHopDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedHop) -> LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedHop?
    @objc deinit
  }
}
public typealias Result_NonePaymentSendFailureZ = LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    @objc deinit
  }
}
public typealias UpdateFailMalformedHTLC = LightningDevKit.Bindings.UpdateFailMalformedHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFailMalformedHTLC : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public func getFailureCode() -> Swift.UInt16
    public func setFailureCode(val: Swift.UInt16)
    public class func eq(a: LightningDevKit.Bindings.UpdateFailMalformedHTLC, b: LightningDevKit.Bindings.UpdateFailMalformedHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ = LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.ChannelManager)) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.ChannelManager)?
    @objc deinit
  }
}
public typealias DelayedPaymentOutputDescriptor = LightningDevKit.Bindings.DelayedPaymentOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DelayedPaymentOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getPerCommitmentPoint() -> [Swift.UInt8]
    public func setPerCommitmentPoint(val: [Swift.UInt8])
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getOutput() -> LightningDevKit.Bindings.TxOut
    public func setOutput(val: LightningDevKit.Bindings.TxOut)
    public func getRevocationPubkey() -> [Swift.UInt8]
    public func setRevocationPubkey(val: [Swift.UInt8])
    public func getChannelKeysId() -> [Swift.UInt8]?
    public func setChannelKeysId(val: [Swift.UInt8])
    public func getChannelValueSatoshis() -> Swift.UInt64
    public func setChannelValueSatoshis(val: Swift.UInt64)
    public init(outpointArg: LightningDevKit.Bindings.OutPoint, perCommitmentPointArg: [Swift.UInt8], toSelfDelayArg: Swift.UInt16, outputArg: LightningDevKit.Bindings.TxOut, revocationPubkeyArg: [Swift.UInt8], channelKeysIdArg: [Swift.UInt8], channelValueSatoshisArg: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor, b: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PhantomKeysManager = LightningDevKit.Bindings.PhantomKeysManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PhantomKeysManager : LightningDevKit.NativeTypeWrapper {
    public func asKeysInterface() -> LightningDevKit.Bindings.KeysInterface
    public init(seed: [Swift.UInt8], startingTimeSecs: Swift.UInt64, startingTimeNanos: Swift.UInt32, crossNodeSeed: [Swift.UInt8])
    public func spendSpendableOutputs(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], changeDestinationScript: [Swift.UInt8], feerateSatPer_1000Weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func deriveChannelKeys(channelValueSatoshis: Swift.UInt64, params: [Swift.UInt8]) -> LightningDevKit.Bindings.InMemorySigner
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelUsage = LightningDevKit.Bindings.ChannelUsage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUsage : LightningDevKit.NativeTypeWrapper {
    public func getAmountMsat() -> Swift.UInt64
    public func setAmountMsat(val: Swift.UInt64)
    public func getInflightHtlcMsat() -> Swift.UInt64
    public func setInflightHtlcMsat(val: Swift.UInt64)
    public func getEffectiveCapacity() -> LightningDevKit.Bindings.EffectiveCapacity
    public func setEffectiveCapacity(val: LightningDevKit.Bindings.EffectiveCapacity)
    public init(amountMsatArg: Swift.UInt64, inflightHtlcMsatArg: Swift.UInt64, effectiveCapacityArg: LightningDevKit.Bindings.EffectiveCapacity)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DataLossProtect = LightningDevKit.Bindings.DataLossProtect
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DataLossProtect : LightningDevKit.NativeTypeWrapper {
    public func getYourLastPerCommitmentSecret() -> [Swift.UInt8]?
    public func setYourLastPerCommitmentSecret(val: [Swift.UInt8])
    public func getMyCurrentPerCommitmentPoint() -> [Swift.UInt8]
    public func setMyCurrentPerCommitmentPoint(val: [Swift.UInt8])
    public init(yourLastPerCommitmentSecretArg: [Swift.UInt8], myCurrentPerCommitmentPointArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.DataLossProtect, b: LightningDevKit.Bindings.DataLossProtect) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PaymentIdPaymentErrorZ = LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentIdPaymentErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentError) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias UnsignedNodeAnnouncement = LightningDevKit.Bindings.UnsignedNodeAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedNodeAnnouncement : LightningDevKit.NativeTypeWrapper {
    public func getFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func setFeatures(val: LightningDevKit.Bindings.NodeFeatures)
    public func getTimestamp() -> Swift.UInt32
    public func setTimestamp(val: Swift.UInt32)
    public func getNodeId() -> [Swift.UInt8]
    public func setNodeId(val: [Swift.UInt8])
    public func getRgb() -> [Swift.UInt8]?
    public func setRgb(val: [Swift.UInt8])
    public func getAlias() -> [Swift.UInt8]?
    public func setAlias(val: [Swift.UInt8])
    public func getAddresses() -> [LightningDevKit.Bindings.NetAddress]
    public func setAddresses(val: [LightningDevKit.Bindings.NetAddress])
    public class func eq(a: LightningDevKit.Bindings.UnsignedNodeAnnouncement, b: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_StringErrorZ = LightningDevKit.Bindings.Result_StringErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StringErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: Swift.String) -> LightningDevKit.Bindings.Result_StringErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Result_StringErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValue() -> Swift.String?
    @objc deinit
  }
}
public typealias ChannelFeatures = LightningDevKit.Bindings.ChannelFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.ChannelFeatures, b: LightningDevKit.Bindings.ChannelFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.ChannelFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MonitorUpdateId = LightningDevKit.Bindings.MonitorUpdateId
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorUpdateId : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.MonitorUpdateId, b: LightningDevKit.Bindings.MonitorUpdateId) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SignatureNoneZ = LightningDevKit.Bindings.Result_SignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_SignatureNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_SiPrefixParseErrorZ = LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SiPrefixParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.SiPrefix) -> LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.ParseError) -> LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseError?
    public func getValue() -> LightningDevKit.Bindings.SiPrefix?
    @objc deinit
  }
}
public typealias CounterpartyChannelTransactionParameters = LightningDevKit.Bindings.CounterpartyChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public func getPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func setPubkeys(val: LightningDevKit.Bindings.ChannelPublicKeys)
    public func getSelectedContestDelay() -> Swift.UInt16
    public func setSelectedContestDelay(val: Swift.UInt16)
    public init(pubkeysArg: LightningDevKit.Bindings.ChannelPublicKeys, selectedContestDelayArg: Swift.UInt16)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelReestablishDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelReestablishDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelReestablish) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelReestablish?
    @objc deinit
  }
}
public typealias UpdateFailHTLC = LightningDevKit.Bindings.UpdateFailHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFailHTLC : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getHtlcId() -> Swift.UInt64
    public func setHtlcId(val: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.UpdateFailHTLC, b: LightningDevKit.Bindings.UpdateFailHTLC) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_QueryChannelRangeDecodeErrorZ = LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_QueryChannelRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.QueryChannelRange?
    @objc deinit
  }
}
public typealias Result_InvoiceSemanticErrorZ = LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SemanticError) -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SemanticError?
    public func getValue() -> LightningDevKit.Bindings.Invoice?
    @objc deinit
  }
}
public typealias ClosingSigned = LightningDevKit.Bindings.ClosingSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingSigned : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getFeeSatoshis() -> Swift.UInt64
    public func setFeeSatoshis(val: Swift.UInt64)
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getFeeRange() -> LightningDevKit.Bindings.ClosingSignedFeeRange?
    public func setFeeRange(val: LightningDevKit.Bindings.ClosingSignedFeeRange)
    public init(channelIdArg: [Swift.UInt8], feeSatoshisArg: Swift.UInt64, signatureArg: [Swift.UInt8], feeRangeArg: LightningDevKit.Bindings.ClosingSignedFeeRange)
    public class func eq(a: LightningDevKit.Bindings.ClosingSigned, b: LightningDevKit.Bindings.ClosingSigned) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DirectedChannelInfo = LightningDevKit.Bindings.DirectedChannelInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DirectedChannelInfo : LightningDevKit.NativeTypeWrapper {
    public func channel() -> LightningDevKit.Bindings.ChannelInfo
    public func htlcMaximumMsat() -> Swift.UInt64
    public func effectiveCapacity() -> LightningDevKit.Bindings.EffectiveCapacity
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias TrustedCommitmentTransaction = LightningDevKit.Bindings.TrustedCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TrustedCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public func txid() -> [Swift.UInt8]
    public func builtTransaction() -> LightningDevKit.Bindings.BuiltCommitmentTransaction
    public func keys() -> LightningDevKit.Bindings.TxCreationKeys
    public func optAnchors() -> Swift.Bool
    public func getHtlcSigs(htlcBaseKey: [Swift.UInt8], channelParameters: LightningDevKit.Bindings.DirectedChannelTransactionParameters) -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PaymentHashPaymentSendFailureZ = LightningDevKit.Bindings.Result_PaymentHashPaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentHashPaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentHashPaymentSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_PaymentHashPaymentSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_NoneAPIErrorZ = LightningDevKit.Bindings.Result_NoneAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    @objc deinit
  }
}
public typealias PayeePubKey = LightningDevKit.Bindings.PayeePubKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PayeePubKey : LightningDevKit.NativeTypeWrapper {
    public func getA() -> [Swift.UInt8]
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PayeePubKey, b: LightningDevKit.Bindings.PayeePubKey) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ClosureReason = LightningDevKit.Bindings.ClosureReason
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosureReason : LightningDevKit.NativeTypeWrapper {
    public enum ClosureReasonType {
      case CounterpartyForceClosed
      case HolderForceClosed
      case CooperativeClosure
      case CommitmentTxConfirmed
      case FundingTimedOut
      case ProcessingError
      case DisconnectedPeer
      case OutdatedChannelManager
      public static func == (a: LightningDevKit.Bindings.ClosureReason.ClosureReasonType, b: LightningDevKit.Bindings.ClosureReason.ClosureReasonType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ClosureReason.ClosureReasonType
    public class func initWithCounterpartyForceClosed(peerMsg: Swift.String) -> LightningDevKit.Bindings.ClosureReason
    public class func initWithHolderForceClosed() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithCooperativeClosure() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithCommitmentTxConfirmed() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithFundingTimedOut() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithProcessingError(err: Swift.String) -> LightningDevKit.Bindings.ClosureReason
    public class func initWithDisconnectedPeer() -> LightningDevKit.Bindings.ClosureReason
    public class func initWithOutdatedChannelManager() -> LightningDevKit.Bindings.ClosureReason
    public class func eq(a: LightningDevKit.Bindings.ClosureReason, b: LightningDevKit.Bindings.ClosureReason) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public func getValueAsCounterpartyForceClosed() -> LightningDevKit.Bindings.ClosureReason.CounterpartyForceClosed?
    public func getValueAsProcessingError() -> LightningDevKit.Bindings.ClosureReason.ProcessingError?
    @objc deinit
    @_hasMissingDesignatedInitializers public class CounterpartyForceClosed : LightningDevKit.NativeTypeWrapper {
      public func getPeerMsg() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProcessingError : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
  }
}
public typealias ReplyChannelRange = LightningDevKit.Bindings.ReplyChannelRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReplyChannelRange : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFirstBlocknum() -> Swift.UInt32
    public func setFirstBlocknum(val: Swift.UInt32)
    public func getNumberOfBlocks() -> Swift.UInt32
    public func setNumberOfBlocks(val: Swift.UInt32)
    public func getSyncComplete() -> Swift.Bool
    public func setSyncComplete(val: Swift.Bool)
    public func getShortChannelIds() -> [Swift.UInt64]
    public func setShortChannelIds(val: [Swift.UInt64])
    public init(chainHashArg: [Swift.UInt8], firstBlocknumArg: Swift.UInt32, numberOfBlocksArg: Swift.UInt32, syncCompleteArg: Swift.Bool, shortChannelIdsArg: [Swift.UInt64])
    public class func eq(a: LightningDevKit.Bindings.ReplyChannelRange, b: LightningDevKit.Bindings.ReplyChannelRange) -> Swift.Bool
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias WatchedOutput = LightningDevKit.Bindings.WatchedOutput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WatchedOutput : LightningDevKit.NativeTypeWrapper {
    public func getBlockHash() -> [Swift.UInt8]?
    public func setBlockHash(val: [Swift.UInt8])
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getScriptPubkey() -> [Swift.UInt8]
    public func setScriptPubkey(val: [Swift.UInt8])
    public init(blockHashArg: [Swift.UInt8], outpointArg: LightningDevKit.Bindings.OutPoint, scriptPubkeyArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.WatchedOutput, b: LightningDevKit.Bindings.WatchedOutput) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InMemorySigner = LightningDevKit.Bindings.InMemorySigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InMemorySigner : LightningDevKit.NativeTypeWrapper {
    public func getFundingKey() -> [Swift.UInt8]?
    public func setFundingKey(val: [Swift.UInt8])
    public func getRevocationBaseKey() -> [Swift.UInt8]?
    public func setRevocationBaseKey(val: [Swift.UInt8])
    public func getPaymentKey() -> [Swift.UInt8]?
    public func setPaymentKey(val: [Swift.UInt8])
    public func getDelayedPaymentBaseKey() -> [Swift.UInt8]?
    public func setDelayedPaymentBaseKey(val: [Swift.UInt8])
    public func getHtlcBaseKey() -> [Swift.UInt8]?
    public func setHtlcBaseKey(val: [Swift.UInt8])
    public func getCommitmentSeed() -> [Swift.UInt8]?
    public func setCommitmentSeed(val: [Swift.UInt8])
    public init(nodeSecret: [Swift.UInt8], fundingKey: [Swift.UInt8], revocationBaseKey: [Swift.UInt8], paymentKey: [Swift.UInt8], delayedPaymentBaseKey: [Swift.UInt8], htlcBaseKey: [Swift.UInt8], commitmentSeed: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, channelKeysId: [Swift.UInt8])
    public func counterpartyPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func counterpartySelectedContestDelay() -> Swift.UInt16
    public func holderSelectedContestDelay() -> Swift.UInt16
    public func isOutbound() -> Swift.Bool
    public func fundingOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func getChannelParameters() -> LightningDevKit.Bindings.ChannelTransactionParameters
    public func optAnchors() -> Swift.Bool
    public func signCounterpartyPaymentInput(spendTx: [Swift.UInt8], inputIdx: Swift.UInt, descriptor: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public func signDynamicP2wshInput(spendTx: [Swift.UInt8], inputIdx: Swift.UInt, descriptor: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public func asBaseSign() -> LightningDevKit.Bindings.BaseSign
    public func asSign() -> LightningDevKit.Bindings.Sign
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MonitorEvent = LightningDevKit.Bindings.MonitorEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorEvent : LightningDevKit.NativeTypeWrapper {
    public enum MonitorEventType {
      case HTLCEvent
      case CommitmentTxConfirmed
      case Completed
      case UpdateFailed
      public static func == (a: LightningDevKit.Bindings.MonitorEvent.MonitorEventType, b: LightningDevKit.Bindings.MonitorEvent.MonitorEventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MonitorEvent.MonitorEventType
    public class func initWithHtlcevent(a: LightningDevKit.Bindings.HTLCUpdate) -> LightningDevKit.Bindings.MonitorEvent
    public class func initWithCommitmentTxConfirmed(a: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.MonitorEvent
    public class func initWithCompleted(fundingTxo: LightningDevKit.Bindings.OutPoint, monitorUpdateId: Swift.UInt64) -> LightningDevKit.Bindings.MonitorEvent
    public class func initWithUpdateFailed(a: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.MonitorEvent
    public class func eq(a: LightningDevKit.Bindings.MonitorEvent, b: LightningDevKit.Bindings.MonitorEvent) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public func getValueAsHtlcEvent() -> LightningDevKit.Bindings.HTLCUpdate?
    public func getValueAsCommitmentTxConfirmed() -> LightningDevKit.Bindings.OutPoint?
    public func getValueAsCompleted() -> LightningDevKit.Bindings.MonitorEvent.Completed?
    public func getValueAsUpdateFailed() -> LightningDevKit.Bindings.OutPoint?
    @objc deinit
    @_hasMissingDesignatedInitializers public class Completed : LightningDevKit.NativeTypeWrapper {
      public func getFundingTxo() -> LightningDevKit.Bindings.OutPoint
      public func getMonitorUpdateId() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias ParseOrSemanticError = LightningDevKit.Bindings.ParseOrSemanticError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ParseOrSemanticError : LightningDevKit.NativeTypeWrapper {
    public enum ParseOrSemanticErrorType {
      case ParseError
      case SemanticError
      public static func == (a: LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType, b: LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType
    public class func initWithParseError(a: LightningDevKit.Bindings.ParseError) -> LightningDevKit.Bindings.ParseOrSemanticError
    public class func initWithSemanticError(a: LightningDevKit.Bindings.SemanticError) -> LightningDevKit.Bindings.ParseOrSemanticError
    public class func eq(a: LightningDevKit.Bindings.ParseOrSemanticError, b: LightningDevKit.Bindings.ParseOrSemanticError) -> Swift.Bool
    public func toStr() -> Swift.String
    public func getValueAsParseError() -> LightningDevKit.Bindings.ParseError?
    public func getValueAsSemanticError() -> LightningDevKit.Bindings.SemanticError?
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class LDKExampleClass {
  public class func printSomething()
  public func printInstance()
  @objc deinit
}
public typealias ChannelTypeFeatures = LightningDevKit.Bindings.ChannelTypeFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelTypeFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.ChannelTypeFeatures, b: LightningDevKit.Bindings.ChannelTypeFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public func setStaticRemoteKeyOptional()
    public func setStaticRemoteKeyRequired()
    public func supportsStaticRemoteKey() -> Swift.Bool
    public func requiresStaticRemoteKey() -> Swift.Bool
    public func setScidPrivacyOptional()
    public func setScidPrivacyRequired()
    public func supportsScidPrivacy() -> Swift.Bool
    public func requiresScidPrivacy() -> Swift.Bool
    public func setZeroConfOptional()
    public func setZeroConfRequired()
    public func supportsZeroConf() -> Swift.Bool
    public func requiresZeroConf() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_SignatureSignatureZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_SignatureSignatureZNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], [Swift.UInt8])) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], [Swift.UInt8])?
    @objc deinit
  }
}
public typealias Result_InvoiceRequestFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_InvoiceRequestFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceRequestFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.InvoiceRequestFeatures) -> LightningDevKit.Bindings.Result_InvoiceRequestFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InvoiceRequestFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InvoiceRequestFeatures?
    @objc deinit
  }
}
public typealias RouteHint = LightningDevKit.Bindings.RouteHint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHint : LightningDevKit.NativeTypeWrapper {
    public func getA() -> [LightningDevKit.Bindings.RouteHintHop]
    public func setA(val: [LightningDevKit.Bindings.RouteHintHop])
    public init(aArg: [LightningDevKit.Bindings.RouteHintHop])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHint, b: LightningDevKit.Bindings.RouteHint) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UpdateFee = LightningDevKit.Bindings.UpdateFee
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFee : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getFeeratePerKw() -> Swift.UInt32
    public func setFeeratePerKw(val: Swift.UInt32)
    public init(channelIdArg: [Swift.UInt8], feeratePerKwArg: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.UpdateFee, b: LightningDevKit.Bindings.UpdateFee) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Event = LightningDevKit.Bindings.Event
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Event : LightningDevKit.NativeTypeWrapper {
    public enum EventType {
      case FundingGenerationReady
      case PaymentClaimable
      case PaymentClaimed
      case PaymentSent
      case PaymentFailed
      case PaymentPathSuccessful
      case PaymentPathFailed
      case ProbeSuccessful
      case ProbeFailed
      case PendingHTLCsForwardable
      case HTLCIntercepted
      case SpendableOutputs
      case PaymentForwarded
      case ChannelReady
      case ChannelClosed
      case DiscardFunding
      case OpenChannelRequest
      case HTLCHandlingFailed
      public static func == (a: LightningDevKit.Bindings.Event.EventType, b: LightningDevKit.Bindings.Event.EventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Event.EventType
    public class func initWithFundingGenerationReady(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, outputScript: [Swift.UInt8], userChannelId: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentClaimable(receiverNodeId: [Swift.UInt8], paymentHash: [Swift.UInt8], amountMsat: Swift.UInt64, purpose: LightningDevKit.Bindings.PaymentPurpose, viaChannelId: [Swift.UInt8], viaUserChannelId: [Swift.UInt8]?) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentClaimed(receiverNodeId: [Swift.UInt8], paymentHash: [Swift.UInt8], amountMsat: Swift.UInt64, purpose: LightningDevKit.Bindings.PaymentPurpose) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentSent(paymentId: [Swift.UInt8], paymentPreimage: [Swift.UInt8], paymentHash: [Swift.UInt8], feePaidMsat: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentFailed(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentPathSuccessful(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], path: [LightningDevKit.Bindings.RouteHop]) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentPathFailed(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], paymentFailedPermanently: Swift.Bool, networkUpdate: LightningDevKit.Bindings.NetworkUpdate?, allPathsFailed: Swift.Bool, path: [LightningDevKit.Bindings.RouteHop], shortChannelId: Swift.UInt64?, retry: LightningDevKit.Bindings.RouteParameters) -> LightningDevKit.Bindings.Event
    public class func initWithProbeSuccessful(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], path: [LightningDevKit.Bindings.RouteHop]) -> LightningDevKit.Bindings.Event
    public class func initWithProbeFailed(paymentId: [Swift.UInt8], paymentHash: [Swift.UInt8], path: [LightningDevKit.Bindings.RouteHop], shortChannelId: Swift.UInt64?) -> LightningDevKit.Bindings.Event
    public class func initWithPendingHtlcsForwardable(timeForwardable: Swift.UInt64) -> LightningDevKit.Bindings.Event
    public class func initWithHtlcintercepted(interceptId: [Swift.UInt8], requestedNextHopScid: Swift.UInt64, paymentHash: [Swift.UInt8], inboundAmountMsat: Swift.UInt64, expectedOutboundAmountMsat: Swift.UInt64) -> LightningDevKit.Bindings.Event
    public class func initWithSpendableOutputs(outputs: [LightningDevKit.Bindings.SpendableOutputDescriptor]) -> LightningDevKit.Bindings.Event
    public class func initWithPaymentForwarded(prevChannelId: [Swift.UInt8], nextChannelId: [Swift.UInt8], feeEarnedMsat: Swift.UInt64?, claimFromOnchainTx: Swift.Bool) -> LightningDevKit.Bindings.Event
    public class func initWithChannelReady(channelId: [Swift.UInt8], userChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], channelType: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Event
    public class func initWithChannelClosed(channelId: [Swift.UInt8], userChannelId: [Swift.UInt8], reason: LightningDevKit.Bindings.ClosureReason) -> LightningDevKit.Bindings.Event
    public class func initWithDiscardFunding(channelId: [Swift.UInt8], transaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func initWithOpenChannelRequest(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], fundingSatoshis: Swift.UInt64, pushMsat: Swift.UInt64, channelType: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Event
    public class func initWithHtlchandlingFailed(prevChannelId: [Swift.UInt8], failedNextDestination: LightningDevKit.Bindings.HTLCDestination) -> LightningDevKit.Bindings.Event
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public func getValueAsFundingGenerationReady() -> LightningDevKit.Bindings.Event.FundingGenerationReady?
    public func getValueAsPaymentClaimable() -> LightningDevKit.Bindings.Event.PaymentClaimable?
    public func getValueAsPaymentClaimed() -> LightningDevKit.Bindings.Event.PaymentClaimed?
    public func getValueAsPaymentSent() -> LightningDevKit.Bindings.Event.PaymentSent?
    public func getValueAsPaymentFailed() -> LightningDevKit.Bindings.Event.PaymentFailed?
    public func getValueAsPaymentPathSuccessful() -> LightningDevKit.Bindings.Event.PaymentPathSuccessful?
    public func getValueAsPaymentPathFailed() -> LightningDevKit.Bindings.Event.PaymentPathFailed?
    public func getValueAsProbeSuccessful() -> LightningDevKit.Bindings.Event.ProbeSuccessful?
    public func getValueAsProbeFailed() -> LightningDevKit.Bindings.Event.ProbeFailed?
    public func getValueAsPendingHtlcsForwardable() -> LightningDevKit.Bindings.Event.PendingHTLCsForwardable?
    public func getValueAsHtlcIntercepted() -> LightningDevKit.Bindings.Event.HTLCIntercepted?
    public func getValueAsSpendableOutputs() -> LightningDevKit.Bindings.Event.SpendableOutputs?
    public func getValueAsPaymentForwarded() -> LightningDevKit.Bindings.Event.PaymentForwarded?
    public func getValueAsChannelReady() -> LightningDevKit.Bindings.Event.ChannelReady?
    public func getValueAsChannelClosed() -> LightningDevKit.Bindings.Event.ChannelClosed?
    public func getValueAsDiscardFunding() -> LightningDevKit.Bindings.Event.DiscardFunding?
    public func getValueAsOpenChannelRequest() -> LightningDevKit.Bindings.Event.OpenChannelRequest?
    public func getValueAsHtlcHandlingFailed() -> LightningDevKit.Bindings.Event.HTLCHandlingFailed?
    @objc deinit
    @_hasMissingDesignatedInitializers public class FundingGenerationReady : LightningDevKit.NativeTypeWrapper {
      public func getTemporaryChannelId() -> [Swift.UInt8]
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getChannelValueSatoshis() -> Swift.UInt64
      public func getOutputScript() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentClaimable : LightningDevKit.NativeTypeWrapper {
      public func getReceiverNodeId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getAmountMsat() -> Swift.UInt64
      public func getPurpose() -> LightningDevKit.Bindings.PaymentPurpose
      public func getViaChannelId() -> [Swift.UInt8]
      public func getViaUserChannelId() -> [Swift.UInt8]?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentClaimed : LightningDevKit.NativeTypeWrapper {
      public func getReceiverNodeId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getAmountMsat() -> Swift.UInt64
      public func getPurpose() -> LightningDevKit.Bindings.PaymentPurpose
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentSent : LightningDevKit.NativeTypeWrapper {
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentPreimage() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getFeePaidMsat() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentFailed : LightningDevKit.NativeTypeWrapper {
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentPathSuccessful : LightningDevKit.NativeTypeWrapper {
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentPathFailed : LightningDevKit.NativeTypeWrapper {
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPaymentFailedPermanently() -> Swift.Bool
      public func getNetworkUpdate() -> LightningDevKit.Bindings.NetworkUpdate?
      public func getAllPathsFailed() -> Swift.Bool
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      public func getShortChannelId() -> Swift.UInt64?
      public func getRetry() -> LightningDevKit.Bindings.RouteParameters
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProbeSuccessful : LightningDevKit.NativeTypeWrapper {
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProbeFailed : LightningDevKit.NativeTypeWrapper {
      public func getPaymentId() -> [Swift.UInt8]
      public func getPaymentHash() -> [Swift.UInt8]
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      public func getShortChannelId() -> Swift.UInt64?
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PendingHTLCsForwardable : LightningDevKit.NativeTypeWrapper {
      public func getTimeForwardable() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HTLCIntercepted : LightningDevKit.NativeTypeWrapper {
      public func getInterceptId() -> [Swift.UInt8]
      public func getRequestedNextHopScid() -> Swift.UInt64
      public func getPaymentHash() -> [Swift.UInt8]
      public func getInboundAmountMsat() -> Swift.UInt64
      public func getExpectedOutboundAmountMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SpendableOutputs : LightningDevKit.NativeTypeWrapper {
      public func getOutputs() -> [LightningDevKit.Bindings.SpendableOutputDescriptor]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentForwarded : LightningDevKit.NativeTypeWrapper {
      public func getPrevChannelId() -> [Swift.UInt8]
      public func getNextChannelId() -> [Swift.UInt8]
      public func getFeeEarnedMsat() -> Swift.UInt64?
      public func getClaimFromOnchainTx() -> Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelReady : LightningDevKit.NativeTypeWrapper {
      public func getChannelId() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelClosed : LightningDevKit.NativeTypeWrapper {
      public func getChannelId() -> [Swift.UInt8]
      public func getUserChannelId() -> [Swift.UInt8]
      public func getReason() -> LightningDevKit.Bindings.ClosureReason
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class DiscardFunding : LightningDevKit.NativeTypeWrapper {
      public func getChannelId() -> [Swift.UInt8]
      public func getTransaction() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OpenChannelRequest : LightningDevKit.NativeTypeWrapper {
      public func getTemporaryChannelId() -> [Swift.UInt8]
      public func getCounterpartyNodeId() -> [Swift.UInt8]
      public func getFundingSatoshis() -> Swift.UInt64
      public func getPushMsat() -> Swift.UInt64
      public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HTLCHandlingFailed : LightningDevKit.NativeTypeWrapper {
      public func getPrevChannelId() -> [Swift.UInt8]
      public func getFailedNextDestination() -> LightningDevKit.Bindings.HTLCDestination
      @objc deinit
    }
  }
}
public typealias Result_ReplyChannelRangeDecodeErrorZ = LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ReplyChannelRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ReplyChannelRange?
    @objc deinit
  }
}
public typealias ReadOnlyNetworkGraph = LightningDevKit.Bindings.ReadOnlyNetworkGraph
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReadOnlyNetworkGraph : LightningDevKit.NativeTypeWrapper {
    public func channel(shortChannelId: Swift.UInt64) -> LightningDevKit.Bindings.ChannelInfo?
    public func listChannels() -> [Swift.UInt64]
    public func node(nodeId: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.NodeInfo?
    public func listNodes() -> [LightningDevKit.Bindings.NodeId]
    public func getAddresses(pubkey: [Swift.UInt8]) -> [LightningDevKit.Bindings.NetAddress]?
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_InvoiceFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.InvoiceFeatures) -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InvoiceFeatures?
    @objc deinit
  }
}
public typealias P2PGossipSync = LightningDevKit.Bindings.P2PGossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class P2PGossipSync : LightningDevKit.NativeTypeWrapper {
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph, chainAccess: LightningDevKit.Bindings.Access?, logger: LightningDevKit.Bindings.Logger)
    public func addChainAccess(chainAccess: LightningDevKit.Bindings.Access?)
    public func asRoutingMessageHandler() -> LightningDevKit.Bindings.RoutingMessageHandler
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Shutdown = LightningDevKit.Bindings.Shutdown
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Shutdown : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getScriptpubkey() -> [Swift.UInt8]
    public func setScriptpubkey(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], scriptpubkeyArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.Shutdown, b: LightningDevKit.Bindings.Shutdown) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ReplyShortChannelIdsEndDecodeErrorZ = LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ReplyShortChannelIdsEndDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ReplyShortChannelIdsEnd?
    @objc deinit
  }
}
public typealias Result_PongDecodeErrorZ = LightningDevKit.Bindings.Result_PongDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PongDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Pong) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Pong?
    @objc deinit
  }
}
public typealias Result_C2Tuple_PaymentHashPaymentSecretZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentSecretZNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], [Swift.UInt8])) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], [Swift.UInt8])?
    @objc deinit
  }
}
public typealias Result_PaymentSecretNoneZ = LightningDevKit.Bindings.Result_PaymentSecretNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentSecretNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias ChannelMonitorUpdate = LightningDevKit.Bindings.ChannelMonitorUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelMonitorUpdate : LightningDevKit.NativeTypeWrapper {
    public func getUpdateId() -> Swift.UInt64
    public func setUpdateId(val: Swift.UInt64)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RevokeAndACKDecodeErrorZ = LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RevokeAndACKDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.RevokeAndACK) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RevokeAndACK?
    @objc deinit
  }
}
public typealias Result_COption_TypeZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_TypeZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.BindingsType?) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BindingsType?
    @objc deinit
  }
}
public typealias Result_RouteParametersDecodeErrorZ = LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.RouteParameters) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteParameters?
    @objc deinit
  }
}
public typealias Result_ChannelInfoDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelInfo) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelInfo?
    @objc deinit
  }
}
public typealias Result_PaymentPreimageAPIErrorZ = LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentPreimageAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias SendError = LightningDevKit.Bindings.SendError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SendError : LightningDevKit.NativeTypeWrapper {
    public enum SendErrorType {
      case Secp256k1
      case TooBigPacket
      case TooFewBlindedHops
      case InvalidFirstHop
      case InvalidMessage
      case BufferFull
      case GetNodeIdFailed
      case BlindedPathAdvanceFailed
      public static func == (a: LightningDevKit.Bindings.SendError.SendErrorType, b: LightningDevKit.Bindings.SendError.SendErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SendError.SendErrorType
    public class func initWithSecp256k1(a: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.SendError
    public class func initWithTooBigPacket() -> LightningDevKit.Bindings.SendError
    public class func initWithTooFewBlindedHops() -> LightningDevKit.Bindings.SendError
    public class func initWithInvalidFirstHop() -> LightningDevKit.Bindings.SendError
    public class func initWithInvalidMessage() -> LightningDevKit.Bindings.SendError
    public class func initWithBufferFull() -> LightningDevKit.Bindings.SendError
    public class func initWithGetNodeIdFailed() -> LightningDevKit.Bindings.SendError
    public class func initWithBlindedPathAdvanceFailed() -> LightningDevKit.Bindings.SendError
    public class func eq(a: LightningDevKit.Bindings.SendError, b: LightningDevKit.Bindings.SendError) -> Swift.Bool
    public func getValueAsSecp256k1() -> LightningDevKit.Bindings.Secp256k1Error?
    @objc deinit
  }
}
public typealias PaymentPurpose = LightningDevKit.Bindings.PaymentPurpose
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentPurpose : LightningDevKit.NativeTypeWrapper {
    public enum PaymentPurposeType {
      case InvoicePayment
      case SpontaneousPayment
      public static func == (a: LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType, b: LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType
    public class func initWithInvoicePayment(paymentPreimage: [Swift.UInt8], paymentSecret: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentPurpose
    public class func initWithSpontaneousPayment(a: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentPurpose
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public func getValueAsInvoicePayment() -> LightningDevKit.Bindings.PaymentPurpose.InvoicePayment?
    public func getValueAsSpontaneousPayment() -> [Swift.UInt8]?
    @objc deinit
    @_hasMissingDesignatedInitializers public class InvoicePayment : LightningDevKit.NativeTypeWrapper {
      public func getPaymentPreimage() -> [Swift.UInt8]
      public func getPaymentSecret() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias NetworkGraph = LightningDevKit.Bindings.NetworkGraph
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetworkGraph : LightningDevKit.NativeTypeWrapper {
    public func handleNetworkUpdate(networkUpdate: LightningDevKit.Bindings.NetworkUpdate)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public init(genesisHash: [Swift.UInt8], logger: LightningDevKit.Bindings.Logger)
    public func readOnly() -> LightningDevKit.Bindings.ReadOnlyNetworkGraph
    public func getLastRapidGossipSyncTimestamp() -> Swift.UInt32?
    public func setLastRapidGossipSyncTimestamp(lastRapidGossipSyncTimestamp: Swift.UInt32)
    public func updateNodeFromAnnouncement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateNodeFromUnsignedAnnouncement(msg: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelFromAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement, chainAccess: LightningDevKit.Bindings.Access?) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelFromUnsignedAnnouncement(msg: LightningDevKit.Bindings.UnsignedChannelAnnouncement, chainAccess: LightningDevKit.Bindings.Access?) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func addChannelFromPartialAnnouncement(shortChannelId: Swift.UInt64, timestamp: Swift.UInt64, features: LightningDevKit.Bindings.ChannelFeatures, nodeId_1: [Swift.UInt8], nodeId_2: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func channelFailed(shortChannelId: Swift.UInt64, isPermanent: Swift.Bool)
    public func nodeFailedPermanent(nodeId: [Swift.UInt8])
    public func removeStaleChannelsAndTracking()
    public func removeStaleChannelsAndTrackingWithTime(currentTimeUnix: Swift.UInt64)
    public func updateChannel(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func updateChannelUnsigned(msg: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RawInvoice = LightningDevKit.Bindings.RawInvoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RawInvoice : LightningDevKit.NativeTypeWrapper {
    public func getData() -> LightningDevKit.Bindings.RawDataPart
    public func setData(val: LightningDevKit.Bindings.RawDataPart)
    public class func eq(a: LightningDevKit.Bindings.RawInvoice, b: LightningDevKit.Bindings.RawInvoice) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func signableHash() -> [Swift.UInt8]
    public func paymentHash() -> LightningDevKit.Bindings.Sha256?
    public func description() -> LightningDevKit.Bindings.Description?
    public func payeePubKey() -> LightningDevKit.Bindings.PayeePubKey?
    public func descriptionHash() -> LightningDevKit.Bindings.Sha256?
    public func expiryTime() -> LightningDevKit.Bindings.ExpiryTime?
    public func minFinalCltvExpiry() -> LightningDevKit.Bindings.MinFinalCltvExpiry?
    public func paymentSecret() -> [Swift.UInt8]?
    public func features() -> LightningDevKit.Bindings.InvoiceFeatures?
    public func privateRoutes() -> [LightningDevKit.Bindings.PrivateRoute]
    public func amountPicoBtc() -> Swift.UInt64?
    public func currency() -> LightningDevKit.Bindings.Currency
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_ClosureReasonZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_ClosureReasonZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ClosureReason?) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosureReason?
    @objc deinit
  }
}
public typealias Invoice = LightningDevKit.Bindings.Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Invoice : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.Invoice, b: LightningDevKit.Bindings.Invoice) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func intoSignedRaw() -> LightningDevKit.Bindings.SignedRawInvoice
    public func checkSignature() -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
    public class func fromSigned(signedInvoice: LightningDevKit.Bindings.SignedRawInvoice) -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
    public func timestamp() -> Swift.UInt64
    public func durationSinceEpoch() -> Swift.UInt64
    public func paymentHash() -> [Swift.UInt8]?
    public func payeePubKey() -> [Swift.UInt8]?
    public func paymentSecret() -> [Swift.UInt8]?
    public func features() -> LightningDevKit.Bindings.InvoiceFeatures?
    public func recoverPayeePubKey() -> [Swift.UInt8]
    public func expiryTime() -> Swift.UInt64
    public func isExpired() -> Swift.Bool
    public func wouldExpire(atTime: Swift.UInt64) -> Swift.Bool
    public func minFinalCltvExpiry() -> Swift.UInt64
    public func privateRoutes() -> [LightningDevKit.Bindings.PrivateRoute]
    public func routeHints() -> [LightningDevKit.Bindings.RouteHint]
    public func currency() -> LightningDevKit.Bindings.Currency
    public func amountMilliSatoshis() -> Swift.UInt64?
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
    public func toStr() -> Swift.String
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelHandshakeConfig = LightningDevKit.Bindings.ChannelHandshakeConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelHandshakeConfig : LightningDevKit.NativeTypeWrapper {
    public func getMinimumDepth() -> Swift.UInt32
    public func setMinimumDepth(val: Swift.UInt32)
    public func getOurToSelfDelay() -> Swift.UInt16
    public func setOurToSelfDelay(val: Swift.UInt16)
    public func getOurHtlcMinimumMsat() -> Swift.UInt64
    public func setOurHtlcMinimumMsat(val: Swift.UInt64)
    public func getMaxInboundHtlcValueInFlightPercentOfChannel() -> Swift.UInt8
    public func setMaxInboundHtlcValueInFlightPercentOfChannel(val: Swift.UInt8)
    public func getNegotiateScidPrivacy() -> Swift.Bool
    public func setNegotiateScidPrivacy(val: Swift.Bool)
    public func getAnnouncedChannel() -> Swift.Bool
    public func setAnnouncedChannel(val: Swift.Bool)
    public func getCommitUpfrontShutdownPubkey() -> Swift.Bool
    public func setCommitUpfrontShutdownPubkey(val: Swift.Bool)
    public func getTheirChannelReserveProportionalMillionths() -> Swift.UInt32
    public func setTheirChannelReserveProportionalMillionths(val: Swift.UInt32)
    public init(minimumDepthArg: Swift.UInt32, ourToSelfDelayArg: Swift.UInt16, ourHtlcMinimumMsatArg: Swift.UInt64, maxInboundHtlcValueInFlightPercentOfChannelArg: Swift.UInt8, negotiateScidPrivacyArg: Swift.Bool, announcedChannelArg: Swift.Bool, commitUpfrontShutdownPubkeyArg: Swift.Bool, theirChannelReserveProportionalMillionthsArg: Swift.UInt32)
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelHandshakeConfig
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_InitFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InitFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.InitFeatures) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InitFeatures?
    @objc deinit
  }
}
public typealias Result_ChannelMonitorUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelMonitorUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelMonitorUpdate) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelMonitorUpdate?
    @objc deinit
  }
}
public typealias Result_ChannelUpdateInfoDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelUpdateInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelUpdateInfo) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    @objc deinit
  }
}
public typealias InvoiceFeatures = LightningDevKit.Bindings.InvoiceFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.InvoiceFeatures, b: LightningDevKit.Bindings.InvoiceFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.InvoiceFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
    public func setVariableLengthOnionOptional()
    public func setVariableLengthOnionRequired()
    public func supportsVariableLengthOnion() -> Swift.Bool
    public func requiresVariableLengthOnion() -> Swift.Bool
    public func setPaymentSecretOptional()
    public func setPaymentSecretRequired()
    public func supportsPaymentSecret() -> Swift.Bool
    public func requiresPaymentSecret() -> Swift.Bool
    public func setBasicMppOptional()
    public func setBasicMppRequired()
    public func supportsBasicMpp() -> Swift.Bool
    public func requiresBasicMpp() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ChannelManagerConstructor : LightningDevKit.NativeTypeWrapper {
  final public let channelManager: LightningDevKit.ChannelManager
  final public let channel_manager_latest_block_hash: [Swift.UInt8]?
  public var netGraph: LightningDevKit.NetworkGraph? {
    get
  }
  public var payer: LightningDevKit.InvoicePayer? {
    get
  }
  final public let peerManager: LightningDevKit.PeerManager
  public var channel_monitors: [(LightningDevKit.ChannelMonitor, [Swift.UInt8])] {
    get
  }
  public init(channelManagerSerialized: [Swift.UInt8], channelMonitorsSerialized: [[Swift.UInt8]], keysInterface: LightningDevKit.KeysInterface, feeEstimator: LightningDevKit.FeeEstimator, chainMonitor: LightningDevKit.ChainMonitor, filter: LightningDevKit.Filter?, netGraphSerialized: [Swift.UInt8]?, txBroadcaster: LightningDevKit.BroadcasterInterface, logger: LightningDevKit.Logger, enableP2PGossip: Swift.Bool = false) throws
  public init(network: LightningDevKit.Network, config: LightningDevKit.UserConfig, currentBlockchainTipHash: [Swift.UInt8], currentBlockchainTipHeight: Swift.UInt32, keysInterface: LightningDevKit.KeysInterface, feeEstimator: LightningDevKit.FeeEstimator, chainMonitor: LightningDevKit.ChainMonitor, netGraph: LightningDevKit.NetworkGraph?, txBroadcaster: LightningDevKit.BroadcasterInterface, logger: LightningDevKit.Logger, enableP2PGossip: Swift.Bool = false)
  public func chainSyncCompleted(persister: LightningDevKit.ExtendedChannelManagerPersister, scorer: LightningDevKit.MultiThreadedLockableScore?)
  public func interrupt()
  public func getTCPPeerHandler() -> LightningDevKit.TCPPeerHandler
  @objc deinit
}
public protocol ExtendedChannelManagerPersister : LightningDevKit.Bindings.Persister {
  func handleEvent(event: LightningDevKit.Event)
}
@_hasMissingDesignatedInitializers public class TCPPeerHandler {
  public func bind(address: Swift.String, port: Swift.UInt16) -> Swift.Bool
  public func connect(address: Swift.String, port: Swift.UInt16, theirNodeId: [Swift.UInt8]) -> Swift.Bool
  @objc deinit
}
public typealias Result_COption_HTLCDestinationZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_HTLCDestinationZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCDestination?) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCDestination?
    @objc deinit
  }
}
public typealias HTLCOutputInCommitment = LightningDevKit.Bindings.HTLCOutputInCommitment
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCOutputInCommitment : LightningDevKit.NativeTypeWrapper {
    public func getOffered() -> Swift.Bool
    public func setOffered(val: Swift.Bool)
    public func getAmountMsat() -> Swift.UInt64
    public func setAmountMsat(val: Swift.UInt64)
    public func getCltvExpiry() -> Swift.UInt32
    public func setCltvExpiry(val: Swift.UInt32)
    public func getPaymentHash() -> [Swift.UInt8]?
    public func setPaymentHash(val: [Swift.UInt8])
    public func getTransactionOutputIndex() -> Swift.UInt32?
    public func setTransactionOutputIndex(val: Swift.UInt32?)
    public init(offeredArg: Swift.Bool, amountMsatArg: Swift.UInt64, cltvExpiryArg: Swift.UInt32, paymentHashArg: [Swift.UInt8], transactionOutputIndexArg: Swift.UInt32?)
    public class func eq(a: LightningDevKit.Bindings.HTLCOutputInCommitment, b: LightningDevKit.Bindings.HTLCOutputInCommitment) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_FixedPenaltyScorerDecodeErrorZ = LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FixedPenaltyScorerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.FixedPenaltyScorer) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FixedPenaltyScorer?
    @objc deinit
  }
}
public typealias BestBlock = LightningDevKit.Bindings.BestBlock
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BestBlock : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.BestBlock, b: LightningDevKit.Bindings.BestBlock) -> Swift.Bool
    public class func initWithGenesis(network: LightningDevKit.Bindings.Network) -> LightningDevKit.Bindings.BestBlock
    public init(blockHash: [Swift.UInt8], height: Swift.UInt32)
    public func blockHash() -> [Swift.UInt8]
    public func height() -> Swift.UInt32
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelCounterparty = LightningDevKit.Bindings.ChannelCounterparty
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelCounterparty : LightningDevKit.NativeTypeWrapper {
    public func getNodeId() -> [Swift.UInt8]
    public func setNodeId(val: [Swift.UInt8])
    public func getFeatures() -> LightningDevKit.Bindings.InitFeatures
    public func setFeatures(val: LightningDevKit.Bindings.InitFeatures)
    public func getUnspendablePunishmentReserve() -> Swift.UInt64
    public func setUnspendablePunishmentReserve(val: Swift.UInt64)
    public func getForwardingInfo() -> LightningDevKit.Bindings.CounterpartyForwardingInfo?
    public func setForwardingInfo(val: LightningDevKit.Bindings.CounterpartyForwardingInfo)
    public func getOutboundHtlcMinimumMsat() -> Swift.UInt64?
    public func setOutboundHtlcMinimumMsat(val: Swift.UInt64?)
    public func getOutboundHtlcMaximumMsat() -> Swift.UInt64?
    public func setOutboundHtlcMaximumMsat(val: Swift.UInt64?)
    public init(nodeIdArg: [Swift.UInt8], featuresArg: LightningDevKit.Bindings.InitFeatures, unspendablePunishmentReserveArg: Swift.UInt64, forwardingInfoArg: LightningDevKit.Bindings.CounterpartyForwardingInfo, outboundHtlcMinimumMsatArg: Swift.UInt64?, outboundHtlcMaximumMsatArg: Swift.UInt64?)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_AnnouncementSignaturesDecodeErrorZ = LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AnnouncementSignaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.AnnouncementSignatures) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AnnouncementSignatures?
    @objc deinit
  }
}
public typealias Result_PayeePubKeyErrorZ = LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PayeePubKeyErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.PayeePubKey) -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValue() -> LightningDevKit.Bindings.PayeePubKey?
    @objc deinit
  }
}
public typealias Result_ChannelFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelFeatures) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelFeatures?
    @objc deinit
  }
}
public typealias Result_ChannelPublicKeysDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelPublicKeysDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelPublicKeys?
    @objc deinit
  }
}
public typealias Result_ChannelTypeFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelTypeFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    @objc deinit
  }
}
public typealias Result_ChannelAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelAnnouncement?
    @objc deinit
  }
}
public typealias Result_PositiveTimestampCreationErrorZ = LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PositiveTimestampCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.PositiveTimestamp) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.CreationError?
    public func getValue() -> LightningDevKit.Bindings.PositiveTimestamp?
    @objc deinit
  }
}
public typealias Result_SignedRawInvoiceParseErrorZ = LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignedRawInvoiceParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.SignedRawInvoice) -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.ParseError) -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseError?
    public func getValue() -> LightningDevKit.Bindings.SignedRawInvoice?
    @objc deinit
  }
}
public typealias Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ = LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> ([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)?
    @objc deinit
  }
}
public typealias BackgroundProcessor = LightningDevKit.Bindings.BackgroundProcessor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BackgroundProcessor : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `gossipSync`.")
    public class func start(persister: LightningDevKit.Bindings.Persister, eventHandler: LightningDevKit.Bindings.EventHandler, chainMonitor: LightningDevKit.Bindings.ChainMonitor, channelManager: LightningDevKit.Bindings.ChannelManager, gossipSync: LightningDevKit.Bindings.GossipSync, peerManager: LightningDevKit.Bindings.PeerManager, logger: LightningDevKit.Bindings.Logger, scorer: LightningDevKit.Bindings.WriteableScore?) -> LightningDevKit.Bindings.BackgroundProcessor
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: self.")
    public func join() -> LightningDevKit.Bindings.Result_NoneErrorZ
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: self.")
    public func stop() -> LightningDevKit.Bindings.Result_NoneErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ParseError = LightningDevKit.Bindings.ParseError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ParseError : LightningDevKit.NativeTypeWrapper {
    public enum ParseErrorType {
      case Bech32Error
      case ParseAmountError
      case MalformedSignature
      case BadPrefix
      case UnknownCurrency
      case UnknownSiPrefix
      case MalformedHRP
      case TooShortDataPart
      case UnexpectedEndOfTaggedFields
      case DescriptionDecodeError
      case PaddingError
      case IntegerOverflowError
      case InvalidSegWitProgramLength
      case InvalidPubKeyHashLength
      case InvalidScriptHashLength
      case InvalidRecoveryId
      case InvalidSliceLength
      case Skip
      public static func == (a: LightningDevKit.Bindings.ParseError.ParseErrorType, b: LightningDevKit.Bindings.ParseError.ParseErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ParseError.ParseErrorType
    public class func initWithBech32Error(a: LightningDevKit.Bindings.Bech32Error) -> LightningDevKit.Bindings.ParseError
    public class func initWithParseAmountError(a: LightningDevKit.Bindings.BindingsError) -> LightningDevKit.Bindings.ParseError
    public class func initWithMalformedSignature(a: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.ParseError
    public class func initWithBadPrefix() -> LightningDevKit.Bindings.ParseError
    public class func initWithUnknownCurrency() -> LightningDevKit.Bindings.ParseError
    public class func initWithUnknownSiPrefix() -> LightningDevKit.Bindings.ParseError
    public class func initWithMalformedHrp() -> LightningDevKit.Bindings.ParseError
    public class func initWithTooShortDataPart() -> LightningDevKit.Bindings.ParseError
    public class func initWithUnexpectedEndOfTaggedFields() -> LightningDevKit.Bindings.ParseError
    public class func initWithDescriptionDecodeError(a: LightningDevKit.Bindings.BindingsError) -> LightningDevKit.Bindings.ParseError
    public class func initWithPaddingError() -> LightningDevKit.Bindings.ParseError
    public class func initWithIntegerOverflowError() -> LightningDevKit.Bindings.ParseError
    public class func initWithInvalidSegWitProgramLength() -> LightningDevKit.Bindings.ParseError
    public class func initWithInvalidPubKeyHashLength() -> LightningDevKit.Bindings.ParseError
    public class func initWithInvalidScriptHashLength() -> LightningDevKit.Bindings.ParseError
    public class func initWithInvalidRecoveryId() -> LightningDevKit.Bindings.ParseError
    public class func initWithInvalidSliceLength(a: Swift.String) -> LightningDevKit.Bindings.ParseError
    public class func initWithSkip() -> LightningDevKit.Bindings.ParseError
    public class func eq(a: LightningDevKit.Bindings.ParseError, b: LightningDevKit.Bindings.ParseError) -> Swift.Bool
    public func toStr() -> Swift.String
    public func getValueAsBech32Error() -> LightningDevKit.Bindings.Bech32Error?
    public func getValueAsParseAmountError() -> LightningDevKit.Bindings.BindingsError?
    public func getValueAsMalformedSignature() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValueAsDescriptionDecodeError() -> LightningDevKit.Bindings.BindingsError?
    public func getValueAsInvalidSliceLength() -> Swift.String?
    @objc deinit
  }
}
public typealias AcceptChannel = LightningDevKit.Bindings.AcceptChannel
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AcceptChannel : LightningDevKit.NativeTypeWrapper {
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getDustLimitSatoshis() -> Swift.UInt64
    public func setDustLimitSatoshis(val: Swift.UInt64)
    public func getMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getChannelReserveSatoshis() -> Swift.UInt64
    public func setChannelReserveSatoshis(val: Swift.UInt64)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getMinimumDepth() -> Swift.UInt32
    public func setMinimumDepth(val: Swift.UInt32)
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentPoint() -> [Swift.UInt8]
    public func setPaymentPoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public func getFirstPerCommitmentPoint() -> [Swift.UInt8]
    public func setFirstPerCommitmentPoint(val: [Swift.UInt8])
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public class func eq(a: LightningDevKit.Bindings.AcceptChannel, b: LightningDevKit.Bindings.AcceptChannel) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelMonitorUpdateStatus = LightningDevKit.Bindings.ChannelMonitorUpdateStatus
extension LightningDevKit.Bindings {
  public enum ChannelMonitorUpdateStatus {
    case Completed
    case InProgress
    case PermanentFailure
    public static func == (a: LightningDevKit.Bindings.ChannelMonitorUpdateStatus, b: LightningDevKit.Bindings.ChannelMonitorUpdateStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_RecoverableSignatureNoneZ = LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RecoverableSignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_ShutdownDecodeErrorZ = LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Shutdown) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Shutdown?
    @objc deinit
  }
}
public typealias BaseSign = LightningDevKit.Bindings.BaseSign
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BaseSign : LightningDevKit.NativeTraitWrapper {
    public init(pubkeys: LightningDevKit.Bindings.ChannelPublicKeys)
    open func getPerCommitmentPoint(idx: Swift.UInt64) -> [Swift.UInt8]
    open func releaseCommitmentSecret(idx: Swift.UInt64) -> [Swift.UInt8]
    open func validateHolderCommitment(holderTx: LightningDevKit.Bindings.HolderCommitmentTransaction, preimages: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func channelKeysId() -> [Swift.UInt8]
    open func signCounterpartyCommitment(commitmentTx: LightningDevKit.Bindings.CommitmentTransaction, preimages: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    open func validateCounterpartyRevocation(idx: Swift.UInt64, secret: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func signHolderCommitmentAndHtlcs(commitmentTx: LightningDevKit.Bindings.HolderCommitmentTransaction) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    open func signJusticeRevokedOutput(justiceTx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, perCommitmentKey: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func signJusticeRevokedHtlc(justiceTx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, perCommitmentKey: [Swift.UInt8]?, htlc: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func signCounterpartyHtlcTransaction(htlcTx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, perCommitmentPoint: [Swift.UInt8], htlc: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func signClosingTransaction(closingTx: LightningDevKit.Bindings.ClosingTransaction) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func signHolderAnchorInput(anchorTx: [Swift.UInt8], input: Swift.UInt) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func signChannelAnnouncement(msg: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
    open func provideChannelParameters(channelParameters: LightningDevKit.Bindings.ChannelTransactionParameters)
    public func getPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    @objc deinit
  }
}
public typealias CommitmentSigned = LightningDevKit.Bindings.CommitmentSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentSigned : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getHtlcSignatures() -> [[Swift.UInt8]]
    public func setHtlcSignatures(val: [[Swift.UInt8]])
    public init(channelIdArg: [Swift.UInt8], signatureArg: [Swift.UInt8], htlcSignaturesArg: [[Swift.UInt8]])
    public class func eq(a: LightningDevKit.Bindings.CommitmentSigned, b: LightningDevKit.Bindings.CommitmentSigned) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Logger = LightningDevKit.Bindings.Logger
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Logger : LightningDevKit.NativeTraitWrapper {
    public init()
    open func log(record: LightningDevKit.Bindings.Record)
    @objc deinit
  }
}
public typealias RapidGossipSync = LightningDevKit.Bindings.RapidGossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RapidGossipSync : LightningDevKit.NativeTypeWrapper {
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph)
    public func updateNetworkGraph(updateData: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func isInitialSyncComplete() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Payer = LightningDevKit.Bindings.Payer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Payer : LightningDevKit.NativeTraitWrapper {
    public init()
    open func nodeId() -> [Swift.UInt8]
    open func firstHops() -> [LightningDevKit.Bindings.ChannelDetails]
    open func sendPayment(route: LightningDevKit.Bindings.Route, paymentHash: [Swift.UInt8], paymentSecret: [Swift.UInt8], paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    open func sendSpontaneousPayment(route: LightningDevKit.Bindings.Route, paymentPreimage: [Swift.UInt8], paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    open func retryPayment(route: LightningDevKit.Bindings.Route, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    open func abandonPayment(paymentId: [Swift.UInt8])
    open func inflightHtlcs() -> LightningDevKit.Bindings.InFlightHtlcs
    @objc deinit
  }
}
public typealias DefaultRouter = LightningDevKit.Bindings.DefaultRouter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DefaultRouter : LightningDevKit.NativeTypeWrapper {
    public init(networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger, randomSeedBytes: [Swift.UInt8], scorer: LightningDevKit.Bindings.LockableScore)
    public func asRouter() -> LightningDevKit.Bindings.Router
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_HTLCOutputInCommitmentDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCOutputInCommitmentDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCOutputInCommitment?
    @objc deinit
  }
}
public typealias BlindedPath = LightningDevKit.Bindings.BlindedPath
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedPath : LightningDevKit.NativeTypeWrapper {
    public class func new(nodePks: [[Swift.UInt8]], keysManager: LightningDevKit.Bindings.KeysInterface) -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Bech32Error = LightningDevKit.Bindings.Bech32Error
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bech32Error : LightningDevKit.NativeTypeWrapper {
    public enum Bech32ErrorType {
      case MissingSeparator
      case InvalidChecksum
      case InvalidLength
      case InvalidChar
      case InvalidData
      case InvalidPadding
      case MixedCase
      public static func == (a: LightningDevKit.Bindings.Bech32Error.Bech32ErrorType, b: LightningDevKit.Bindings.Bech32Error.Bech32ErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Bech32Error.Bech32ErrorType
    public func getValueAsInvalidChar() -> Swift.UInt32?
    public func getValueAsInvalidData() -> Swift.UInt8?
    @objc deinit
  }
}
public typealias Option_NoneZ = LightningDevKit.Bindings.Option_NoneZ
extension LightningDevKit.Bindings {
  public enum Option_NoneZ {
    case Some
    case None
    public static func == (a: LightningDevKit.Bindings.Option_NoneZ, b: LightningDevKit.Bindings.Option_NoneZ) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_ChannelConfigDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelConfigDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelConfig) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelConfig?
    @objc deinit
  }
}
public typealias NodeAnnouncement = LightningDevKit.Bindings.NodeAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAnnouncement : LightningDevKit.NativeTypeWrapper {
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public func getContents() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement
    public func setContents(val: LightningDevKit.Bindings.UnsignedNodeAnnouncement)
    public init(signatureArg: [Swift.UInt8], contentsArg: LightningDevKit.Bindings.UnsignedNodeAnnouncement)
    public class func eq(a: LightningDevKit.Bindings.NodeAnnouncement, b: LightningDevKit.Bindings.NodeAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TrustedCommitmentTransactionNoneZ = LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TrustedCommitmentTransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.TrustedCommitmentTransaction) -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TrustedCommitmentTransaction?
    @objc deinit
  }
}
public typealias BindingsInit = LightningDevKit.Bindings.BindingsInit
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BindingsInit : LightningDevKit.NativeTypeWrapper {
    public func getFeatures() -> LightningDevKit.Bindings.InitFeatures
    public func setFeatures(val: LightningDevKit.Bindings.InitFeatures)
    public func getRemoteNetworkAddress() -> LightningDevKit.Bindings.NetAddress?
    public func setRemoteNetworkAddress(val: LightningDevKit.Bindings.NetAddress?)
    public init(featuresArg: LightningDevKit.Bindings.InitFeatures, remoteNetworkAddressArg: LightningDevKit.Bindings.NetAddress?)
    public class func eq(a: LightningDevKit.Bindings.BindingsInit, b: LightningDevKit.Bindings.BindingsInit) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RoutingFeesDecodeErrorZ = LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RoutingFeesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.RoutingFees) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RoutingFees?
    @objc deinit
  }
}
public typealias Result_BlindedPathNoneZ = LightningDevKit.Bindings.Result_BlindedPathNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedPathNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_BlindedPathNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.BlindedPath?
    @objc deinit
  }
}
public typealias NetworkUpdate = LightningDevKit.Bindings.NetworkUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetworkUpdate : LightningDevKit.NativeTypeWrapper {
    public enum NetworkUpdateType {
      case ChannelUpdateMessage
      case ChannelFailure
      case NodeFailure
      public static func == (a: LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType, b: LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType
    public class func initWithChannelUpdateMessage(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.NetworkUpdate
    public class func initWithChannelFailure(shortChannelId: Swift.UInt64, isPermanent: Swift.Bool) -> LightningDevKit.Bindings.NetworkUpdate
    public class func initWithNodeFailure(nodeId: [Swift.UInt8], isPermanent: Swift.Bool) -> LightningDevKit.Bindings.NetworkUpdate
    public class func eq(a: LightningDevKit.Bindings.NetworkUpdate, b: LightningDevKit.Bindings.NetworkUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public func getValueAsChannelUpdateMessage() -> LightningDevKit.Bindings.NetworkUpdate.ChannelUpdateMessage?
    public func getValueAsChannelFailure() -> LightningDevKit.Bindings.NetworkUpdate.ChannelFailure?
    public func getValueAsNodeFailure() -> LightningDevKit.Bindings.NetworkUpdate.NodeFailure?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ChannelUpdateMessage : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelFailure : LightningDevKit.NativeTypeWrapper {
      public func getShortChannelId() -> Swift.UInt64
      public func isPermanent() -> Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class NodeFailure : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func isPermanent() -> Swift.Bool
      @objc deinit
    }
  }
}
public typealias Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ = LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)]) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.IOError?
    public func getValue() -> [([Swift.UInt8], LightningDevKit.Bindings.ChannelMonitor)]?
    @objc deinit
  }
}
public typealias PeerHandleError = LightningDevKit.Bindings.PeerHandleError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeerHandleError : LightningDevKit.NativeTypeWrapper {
    public func getNoConnectionPossible() -> Swift.Bool
    public func setNoConnectionPossible(val: Swift.Bool)
    public init(noConnectionPossibleArg: Swift.Bool)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_u8ZPeerHandleErrorZ = LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_u8ZPeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Watch = LightningDevKit.Bindings.Watch
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Watch : LightningDevKit.NativeTraitWrapper {
    public init()
    open func watchChannel(fundingTxo: LightningDevKit.Bindings.OutPoint, monitor: LightningDevKit.Bindings.ChannelMonitor) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    open func updateChannel(fundingTxo: LightningDevKit.Bindings.OutPoint, update: LightningDevKit.Bindings.ChannelMonitorUpdate) -> LightningDevKit.Bindings.ChannelMonitorUpdateStatus
    open func releasePendingMonitorEvents() -> [(LightningDevKit.Bindings.OutPoint, [LightningDevKit.Bindings.MonitorEvent], [Swift.UInt8])]
    @objc deinit
  }
}
public typealias InFlightHtlcs = LightningDevKit.Bindings.InFlightHtlcs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InFlightHtlcs : LightningDevKit.NativeTypeWrapper {
    public init()
    public func usedLiquidityMsat(source: LightningDevKit.Bindings.NodeId, target: LightningDevKit.Bindings.NodeId, channelScid: Swift.UInt64) -> Swift.UInt64?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CounterpartyCommitmentSecrets = LightningDevKit.Bindings.CounterpartyCommitmentSecrets
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyCommitmentSecrets : LightningDevKit.NativeTypeWrapper {
    public init()
    public func getMinSeenSecret() -> Swift.UInt64
    public func provideSecret(idx: Swift.UInt64, secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func getSecret(idx: Swift.UInt64) -> [Swift.UInt8]?
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PhantomRouteHintsDecodeErrorZ = LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PhantomRouteHintsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.PhantomRouteHints) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PhantomRouteHints?
    @objc deinit
  }
}
public typealias Result_HolderCommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HolderCommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.HolderCommitmentTransaction) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HolderCommitmentTransaction?
    @objc deinit
  }
}
public typealias Result_BlindedPathDecodeErrorZ = LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BlindedPathDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BlindedPathDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BlindedPath?
    @objc deinit
  }
}
public typealias KeysInterface = LightningDevKit.Bindings.KeysInterface
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class KeysInterface : LightningDevKit.NativeTraitWrapper {
    public init()
    open func getNodeSecret(recipient: LightningDevKit.Bindings.Recipient) -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
    open func getNodeId(recipient: LightningDevKit.Bindings.Recipient) -> LightningDevKit.Bindings.Result_PublicKeyNoneZ
    open func ecdh(recipient: LightningDevKit.Bindings.Recipient, otherKey: [Swift.UInt8], tweak: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_SharedSecretNoneZ
    open func getDestinationScript() -> [Swift.UInt8]
    open func getShutdownScriptpubkey() -> LightningDevKit.Bindings.ShutdownScript
    open func generateChannelKeysId(inbound: Swift.Bool, channelValueSatoshis: Swift.UInt64, userChannelId: [Swift.UInt8]) -> [Swift.UInt8]
    open func deriveChannelSigner(channelValueSatoshis: Swift.UInt64, channelKeysId: [Swift.UInt8]) -> LightningDevKit.Bindings.Sign
    open func getSecureRandomBytes() -> [Swift.UInt8]
    open func readChanSigner(reader: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
    open func signInvoice(hrpBytes: [Swift.UInt8], invoiceData: [Swift.UInt8], receipient: LightningDevKit.Bindings.Recipient) -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    open func getInboundPaymentKeyMaterial() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias OnionMessageContents = LightningDevKit.Bindings.OnionMessageContents
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionMessageContents : LightningDevKit.NativeTypeWrapper {
    public enum OnionMessageContentsType {
      case Custom
      public static func == (a: LightningDevKit.Bindings.OnionMessageContents.OnionMessageContentsType, b: LightningDevKit.Bindings.OnionMessageContents.OnionMessageContentsType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.OnionMessageContents.OnionMessageContentsType
    public class func initWithCustom(a: LightningDevKit.Bindings.CustomOnionMessageContents) -> LightningDevKit.Bindings.OnionMessageContents
    public func getValueAsCustom() -> LightningDevKit.Bindings.CustomOnionMessageContents?
    @objc deinit
  }
}
public typealias Result_RouteLightningErrorZ = LightningDevKit.Bindings.Result_RouteLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Route) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public func getValue() -> LightningDevKit.Bindings.Route?
    @objc deinit
  }
}
public typealias IOError = LightningDevKit.Bindings.IOError
extension LightningDevKit.Bindings {
  public enum IOError {
    case NotFound
    case PermissionDenied
    case ConnectionRefused
    case ConnectionReset
    case ConnectionAborted
    case NotConnected
    case AddrInUse
    case AddrNotAvailable
    case BrokenPipe
    case AlreadyExists
    case WouldBlock
    case InvalidInput
    case InvalidData
    case TimedOut
    case WriteZero
    case Interrupted
    case Other
    case UnexpectedEof
    public static func == (a: LightningDevKit.Bindings.IOError, b: LightningDevKit.Bindings.IOError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_DelayedPaymentOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DelayedPaymentOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor?
    @objc deinit
  }
}
public typealias Result_SharedSecretNoneZ = LightningDevKit.Bindings.Result_SharedSecretNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SharedSecretNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SharedSecretNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_SharedSecretNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Sign = LightningDevKit.Bindings.Sign
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Sign : LightningDevKit.NativeTraitWrapper {
    public init(BaseSign: LightningDevKit.Bindings.BaseSign)
    open func write() -> [Swift.UInt8]
    public func getBaseSign() -> LightningDevKit.Bindings.BaseSign
    @objc deinit
  }
}
public typealias RawDataPart = LightningDevKit.Bindings.RawDataPart
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RawDataPart : LightningDevKit.NativeTypeWrapper {
    public func getTimestamp() -> LightningDevKit.Bindings.PositiveTimestamp
    public func setTimestamp(val: LightningDevKit.Bindings.PositiveTimestamp)
    public class func eq(a: LightningDevKit.Bindings.RawDataPart, b: LightningDevKit.Bindings.RawDataPart) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_BuiltCommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BuiltCommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.BuiltCommitmentTransaction) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BuiltCommitmentTransaction?
    @objc deinit
  }
}
public typealias Result_CVec_CVec_u8ZZNoneZ = LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_CVec_u8ZZNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [[Swift.UInt8]]?
    @objc deinit
  }
}
public typealias PeerManager = LightningDevKit.Bindings.PeerManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeerManager : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `messageHandler`.")
    public init(messageHandler: LightningDevKit.Bindings.MessageHandler, ourNodeSecret: [Swift.UInt8], currentTime: Swift.UInt32, ephemeralRandomData: [Swift.UInt8], logger: LightningDevKit.Bindings.Logger, customMessageHandler: LightningDevKit.Bindings.CustomMessageHandler)
    public func getPeerNodeIds() -> [[Swift.UInt8]]
    public func newOutboundConnection(theirNodeId: [Swift.UInt8], descriptor: LightningDevKit.Bindings.SocketDescriptor, remoteNetworkAddress: LightningDevKit.Bindings.NetAddress?) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public func newInboundConnection(descriptor: LightningDevKit.Bindings.SocketDescriptor, remoteNetworkAddress: LightningDevKit.Bindings.NetAddress?) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func writeBufferSpaceAvail(descriptor: LightningDevKit.Bindings.SocketDescriptor) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func readEvent(peerDescriptor: LightningDevKit.Bindings.SocketDescriptor, data: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public func processEvents()
    public func socketDisconnected(descriptor: LightningDevKit.Bindings.SocketDescriptor)
    public func disconnectByNodeId(nodeId: [Swift.UInt8], noConnectionPossible: Swift.Bool)
    public func disconnectAllPeers()
    public func timerTickOccurred()
    public func broadcastNodeAnnouncement(rgb: [Swift.UInt8], alias: [Swift.UInt8], addresses: [LightningDevKit.Bindings.NetAddress])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ProbabilisticScoringParameters = LightningDevKit.Bindings.ProbabilisticScoringParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScoringParameters : LightningDevKit.NativeTypeWrapper {
    public func getBasePenaltyMsat() -> Swift.UInt64
    public func setBasePenaltyMsat(val: Swift.UInt64)
    public func getBasePenaltyAmountMultiplierMsat() -> Swift.UInt64
    public func setBasePenaltyAmountMultiplierMsat(val: Swift.UInt64)
    public func getLiquidityPenaltyMultiplierMsat() -> Swift.UInt64
    public func setLiquidityPenaltyMultiplierMsat(val: Swift.UInt64)
    public func getLiquidityOffsetHalfLife() -> Swift.UInt64
    public func setLiquidityOffsetHalfLife(val: Swift.UInt64)
    public func getLiquidityPenaltyAmountMultiplierMsat() -> Swift.UInt64
    public func setLiquidityPenaltyAmountMultiplierMsat(val: Swift.UInt64)
    public func getHistoricalLiquidityPenaltyMultiplierMsat() -> Swift.UInt64
    public func setHistoricalLiquidityPenaltyMultiplierMsat(val: Swift.UInt64)
    public func getHistoricalLiquidityPenaltyAmountMultiplierMsat() -> Swift.UInt64
    public func setHistoricalLiquidityPenaltyAmountMultiplierMsat(val: Swift.UInt64)
    public func getHistoricalNoUpdatesHalfLife() -> Swift.UInt64
    public func setHistoricalNoUpdatesHalfLife(val: Swift.UInt64)
    public func getAntiProbingPenaltyMsat() -> Swift.UInt64
    public func setAntiProbingPenaltyMsat(val: Swift.UInt64)
    public func getConsideredImpossiblePenaltyMsat() -> Swift.UInt64
    public func setConsideredImpossiblePenaltyMsat(val: Swift.UInt64)
    public func addBannedFromList(nodeIds: [LightningDevKit.Bindings.NodeId])
    public class func initWithDefault() -> LightningDevKit.Bindings.ProbabilisticScoringParameters
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelManagerReadArgs = LightningDevKit.Bindings.ChannelManagerReadArgs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelManagerReadArgs : LightningDevKit.NativeTypeWrapper {
    public func getKeysManager() -> LightningDevKit.Bindings.KeysInterface?
    public func setKeysManager(val: LightningDevKit.Bindings.KeysInterface)
    public func getFeeEstimator() -> LightningDevKit.Bindings.FeeEstimator?
    public func setFeeEstimator(val: LightningDevKit.Bindings.FeeEstimator)
    public func getChainMonitor() -> LightningDevKit.Bindings.Watch?
    public func setChainMonitor(val: LightningDevKit.Bindings.Watch)
    public func getTxBroadcaster() -> LightningDevKit.Bindings.BroadcasterInterface?
    public func setTxBroadcaster(val: LightningDevKit.Bindings.BroadcasterInterface)
    public func getLogger() -> LightningDevKit.Bindings.Logger?
    public func setLogger(val: LightningDevKit.Bindings.Logger)
    public func getDefaultConfig() -> LightningDevKit.Bindings.UserConfig
    public func setDefaultConfig(val: LightningDevKit.Bindings.UserConfig)
    public init(keysManager: LightningDevKit.Bindings.KeysInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, chainMonitor: LightningDevKit.Bindings.Watch, txBroadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, defaultConfig: LightningDevKit.Bindings.UserConfig, channelMonitors: [LightningDevKit.Bindings.ChannelMonitor])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ExpandedKey = LightningDevKit.Bindings.ExpandedKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ExpandedKey : LightningDevKit.NativeTypeWrapper {
    public init(keyMaterial: [Swift.UInt8])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RouteHopDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.RouteHop) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHop?
    @objc deinit
  }
}
public typealias Result_NodeInfoDecodeErrorZ = LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NodeInfo) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeInfo?
    @objc deinit
  }
}
public typealias AccessError = LightningDevKit.Bindings.AccessError
extension LightningDevKit.Bindings {
  public enum AccessError {
    case UnknownChain
    case UnknownTx
    public static func == (a: LightningDevKit.Bindings.AccessError, b: LightningDevKit.Bindings.AccessError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias AnnouncementSignatures = LightningDevKit.Bindings.AnnouncementSignatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AnnouncementSignatures : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getNodeSignature() -> [Swift.UInt8]
    public func setNodeSignature(val: [Swift.UInt8])
    public func getBitcoinSignature() -> [Swift.UInt8]
    public func setBitcoinSignature(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, nodeSignatureArg: [Swift.UInt8], bitcoinSignatureArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.AnnouncementSignatures, b: LightningDevKit.Bindings.AnnouncementSignatures) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias KeysManager = LightningDevKit.Bindings.KeysManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class KeysManager : LightningDevKit.NativeTypeWrapper {
    public init(seed: [Swift.UInt8], startingTimeSecs: Swift.UInt64, startingTimeNanos: Swift.UInt32)
    public func deriveChannelKeys(channelValueSatoshis: Swift.UInt64, params: [Swift.UInt8]) -> LightningDevKit.Bindings.InMemorySigner
    public func spendSpendableOutputs(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], changeDestinationScript: [Swift.UInt8], feerateSatPer_1000Weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func asKeysInterface() -> LightningDevKit.Bindings.KeysInterface
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_NodeIdDecodeErrorZ = LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeIdDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeId?
    @objc deinit
  }
}
public typealias Listen = LightningDevKit.Bindings.Listen
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Listen : LightningDevKit.NativeTraitWrapper {
    public init()
    open func filteredBlockConnected(header: [Swift.UInt8]?, txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32)
    open func blockConnected(block: [Swift.UInt8], height: Swift.UInt32)
    open func blockDisconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
    @objc deinit
  }
}
public typealias Level = LightningDevKit.Bindings.Level
extension LightningDevKit.Bindings {
  public enum Level {
    case Gossip
    case Trace
    case Debug
    case Info
    case Warn
    case Error
    public static func == (a: LightningDevKit.Bindings.Level, b: LightningDevKit.Bindings.Level) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias UnsignedChannelUpdate = LightningDevKit.Bindings.UnsignedChannelUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedChannelUpdate : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getTimestamp() -> Swift.UInt32
    public func setTimestamp(val: Swift.UInt32)
    public func getFlags() -> Swift.UInt8
    public func setFlags(val: Swift.UInt8)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getHtlcMaximumMsat() -> Swift.UInt64
    public func setHtlcMaximumMsat(val: Swift.UInt64)
    public func getFeeBaseMsat() -> Swift.UInt32
    public func setFeeBaseMsat(val: Swift.UInt32)
    public func getFeeProportionalMillionths() -> Swift.UInt32
    public func setFeeProportionalMillionths(val: Swift.UInt32)
    public func getExcessData() -> [Swift.UInt8]
    public func setExcessData(val: [Swift.UInt8])
    public init(chainHashArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, timestampArg: Swift.UInt32, flagsArg: Swift.UInt8, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64, htlcMaximumMsatArg: Swift.UInt64, feeBaseMsatArg: Swift.UInt32, feeProportionalMillionthsArg: Swift.UInt32, excessDataArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.UnsignedChannelUpdate, b: LightningDevKit.Bindings.UnsignedChannelUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Score = LightningDevKit.Bindings.Score
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Score : LightningDevKit.NativeTraitWrapper {
    public init()
    open func channelPenaltyMsat(shortChannelId: Swift.UInt64, source: LightningDevKit.Bindings.NodeId, target: LightningDevKit.Bindings.NodeId, usage: LightningDevKit.Bindings.ChannelUsage) -> Swift.UInt64
    open func paymentPathFailed(path: [LightningDevKit.Bindings.RouteHop], shortChannelId: Swift.UInt64)
    open func paymentPathSuccessful(path: [LightningDevKit.Bindings.RouteHop])
    open func probeFailed(path: [LightningDevKit.Bindings.RouteHop], shortChannelId: Swift.UInt64)
    open func probeSuccessful(path: [LightningDevKit.Bindings.RouteHop])
    open func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias MessageHandler = LightningDevKit.Bindings.MessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MessageHandler : LightningDevKit.NativeTypeWrapper {
    public func getChanHandler() -> LightningDevKit.Bindings.ChannelMessageHandler?
    public func setChanHandler(val: LightningDevKit.Bindings.ChannelMessageHandler)
    public func getRouteHandler() -> LightningDevKit.Bindings.RoutingMessageHandler?
    public func setRouteHandler(val: LightningDevKit.Bindings.RoutingMessageHandler)
    public func getOnionMessageHandler() -> LightningDevKit.Bindings.OnionMessageHandler?
    public func setOnionMessageHandler(val: LightningDevKit.Bindings.OnionMessageHandler)
    public init(chanHandlerArg: LightningDevKit.Bindings.ChannelMessageHandler, routeHandlerArg: LightningDevKit.Bindings.RoutingMessageHandler, onionMessageHandlerArg: LightningDevKit.Bindings.OnionMessageHandler)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ReplyShortChannelIdsEnd = LightningDevKit.Bindings.ReplyShortChannelIdsEnd
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReplyShortChannelIdsEnd : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getFullInformation() -> Swift.Bool
    public func setFullInformation(val: Swift.Bool)
    public init(chainHashArg: [Swift.UInt8], fullInformationArg: Swift.Bool)
    public class func eq(a: LightningDevKit.Bindings.ReplyShortChannelIdsEnd, b: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PrivateRoute = LightningDevKit.Bindings.PrivateRoute
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PrivateRoute : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PrivateRoute, b: LightningDevKit.Bindings.PrivateRoute) -> Swift.Bool
    public class func new(hops: LightningDevKit.Bindings.RouteHint) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public func intoInner() -> LightningDevKit.Bindings.RouteHint
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DirectedChannelTransactionParameters = LightningDevKit.Bindings.DirectedChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DirectedChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public func broadcasterPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func countersignatoryPubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func contestDelay() -> Swift.UInt16
    public func isOutbound() -> Swift.Bool
    public func fundingOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func optAnchors() -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_NetworkGraphDecodeErrorZ = LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NetworkGraphDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.NetworkGraph) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetworkGraph?
    @objc deinit
  }
}
public typealias Result_InMemorySignerDecodeErrorZ = LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InMemorySignerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.InMemorySigner) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InMemorySigner?
    @objc deinit
  }
}
public typealias ErroringMessageHandler = LightningDevKit.Bindings.ErroringMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErroringMessageHandler : LightningDevKit.NativeTypeWrapper {
    public init()
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func asChannelMessageHandler() -> LightningDevKit.Bindings.ChannelMessageHandler
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelAnnouncement = LightningDevKit.Bindings.ChannelAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
    public func getNodeSignature_1() -> [Swift.UInt8]
    public func setNodeSignature_1(val: [Swift.UInt8])
    public func getNodeSignature_2() -> [Swift.UInt8]
    public func setNodeSignature_2(val: [Swift.UInt8])
    public func getBitcoinSignature_1() -> [Swift.UInt8]
    public func setBitcoinSignature_1(val: [Swift.UInt8])
    public func getBitcoinSignature_2() -> [Swift.UInt8]
    public func setBitcoinSignature_2(val: [Swift.UInt8])
    public func getContents() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement
    public func setContents(val: LightningDevKit.Bindings.UnsignedChannelAnnouncement)
    public init(nodeSignature_1Arg: [Swift.UInt8], nodeSignature_2Arg: [Swift.UInt8], bitcoinSignature_1Arg: [Swift.UInt8], bitcoinSignature_2Arg: [Swift.UInt8], contentsArg: LightningDevKit.Bindings.UnsignedChannelAnnouncement)
    public class func eq(a: LightningDevKit.Bindings.ChannelAnnouncement, b: LightningDevKit.Bindings.ChannelAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PaymentParameters = LightningDevKit.Bindings.PaymentParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentParameters : LightningDevKit.NativeTypeWrapper {
    public func getPayeePubkey() -> [Swift.UInt8]
    public func setPayeePubkey(val: [Swift.UInt8])
    public func getFeatures() -> LightningDevKit.Bindings.InvoiceFeatures?
    public func setFeatures(val: LightningDevKit.Bindings.InvoiceFeatures)
    public func getRouteHints() -> [LightningDevKit.Bindings.RouteHint]
    public func setRouteHints(val: [LightningDevKit.Bindings.RouteHint])
    public func getExpiryTime() -> Swift.UInt64?
    public func setExpiryTime(val: Swift.UInt64?)
    public func getMaxTotalCltvExpiryDelta() -> Swift.UInt32
    public func setMaxTotalCltvExpiryDelta(val: Swift.UInt32)
    public func getMaxPathCount() -> Swift.UInt8
    public func setMaxPathCount(val: Swift.UInt8)
    public func getMaxChannelSaturationPowerOfHalf() -> Swift.UInt8
    public func setMaxChannelSaturationPowerOfHalf(val: Swift.UInt8)
    public func getPreviouslyFailedChannels() -> [Swift.UInt64]
    public func setPreviouslyFailedChannels(val: [Swift.UInt64])
    public init(payeePubkeyArg: [Swift.UInt8], featuresArg: LightningDevKit.Bindings.InvoiceFeatures, routeHintsArg: [LightningDevKit.Bindings.RouteHint], expiryTimeArg: Swift.UInt64?, maxTotalCltvExpiryDeltaArg: Swift.UInt32, maxPathCountArg: Swift.UInt8, maxChannelSaturationPowerOfHalfArg: Swift.UInt8, previouslyFailedChannelsArg: [Swift.UInt64])
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PaymentParameters, b: LightningDevKit.Bindings.PaymentParameters) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public class func initWithNodeId(payeePubkey: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentParameters
    public class func initForKeysend(payeePubkey: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentParameters
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelReady = LightningDevKit.Bindings.ChannelReady
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelReady : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getNextPerCommitmentPoint() -> [Swift.UInt8]
    public func setNextPerCommitmentPoint(val: [Swift.UInt8])
    public func getShortChannelIdAlias() -> Swift.UInt64?
    public func setShortChannelIdAlias(val: Swift.UInt64?)
    public init(channelIdArg: [Swift.UInt8], nextPerCommitmentPointArg: [Swift.UInt8], shortChannelIdAliasArg: Swift.UInt64?)
    public class func eq(a: LightningDevKit.Bindings.ChannelReady, b: LightningDevKit.Bindings.ChannelReady) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CounterpartyForwardingInfoDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyForwardingInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.CounterpartyForwardingInfo) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyForwardingInfo?
    @objc deinit
  }
}
public typealias PaymentSendFailure = LightningDevKit.Bindings.PaymentSendFailure
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentSendFailure : LightningDevKit.NativeTypeWrapper {
    public enum PaymentSendFailureType {
      case ParameterError
      case PathParameterError
      case AllFailedResendSafe
      case DuplicatePayment
      case PartialFailure
      public static func == (a: LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType, b: LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType
    public class func initWithParameterError(a: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithPathParameterError(a: [LightningDevKit.Bindings.Result_NoneAPIErrorZ]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithAllFailedResendSafe(a: [LightningDevKit.Bindings.APIError]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithDuplicatePayment() -> LightningDevKit.Bindings.PaymentSendFailure
    public class func initWithPartialFailure(results: [LightningDevKit.Bindings.Result_NoneAPIErrorZ], failedPathsRetry: LightningDevKit.Bindings.RouteParameters, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentSendFailure
    public func getValueAsParameterError() -> LightningDevKit.Bindings.APIError?
    public func getValueAsPathParameterError() -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]?
    public func getValueAsAllFailedResendSafe() -> [LightningDevKit.Bindings.APIError]?
    public func getValueAsPartialFailure() -> LightningDevKit.Bindings.PaymentSendFailure.PartialFailure?
    @objc deinit
    @_hasMissingDesignatedInitializers public class PartialFailure : LightningDevKit.NativeTypeWrapper {
      public func getResults() -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]
      public func getFailedPathsRetry() -> LightningDevKit.Bindings.RouteParameters
      public func getPaymentId() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias Result_DescriptionCreationErrorZ = LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DescriptionCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Description) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.CreationError) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.CreationError?
    public func getValue() -> LightningDevKit.Bindings.Description?
    @objc deinit
  }
}
public typealias ChannelManager = LightningDevKit.Bindings.ChannelManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelManager : LightningDevKit.NativeTypeWrapper {
    public init(feeEst: LightningDevKit.Bindings.FeeEstimator, chainMonitor: LightningDevKit.Bindings.Watch, txBroadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, keysManager: LightningDevKit.Bindings.KeysInterface, config: LightningDevKit.Bindings.UserConfig, params: LightningDevKit.Bindings.ChainParameters)
    public func getCurrentDefaultConfiguration() -> LightningDevKit.Bindings.UserConfig
    public func createChannel(theirNetworkKey: [Swift.UInt8], channelValueSatoshis: Swift.UInt64, pushMsat: Swift.UInt64, userChannelId: [Swift.UInt8], overrideConfig: LightningDevKit.Bindings.UserConfig) -> LightningDevKit.Bindings.Result__u832APIErrorZ
    public func listChannels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func listUsableChannels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func closeChannel(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func closeChannelWithTargetFeerate(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], targetFeerateSatsPer_1000Weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forceCloseBroadcastingLatestTxn(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forceCloseWithoutBroadcastingTxn(channelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forceCloseAllChannelsBroadcastingLatestTxn()
    public func forceCloseAllChannelsWithoutBroadcastingTxn()
    public func sendPayment(route: LightningDevKit.Bindings.Route, paymentHash: [Swift.UInt8], paymentSecret: [Swift.UInt8], paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public func retryPayment(route: LightningDevKit.Bindings.Route, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public func abandonPayment(paymentId: [Swift.UInt8])
    public func sendSpontaneousPayment(route: LightningDevKit.Bindings.Route, paymentPreimage: [Swift.UInt8], paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentHashPaymentSendFailureZ
    public func sendProbe(hops: [LightningDevKit.Bindings.RouteHop]) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    public func fundingTransactionGenerated(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], fundingTransaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func updateChannelConfig(counterpartyNodeId: [Swift.UInt8], channelIds: [[Swift.UInt8]], config: LightningDevKit.Bindings.ChannelConfig) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func forwardInterceptedHtlc(interceptId: [Swift.UInt8], nextHopChannelId: [Swift.UInt8], NextNodeId: [Swift.UInt8], amtToForwardMsat: Swift.UInt64) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func failInterceptedHtlc(interceptId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func processPendingHtlcForwards()
    public func timerTickOccurred()
    public func failHtlcBackwards(paymentHash: [Swift.UInt8])
    public func claimFunds(paymentPreimage: [Swift.UInt8])
    public func getOurNodeId() -> [Swift.UInt8]
    public func acceptInboundChannel(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], userChannelId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func acceptInboundChannelFromTrustedPeer_0conf(temporaryChannelId: [Swift.UInt8], counterpartyNodeId: [Swift.UInt8], userChannelId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func createInboundPayment(minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
    public func createInboundPaymentLegacy(minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
    public func createInboundPaymentForHash(paymentHash: [Swift.UInt8], minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
    public func createInboundPaymentForHashLegacy(paymentHash: [Swift.UInt8], minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
    public func getPaymentPreimage(paymentHash: [Swift.UInt8], paymentSecret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
    public func getPhantomScid() -> Swift.UInt64
    public func getPhantomRouteHints() -> LightningDevKit.Bindings.PhantomRouteHints
    public func getInterceptScid() -> Swift.UInt64
    public func computeInflightHtlcs() -> LightningDevKit.Bindings.InFlightHtlcs
    public func asMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    public func asEventsProvider() -> LightningDevKit.Bindings.EventsProvider
    public func asListen() -> LightningDevKit.Bindings.Listen
    public func asConfirm() -> LightningDevKit.Bindings.Confirm
    public func awaitPersistableUpdateTimeout(maxWait: Swift.UInt64) -> Swift.Bool
    public func awaitPersistableUpdate()
    public func getPersistableUpdateFuture() -> LightningDevKit.Bindings.Future
    public func currentBestBlock() -> LightningDevKit.Bindings.BestBlock
    public func asChannelMessageHandler() -> LightningDevKit.Bindings.ChannelMessageHandler
    public func write() -> [Swift.UInt8]
    public func asPayer() -> LightningDevKit.Bindings.Payer
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_UpdateFeeDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFeeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFee) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFee?
    @objc deinit
  }
}
public typealias Result_ChannelDetailsDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelDetailsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelDetails) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelDetails?
    @objc deinit
  }
}
public typealias Result_NodeAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAnnouncement?
    @objc deinit
  }
}
public typealias Result_OnionMessageDecodeErrorZ = LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OnionMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.OnionMessage) -> LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OnionMessage?
    @objc deinit
  }
}
public typealias CommitmentUpdate = LightningDevKit.Bindings.CommitmentUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentUpdate : LightningDevKit.NativeTypeWrapper {
    public func getUpdateAddHtlcs() -> [LightningDevKit.Bindings.UpdateAddHTLC]
    public func setUpdateAddHtlcs(val: [LightningDevKit.Bindings.UpdateAddHTLC])
    public func getUpdateFulfillHtlcs() -> [LightningDevKit.Bindings.UpdateFulfillHTLC]
    public func setUpdateFulfillHtlcs(val: [LightningDevKit.Bindings.UpdateFulfillHTLC])
    public func getUpdateFailHtlcs() -> [LightningDevKit.Bindings.UpdateFailHTLC]
    public func setUpdateFailHtlcs(val: [LightningDevKit.Bindings.UpdateFailHTLC])
    public func getUpdateFailMalformedHtlcs() -> [LightningDevKit.Bindings.UpdateFailMalformedHTLC]
    public func setUpdateFailMalformedHtlcs(val: [LightningDevKit.Bindings.UpdateFailMalformedHTLC])
    public func getUpdateFee() -> LightningDevKit.Bindings.UpdateFee?
    public func setUpdateFee(val: LightningDevKit.Bindings.UpdateFee)
    public func getCommitmentSigned() -> LightningDevKit.Bindings.CommitmentSigned
    public func setCommitmentSigned(val: LightningDevKit.Bindings.CommitmentSigned)
    public init(updateAddHtlcsArg: [LightningDevKit.Bindings.UpdateAddHTLC], updateFulfillHtlcsArg: [LightningDevKit.Bindings.UpdateFulfillHTLC], updateFailHtlcsArg: [LightningDevKit.Bindings.UpdateFailHTLC], updateFailMalformedHtlcsArg: [LightningDevKit.Bindings.UpdateFailMalformedHTLC], updateFeeArg: LightningDevKit.Bindings.UpdateFee, commitmentSignedArg: LightningDevKit.Bindings.CommitmentSigned)
    public class func eq(a: LightningDevKit.Bindings.CommitmentUpdate, b: LightningDevKit.Bindings.CommitmentUpdate) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ = LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], [Swift.UInt8])) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> ([Swift.UInt8], [Swift.UInt8])?
    @objc deinit
  }
}
public typealias WarningMessage = LightningDevKit.Bindings.WarningMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WarningMessage : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getData() -> Swift.String
    public func setData(val: Swift.String)
    public init(channelIdArg: [Swift.UInt8], dataArg: Swift.String)
    public class func eq(a: LightningDevKit.Bindings.WarningMessage, b: LightningDevKit.Bindings.WarningMessage) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias BuiltCommitmentTransaction = LightningDevKit.Bindings.BuiltCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BuiltCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public func getTransaction() -> [Swift.UInt8]
    public func setTransaction(val: [Swift.UInt8])
    public func getTxid() -> [Swift.UInt8]?
    public func setTxid(val: [Swift.UInt8])
    public init(transactionArg: [Swift.UInt8], txidArg: [Swift.UInt8])
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public func getSighashAll(fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func sign(fundingKey: [Swift.UInt8], fundingRedeemscript: [Swift.UInt8], channelValueSatoshis: Swift.UInt64) -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_NoneLightningErrorZ = LightningDevKit.Bindings.Result_NoneLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    @objc deinit
  }
}
public typealias FundingCreated = LightningDevKit.Bindings.FundingCreated
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FundingCreated : LightningDevKit.NativeTypeWrapper {
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getFundingTxid() -> [Swift.UInt8]?
    public func setFundingTxid(val: [Swift.UInt8])
    public func getFundingOutputIndex() -> Swift.UInt16
    public func setFundingOutputIndex(val: Swift.UInt16)
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public init(temporaryChannelIdArg: [Swift.UInt8], fundingTxidArg: [Swift.UInt8], fundingOutputIndexArg: Swift.UInt16, signatureArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.FundingCreated, b: LightningDevKit.Bindings.FundingCreated) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Pong = LightningDevKit.Bindings.Pong
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Pong : LightningDevKit.NativeTypeWrapper {
    public func getByteslen() -> Swift.UInt16
    public func setByteslen(val: Swift.UInt16)
    public init(byteslenArg: Swift.UInt16)
    public class func eq(a: LightningDevKit.Bindings.Pong, b: LightningDevKit.Bindings.Pong) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OpenChannel = LightningDevKit.Bindings.OpenChannel
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OpenChannel : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getTemporaryChannelId() -> [Swift.UInt8]?
    public func setTemporaryChannelId(val: [Swift.UInt8])
    public func getFundingSatoshis() -> Swift.UInt64
    public func setFundingSatoshis(val: Swift.UInt64)
    public func getPushMsat() -> Swift.UInt64
    public func setPushMsat(val: Swift.UInt64)
    public func getDustLimitSatoshis() -> Swift.UInt64
    public func setDustLimitSatoshis(val: Swift.UInt64)
    public func getMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getChannelReserveSatoshis() -> Swift.UInt64
    public func setChannelReserveSatoshis(val: Swift.UInt64)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getFeeratePerKw() -> Swift.UInt32
    public func setFeeratePerKw(val: Swift.UInt32)
    public func getToSelfDelay() -> Swift.UInt16
    public func setToSelfDelay(val: Swift.UInt16)
    public func getMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getFundingPubkey() -> [Swift.UInt8]
    public func setFundingPubkey(val: [Swift.UInt8])
    public func getRevocationBasepoint() -> [Swift.UInt8]
    public func setRevocationBasepoint(val: [Swift.UInt8])
    public func getPaymentPoint() -> [Swift.UInt8]
    public func setPaymentPoint(val: [Swift.UInt8])
    public func getDelayedPaymentBasepoint() -> [Swift.UInt8]
    public func setDelayedPaymentBasepoint(val: [Swift.UInt8])
    public func getHtlcBasepoint() -> [Swift.UInt8]
    public func setHtlcBasepoint(val: [Swift.UInt8])
    public func getFirstPerCommitmentPoint() -> [Swift.UInt8]
    public func setFirstPerCommitmentPoint(val: [Swift.UInt8])
    public func getChannelFlags() -> Swift.UInt8
    public func setChannelFlags(val: Swift.UInt8)
    public func getChannelType() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public func setChannelType(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public class func eq(a: LightningDevKit.Bindings.OpenChannel, b: LightningDevKit.Bindings.OpenChannel) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelMessageHandler = LightningDevKit.Bindings.ChannelMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class ChannelMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init(MessageSendEventsProvider: LightningDevKit.Bindings.MessageSendEventsProvider)
    open func handleOpenChannel(theirNodeId: [Swift.UInt8], theirFeatures: LightningDevKit.Bindings.InitFeatures, msg: LightningDevKit.Bindings.OpenChannel)
    open func handleAcceptChannel(theirNodeId: [Swift.UInt8], theirFeatures: LightningDevKit.Bindings.InitFeatures, msg: LightningDevKit.Bindings.AcceptChannel)
    open func handleFundingCreated(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingCreated)
    open func handleFundingSigned(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingSigned)
    open func handleChannelReady(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReady)
    open func handleShutdown(theirNodeId: [Swift.UInt8], theirFeatures: LightningDevKit.Bindings.InitFeatures, msg: LightningDevKit.Bindings.Shutdown)
    open func handleClosingSigned(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ClosingSigned)
    open func handleUpdateAddHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateAddHTLC)
    open func handleUpdateFulfillHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFulfillHTLC)
    open func handleUpdateFailHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFailHTLC)
    open func handleUpdateFailMalformedHtlc(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFailMalformedHTLC)
    open func handleCommitmentSigned(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.CommitmentSigned)
    open func handleRevokeAndAck(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.RevokeAndACK)
    open func handleUpdateFee(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFee)
    open func handleAnnouncementSignatures(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AnnouncementSignatures)
    open func peerDisconnected(theirNodeId: [Swift.UInt8], noConnectionPossible: Swift.Bool)
    open func peerConnected(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.BindingsInit) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func handleChannelReestablish(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReestablish)
    open func handleChannelUpdate(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelUpdate)
    open func handleError(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ErrorMessage)
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    public func getMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    @objc deinit
  }
}
public typealias Description = LightningDevKit.Bindings.Description
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Description : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Description, b: LightningDevKit.Bindings.Description) -> Swift.Bool
    public class func new(description: Swift.String) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public func intoInner() -> Swift.String
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelHandshakeLimits = LightningDevKit.Bindings.ChannelHandshakeLimits
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelHandshakeLimits : LightningDevKit.NativeTypeWrapper {
    public func getMinFundingSatoshis() -> Swift.UInt64
    public func setMinFundingSatoshis(val: Swift.UInt64)
    public func getMaxFundingSatoshis() -> Swift.UInt64
    public func setMaxFundingSatoshis(val: Swift.UInt64)
    public func getMaxHtlcMinimumMsat() -> Swift.UInt64
    public func setMaxHtlcMinimumMsat(val: Swift.UInt64)
    public func getMinMaxHtlcValueInFlightMsat() -> Swift.UInt64
    public func setMinMaxHtlcValueInFlightMsat(val: Swift.UInt64)
    public func getMaxChannelReserveSatoshis() -> Swift.UInt64
    public func setMaxChannelReserveSatoshis(val: Swift.UInt64)
    public func getMinMaxAcceptedHtlcs() -> Swift.UInt16
    public func setMinMaxAcceptedHtlcs(val: Swift.UInt16)
    public func getMaxMinimumDepth() -> Swift.UInt32
    public func setMaxMinimumDepth(val: Swift.UInt32)
    public func getTrustOwnFunding_0conf() -> Swift.Bool
    public func setTrustOwnFunding_0conf(val: Swift.Bool)
    public func getForceAnnouncedChannelPreference() -> Swift.Bool
    public func setForceAnnouncedChannelPreference(val: Swift.Bool)
    public func getTheirToSelfDelay() -> Swift.UInt16
    public func setTheirToSelfDelay(val: Swift.UInt16)
    public init(minFundingSatoshisArg: Swift.UInt64, maxFundingSatoshisArg: Swift.UInt64, maxHtlcMinimumMsatArg: Swift.UInt64, minMaxHtlcValueInFlightMsatArg: Swift.UInt64, maxChannelReserveSatoshisArg: Swift.UInt64, minMaxAcceptedHtlcsArg: Swift.UInt16, maxMinimumDepthArg: Swift.UInt32, trustOwnFunding_0confArg: Swift.Bool, forceAnnouncedChannelPreferenceArg: Swift.Bool, theirToSelfDelayArg: Swift.UInt16)
    public class func initWithDefault() -> LightningDevKit.Bindings.ChannelHandshakeLimits
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias FundingSigned = LightningDevKit.Bindings.FundingSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FundingSigned : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getSignature() -> [Swift.UInt8]
    public func setSignature(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], signatureArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.FundingSigned, b: LightningDevKit.Bindings.FundingSigned) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MessageSendEventsProvider = LightningDevKit.Bindings.MessageSendEventsProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class MessageSendEventsProvider : LightningDevKit.NativeTraitWrapper {
    public init()
    open func getAndClearPendingMsgEvents() -> [LightningDevKit.Bindings.MessageSendEvent]
    @objc deinit
  }
}
public typealias RouteHop = LightningDevKit.Bindings.RouteHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHop : LightningDevKit.NativeTypeWrapper {
    public func getPubkey() -> [Swift.UInt8]
    public func setPubkey(val: [Swift.UInt8])
    public func getNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    public func setNodeFeatures(val: LightningDevKit.Bindings.NodeFeatures)
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getChannelFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func setChannelFeatures(val: LightningDevKit.Bindings.ChannelFeatures)
    public func getFeeMsat() -> Swift.UInt64
    public func setFeeMsat(val: Swift.UInt64)
    public func getCltvExpiryDelta() -> Swift.UInt32
    public func setCltvExpiryDelta(val: Swift.UInt32)
    public init(pubkeyArg: [Swift.UInt8], nodeFeaturesArg: LightningDevKit.Bindings.NodeFeatures, shortChannelIdArg: Swift.UInt64, channelFeaturesArg: LightningDevKit.Bindings.ChannelFeatures, feeMsatArg: Swift.UInt64, cltvExpiryDeltaArg: Swift.UInt32)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHop, b: LightningDevKit.Bindings.RouteHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias DecodeError = LightningDevKit.Bindings.DecodeError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DecodeError : LightningDevKit.NativeTypeWrapper {
    public enum DecodeErrorType {
      case UnknownVersion
      case UnknownRequiredFeature
      case InvalidValue
      case ShortRead
      case BadLengthDescriptor
      case Io
      case UnsupportedCompression
      public static func == (a: LightningDevKit.Bindings.DecodeError.DecodeErrorType, b: LightningDevKit.Bindings.DecodeError.DecodeErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.DecodeError.DecodeErrorType
    public class func initWithUnknownVersion() -> LightningDevKit.Bindings.DecodeError
    public class func initWithUnknownRequiredFeature() -> LightningDevKit.Bindings.DecodeError
    public class func initWithInvalidValue() -> LightningDevKit.Bindings.DecodeError
    public class func initWithShortRead() -> LightningDevKit.Bindings.DecodeError
    public class func initWithBadLengthDescriptor() -> LightningDevKit.Bindings.DecodeError
    public class func initWithIo(a: LightningDevKit.Bindings.IOError) -> LightningDevKit.Bindings.DecodeError
    public class func initWithUnsupportedCompression() -> LightningDevKit.Bindings.DecodeError
    public class func eq(a: LightningDevKit.Bindings.DecodeError, b: LightningDevKit.Bindings.DecodeError) -> Swift.Bool
    public func getValueAsIo() -> LightningDevKit.Bindings.IOError?
    @objc deinit
  }
}
public typealias HTLCUpdate = LightningDevKit.Bindings.HTLCUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCUpdate : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.HTLCUpdate, b: LightningDevKit.Bindings.HTLCUpdate) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_SecretKeyNoneZ = LightningDevKit.Bindings.Result_SecretKeyNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SecretKeyNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias UnsignedChannelAnnouncement = LightningDevKit.Bindings.UnsignedChannelAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
    public func getFeatures() -> LightningDevKit.Bindings.ChannelFeatures
    public func setFeatures(val: LightningDevKit.Bindings.ChannelFeatures)
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getNodeId_1() -> [Swift.UInt8]
    public func setNodeId_1(val: [Swift.UInt8])
    public func getNodeId_2() -> [Swift.UInt8]
    public func setNodeId_2(val: [Swift.UInt8])
    public func getBitcoinKey_1() -> [Swift.UInt8]
    public func setBitcoinKey_1(val: [Swift.UInt8])
    public func getBitcoinKey_2() -> [Swift.UInt8]
    public func setBitcoinKey_2(val: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.UnsignedChannelAnnouncement, b: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias PositiveTimestamp = LightningDevKit.Bindings.PositiveTimestamp
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PositiveTimestamp : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.PositiveTimestamp, b: LightningDevKit.Bindings.PositiveTimestamp) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public class func fromUnixTimestamp(unixSeconds: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func fromSystemTime(time: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func fromDurationSinceEpoch(duration: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public func asUnixTimestamp() -> Swift.UInt64
    public func asDurationSinceEpoch() -> Swift.UInt64
    public func asTime() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers open class NativeTypeWrapper : Swift.Hashable {
  public static func == (lhs: LightningDevKit.NativeTypeWrapper, rhs: LightningDevKit.NativeTypeWrapper) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NativeTraitWrapper : LightningDevKit.NativeTypeWrapper {
  public func activate() -> Self
  public func activateOnce() -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Bindings {
  public enum PrintSeverity : Swift.UInt {
    case DEBUG
    case WARNING
    case ERROR
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public class func setLogThreshold(severity: LightningDevKit.Bindings.PrintSeverity)
  public class func cacheInstance(instance: LightningDevKit.NativeTraitWrapper, countIdempotently: Swift.Bool = false)
  public class func instanceToPointer(instance: LightningDevKit.NativeTraitWrapper) -> Swift.UnsafeMutableRawPointer
  public class func pointerToInstance<T>(pointer: Swift.UnsafeRawPointer, sourceMarker: Swift.String?) -> T where T : LightningDevKit.NativeTraitWrapper
  public class func removeInstancePointer(instance: LightningDevKit.NativeTraitWrapper) -> Swift.Bool
  public class func UnsafeIntPointer_to_string(nativeType: Swift.UnsafePointer<Swift.Int8>) -> Swift.String
  public class func string_to_unsafe_int8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.Int8>
  public class func string_to_unsafe_uint8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.UInt8>
  public class func swiftLdkGetCompiledVersion() -> Swift.String
  public class func swiftLdkCBindingsGetCompiledVersion() -> Swift.String
  public class func swiftSign(msg: [Swift.UInt8], sk: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StringErrorZ
  public class func swiftRecoverPk(msg: [Swift.UInt8], sig: Swift.String) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
  public class func swiftVerify(msg: [Swift.UInt8], sig: Swift.String, pk: [Swift.UInt8]) -> Swift.Bool
  public class func swiftConstructInvoicePreimage(hrpBytes: [Swift.UInt8], dataWithoutSignature: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftProvidedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
  public class func swiftProvidedChannelFeatures() -> LightningDevKit.Bindings.ChannelFeatures
  public class func swiftProvidedInitFeatures() -> LightningDevKit.Bindings.InitFeatures
  public class func swiftCreate(keys: LightningDevKit.Bindings.ExpandedKey, minValueMsat: Swift.UInt64?, invoiceExpiryDeltaSecs: Swift.UInt32, keysManager: LightningDevKit.Bindings.KeysInterface, currentTime: Swift.UInt64) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
  public class func swiftCreateFromHash(keys: LightningDevKit.Bindings.ExpandedKey, minValueMsat: Swift.UInt64?, paymentHash: [Swift.UInt8], invoiceExpiryDeltaSecs: Swift.UInt32, currentTime: Swift.UInt64) -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
  public class func swiftHtlcSuccessTxWeight(optAnchors: Swift.Bool) -> Swift.UInt64
  public class func swiftHtlcTimeoutTxWeight(optAnchors: Swift.Bool) -> Swift.UInt64
  public class func swiftBuildCommitmentSecret(commitmentSeed: [Swift.UInt8], idx: Swift.UInt64) -> [Swift.UInt8]
  public class func swiftBuildClosingTransaction(toHolderValueSat: Swift.UInt64, toCounterpartyValueSat: Swift.UInt64, toHolderScript: [Swift.UInt8], toCounterpartyScript: [Swift.UInt8], fundingOutpoint: LightningDevKit.Bindings.OutPoint) -> [Swift.UInt8]
  public class func swiftDerivePrivateKey(perCommitmentPoint: [Swift.UInt8], baseSecret: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftDerivePublicKey(perCommitmentPoint: [Swift.UInt8], basePoint: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftDerivePrivateRevocationKey(perCommitmentSecret: [Swift.UInt8], countersignatoryRevocationBaseSecret: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftDerivePublicRevocationKey(perCommitmentPoint: [Swift.UInt8], countersignatoryRevocationBasePoint: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftGetRevokeableRedeemscript(revocationKey: [Swift.UInt8], contestDelay: Swift.UInt16, broadcasterDelayedPaymentKey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftGetHtlcRedeemscript(htlc: LightningDevKit.Bindings.HTLCOutputInCommitment, optAnchors: Swift.Bool, keys: LightningDevKit.Bindings.TxCreationKeys) -> [Swift.UInt8]
  public class func swiftMakeFundingRedeemscript(broadcaster: [Swift.UInt8], countersignatory: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftBuildHtlcTransaction(commitmentTxid: [Swift.UInt8], feeratePerKw: Swift.UInt32, contestDelay: Swift.UInt16, htlc: LightningDevKit.Bindings.HTLCOutputInCommitment, optAnchors: Swift.Bool, useNonZeroFeeAnchors: Swift.Bool, broadcasterDelayedPaymentKey: [Swift.UInt8], revocationKey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftBuildHtlcInputWitness(localSig: [Swift.UInt8], remoteSig: [Swift.UInt8], preimage: [Swift.UInt8], redeemScript: [Swift.UInt8], optAnchors: Swift.Bool) -> [Swift.UInt8]
  public class func swiftGetToCountersignatoryWithAnchorsRedeemscript(paymentPoint: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftGetAnchorRedeemscript(fundingPubkey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftBuildAnchorInputWitness(fundingKey: [Swift.UInt8], fundingSig: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swiftGetCommitmentTransactionNumberObscureFactor(broadcasterPaymentBasepoint: [Swift.UInt8], countersignatoryPaymentBasepoint: [Swift.UInt8], outboundFromBroadcaster: Swift.Bool) -> Swift.UInt64
  public class func swiftFindRoute(ourNodePubkey: [Swift.UInt8], routeParams: LightningDevKit.Bindings.RouteParameters, networkGraph: LightningDevKit.Bindings.NetworkGraph, firstHops: [LightningDevKit.Bindings.ChannelDetails]?, logger: LightningDevKit.Bindings.Logger, scorer: LightningDevKit.Bindings.Score, randomSeedBytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  public class func swiftBuildRouteFromHops(ourNodePubkey: [Swift.UInt8], hops: [[Swift.UInt8]], routeParams: LightningDevKit.Bindings.RouteParameters, networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger, randomSeedBytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  public class func swiftCreatePhantomInvoice(amtMsat: Swift.UInt64?, paymentHash: [Swift.UInt8], description: Swift.String, invoiceExpiryDeltaSecs: Swift.UInt32, phantomRouteHints: [LightningDevKit.Bindings.PhantomRouteHints], keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swiftCreatePhantomInvoiceWithDescriptionHash(amtMsat: Swift.UInt64?, paymentHash: [Swift.UInt8], invoiceExpiryDeltaSecs: Swift.UInt32, descriptionHash: LightningDevKit.Bindings.Sha256, phantomRouteHints: [LightningDevKit.Bindings.PhantomRouteHints], keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swiftCreateInvoiceFromChannelmanager(channelmanager: LightningDevKit.Bindings.ChannelManager, keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, description: Swift.String, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swiftCreateInvoiceFromChannelmanagerWithDescriptionHash(channelmanager: LightningDevKit.Bindings.ChannelManager, keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, descriptionHash: LightningDevKit.Bindings.Sha256, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swiftCreateInvoiceFromChannelmanagerWithDescriptionHashAndDurationSinceEpoch(channelmanager: LightningDevKit.Bindings.ChannelManager, keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, descriptionHash: LightningDevKit.Bindings.Sha256, durationSinceEpoch: Swift.UInt64, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swiftCreateInvoiceFromChannelmanagerAndDurationSinceEpoch(channelmanager: LightningDevKit.Bindings.ChannelManager, keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, description: Swift.String, durationSinceEpoch: Swift.UInt64, invoiceExpiryDeltaSecs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swiftCreateInvoiceFromChannelmanagerAndDurationSinceEpochWithPaymentHash(channelmanager: LightningDevKit.Bindings.ChannelManager, keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, network: LightningDevKit.Bindings.Currency, amtMsat: Swift.UInt64?, description: Swift.String, durationSinceEpoch: Swift.UInt64, invoiceExpiryDeltaSecs: Swift.UInt32, paymentHash: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func readBlockHashChannelMonitor(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.KeysInterface) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `arg`.")
  public class func readBlockHashChannelManager(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.ChannelManagerReadArgs) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InstanceCrashSimulator : LightningDevKit.NativeTraitWrapper {
  public init()
  public func getPointer() -> Swift.UnsafeMutableRawPointer
  @objc deinit
}
public typealias Record = LightningDevKit.Bindings.Record
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Record : LightningDevKit.NativeTypeWrapper {
    public func getLevel() -> LightningDevKit.Bindings.Level
    public func setLevel(val: LightningDevKit.Bindings.Level)
    public func getArgs() -> Swift.String
    public func setArgs(val: Swift.String)
    public func getModulePath() -> Swift.String
    public func setModulePath(val: Swift.String)
    public func getFile() -> Swift.String
    public func setFile(val: Swift.String)
    public func getLine() -> Swift.UInt32
    public func setLine(val: Swift.UInt32)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OutPoint = LightningDevKit.Bindings.OutPoint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OutPoint : LightningDevKit.NativeTypeWrapper {
    public func getTxid() -> [Swift.UInt8]?
    public func setTxid(val: [Swift.UInt8])
    public func getIndex() -> Swift.UInt16
    public func setIndex(val: Swift.UInt16)
    public init(txidArg: [Swift.UInt8], indexArg: Swift.UInt16)
    public class func eq(a: LightningDevKit.Bindings.OutPoint, b: LightningDevKit.Bindings.OutPoint) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func toChannelId() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ErrorAction = LightningDevKit.Bindings.ErrorAction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErrorAction : LightningDevKit.NativeTypeWrapper {
    public enum ErrorActionType {
      case DisconnectPeer
      case IgnoreError
      case IgnoreAndLog
      case IgnoreDuplicateGossip
      case SendErrorMessage
      case SendWarningMessage
      public static func == (a: LightningDevKit.Bindings.ErrorAction.ErrorActionType, b: LightningDevKit.Bindings.ErrorAction.ErrorActionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ErrorAction.ErrorActionType
    public class func initWithDisconnectPeer(msg: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithIgnoreError() -> LightningDevKit.Bindings.ErrorAction
    public class func initWithIgnoreAndLog(a: LightningDevKit.Bindings.Level) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithIgnoreDuplicateGossip() -> LightningDevKit.Bindings.ErrorAction
    public class func initWithSendErrorMessage(msg: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func initWithSendWarningMessage(msg: LightningDevKit.Bindings.WarningMessage, logLevel: LightningDevKit.Bindings.Level) -> LightningDevKit.Bindings.ErrorAction
    public func getValueAsDisconnectPeer() -> LightningDevKit.Bindings.ErrorAction.DisconnectPeer?
    public func getValueAsIgnoreAndLog() -> LightningDevKit.Bindings.Level?
    public func getValueAsSendErrorMessage() -> LightningDevKit.Bindings.ErrorAction.SendErrorMessage?
    public func getValueAsSendWarningMessage() -> LightningDevKit.Bindings.ErrorAction.SendWarningMessage?
    @objc deinit
    @_hasMissingDesignatedInitializers public class DisconnectPeer : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ErrorMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendErrorMessage : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ErrorMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendWarningMessage : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.WarningMessage
      public func getLogLevel() -> LightningDevKit.Bindings.Level
      @objc deinit
    }
  }
}
public typealias BigSize = LightningDevKit.Bindings.BigSize
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BigSize : LightningDevKit.NativeTypeWrapper {
    public func getA() -> Swift.UInt64
    public func setA(val: Swift.UInt64)
    public init(aArg: Swift.UInt64)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_u32GraphSyncErrorZ = LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_u32GraphSyncErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: Swift.UInt32) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.GraphSyncError) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.GraphSyncError?
    public func getValue() -> Swift.UInt32?
    @objc deinit
  }
}
public typealias GossipSync = LightningDevKit.Bindings.GossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GossipSync : LightningDevKit.NativeTypeWrapper {
    public enum GossipSyncType {
      case P2P
      case Rapid
      case None
      public static func == (a: LightningDevKit.Bindings.GossipSync.GossipSyncType, b: LightningDevKit.Bindings.GossipSync.GossipSyncType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.GossipSync.GossipSyncType
    public class func initWithP2P(a: LightningDevKit.Bindings.P2PGossipSync) -> LightningDevKit.Bindings.GossipSync
    public class func initWithRapid(a: LightningDevKit.Bindings.RapidGossipSync) -> LightningDevKit.Bindings.GossipSync
    public class func none() -> LightningDevKit.Bindings.GossipSync
    public func getValueAsP2p() -> LightningDevKit.Bindings.P2PGossipSync?
    public func getValueAsRapid() -> LightningDevKit.Bindings.RapidGossipSync?
    @objc deinit
  }
}
public typealias Result_COption_MonitorEventZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_MonitorEventZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.MonitorEvent?) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.MonitorEvent?
    @objc deinit
  }
}
public typealias Result_NodeFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NodeFeatures) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeFeatures?
    @objc deinit
  }
}
public typealias Result_PingDecodeErrorZ = LightningDevKit.Bindings.Result_PingDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PingDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Ping) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Ping?
    @objc deinit
  }
}
public typealias Result_C2Tuple_SignatureCVec_SignatureZZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_SignatureCVec_SignatureZZNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], [[Swift.UInt8]])) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> ([Swift.UInt8], [[Swift.UInt8]])?
    @objc deinit
  }
}
public typealias Result_ChannelReadyDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelReadyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelReady) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelReady?
    @objc deinit
  }
}
public typealias FeeEstimator = LightningDevKit.Bindings.FeeEstimator
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class FeeEstimator : LightningDevKit.NativeTraitWrapper {
    public init()
    open func getEstSatPer_1000Weight(confirmationTarget: LightningDevKit.Bindings.ConfirmationTarget) -> Swift.UInt32
    @objc deinit
  }
}
public typealias Balance = LightningDevKit.Bindings.Balance
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Balance : LightningDevKit.NativeTypeWrapper {
    public enum BalanceType {
      case ClaimableOnChannelClose
      case ClaimableAwaitingConfirmations
      case ContentiousClaimable
      case MaybeTimeoutClaimableHTLC
      case MaybePreimageClaimableHTLC
      case CounterpartyRevokedOutputClaimable
      public static func == (a: LightningDevKit.Bindings.Balance.BalanceType, b: LightningDevKit.Bindings.Balance.BalanceType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Balance.BalanceType
    public class func initWithClaimableOnChannelClose(claimableAmountSatoshis: Swift.UInt64) -> LightningDevKit.Bindings.Balance
    public class func initWithClaimableAwaitingConfirmations(claimableAmountSatoshis: Swift.UInt64, confirmationHeight: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func initWithContentiousClaimable(claimableAmountSatoshis: Swift.UInt64, timeoutHeight: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func initWithMaybeTimeoutClaimableHtlc(claimableAmountSatoshis: Swift.UInt64, claimableHeight: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func initWithMaybePreimageClaimableHtlc(claimableAmountSatoshis: Swift.UInt64, expiryHeight: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func initWithCounterpartyRevokedOutputClaimable(claimableAmountSatoshis: Swift.UInt64) -> LightningDevKit.Bindings.Balance
    public class func eq(a: LightningDevKit.Bindings.Balance, b: LightningDevKit.Bindings.Balance) -> Swift.Bool
    public func getValueAsClaimableOnChannelClose() -> LightningDevKit.Bindings.Balance.ClaimableOnChannelClose?
    public func getValueAsClaimableAwaitingConfirmations() -> LightningDevKit.Bindings.Balance.ClaimableAwaitingConfirmations?
    public func getValueAsContentiousClaimable() -> LightningDevKit.Bindings.Balance.ContentiousClaimable?
    public func getValueAsMaybeTimeoutClaimableHtlc() -> LightningDevKit.Bindings.Balance.MaybeTimeoutClaimableHTLC?
    public func getValueAsMaybePreimageClaimableHtlc() -> LightningDevKit.Bindings.Balance.MaybePreimageClaimableHTLC?
    public func getValueAsCounterpartyRevokedOutputClaimable() -> LightningDevKit.Bindings.Balance.CounterpartyRevokedOutputClaimable?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ClaimableOnChannelClose : LightningDevKit.NativeTypeWrapper {
      public func getClaimableAmountSatoshis() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ClaimableAwaitingConfirmations : LightningDevKit.NativeTypeWrapper {
      public func getClaimableAmountSatoshis() -> Swift.UInt64
      public func getConfirmationHeight() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ContentiousClaimable : LightningDevKit.NativeTypeWrapper {
      public func getClaimableAmountSatoshis() -> Swift.UInt64
      public func getTimeoutHeight() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaybeTimeoutClaimableHTLC : LightningDevKit.NativeTypeWrapper {
      public func getClaimableAmountSatoshis() -> Swift.UInt64
      public func getClaimableHeight() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaybePreimageClaimableHTLC : LightningDevKit.NativeTypeWrapper {
      public func getClaimableAmountSatoshis() -> Swift.UInt64
      public func getExpiryHeight() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class CounterpartyRevokedOutputClaimable : LightningDevKit.NativeTypeWrapper {
      public func getClaimableAmountSatoshis() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias ChainMonitor = LightningDevKit.Bindings.ChainMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChainMonitor : LightningDevKit.NativeTypeWrapper {
    public init(chainSource: LightningDevKit.Bindings.Filter?, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, feeest: LightningDevKit.Bindings.FeeEstimator, persister: LightningDevKit.Bindings.Persist)
    public func getClaimableBalances(ignoredChannels: [LightningDevKit.Bindings.ChannelDetails]) -> [LightningDevKit.Bindings.Balance]
    public func getMonitor(fundingTxo: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public func listMonitors() -> [LightningDevKit.Bindings.OutPoint]
    public func listPendingMonitorUpdates() -> [(LightningDevKit.Bindings.OutPoint, [LightningDevKit.Bindings.MonitorUpdateId])]
    public func channelMonitorUpdated(fundingTxo: LightningDevKit.Bindings.OutPoint, completedUpdateId: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func asListen() -> LightningDevKit.Bindings.Listen
    public func asConfirm() -> LightningDevKit.Bindings.Confirm
    public func asWatch() -> LightningDevKit.Bindings.Watch
    public func asEventsProvider() -> LightningDevKit.Bindings.EventsProvider
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_NetworkUpdateZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_NetworkUpdateZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NetworkUpdate?) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetworkUpdate?
    @objc deinit
  }
}
public typealias Result_ShutdownScriptDecodeErrorZ = LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    @objc deinit
  }
}
public typealias InvalidShutdownScript = LightningDevKit.Bindings.InvalidShutdownScript
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvalidShutdownScript : LightningDevKit.NativeTypeWrapper {
    public func getScript() -> [Swift.UInt8]
    public func setScript(val: [Swift.UInt8])
    public init(scriptArg: [Swift.UInt8])
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias UserConfig = LightningDevKit.Bindings.UserConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UserConfig : LightningDevKit.NativeTypeWrapper {
    public func getChannelHandshakeConfig() -> LightningDevKit.Bindings.ChannelHandshakeConfig
    public func setChannelHandshakeConfig(val: LightningDevKit.Bindings.ChannelHandshakeConfig)
    public func getChannelHandshakeLimits() -> LightningDevKit.Bindings.ChannelHandshakeLimits
    public func setChannelHandshakeLimits(val: LightningDevKit.Bindings.ChannelHandshakeLimits)
    public func getChannelConfig() -> LightningDevKit.Bindings.ChannelConfig
    public func setChannelConfig(val: LightningDevKit.Bindings.ChannelConfig)
    public func getAcceptForwardsToPrivChannels() -> Swift.Bool
    public func setAcceptForwardsToPrivChannels(val: Swift.Bool)
    public func getAcceptInboundChannels() -> Swift.Bool
    public func setAcceptInboundChannels(val: Swift.Bool)
    public func getManuallyAcceptInboundChannels() -> Swift.Bool
    public func setManuallyAcceptInboundChannels(val: Swift.Bool)
    public func getAcceptInterceptHtlcs() -> Swift.Bool
    public func setAcceptInterceptHtlcs(val: Swift.Bool)
    public init(channelHandshakeConfigArg: LightningDevKit.Bindings.ChannelHandshakeConfig, channelHandshakeLimitsArg: LightningDevKit.Bindings.ChannelHandshakeLimits, channelConfigArg: LightningDevKit.Bindings.ChannelConfig, acceptForwardsToPrivChannelsArg: Swift.Bool, acceptInboundChannelsArg: Swift.Bool, manuallyAcceptInboundChannelsArg: Swift.Bool, acceptInterceptHtlcsArg: Swift.Bool)
    public class func initWithDefault() -> LightningDevKit.Bindings.UserConfig
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias InvoiceSignature = LightningDevKit.Bindings.InvoiceSignature
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceSignature : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.InvoiceSignature, b: LightningDevKit.Bindings.InvoiceSignature) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Persister = LightningDevKit.Bindings.Persister
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Persister : LightningDevKit.NativeTraitWrapper {
    public init()
    open func persistManager(channelManager: LightningDevKit.Bindings.ChannelManager) -> LightningDevKit.Bindings.Result_NoneErrorZ
    open func persistGraph(networkGraph: LightningDevKit.Bindings.NetworkGraph) -> LightningDevKit.Bindings.Result_NoneErrorZ
    open func persistScorer(scorer: LightningDevKit.Bindings.WriteableScore) -> LightningDevKit.Bindings.Result_NoneErrorZ
    @objc deinit
  }
}
public typealias BindingsType = LightningDevKit.Bindings.BindingsType
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BindingsType : LightningDevKit.NativeTraitWrapper {
    public init()
    open func typeId() -> Swift.UInt16
    open func debugStr() -> Swift.String
    open func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias ClosingSignedFeeRange = LightningDevKit.Bindings.ClosingSignedFeeRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingSignedFeeRange : LightningDevKit.NativeTypeWrapper {
    public func getMinFeeSatoshis() -> Swift.UInt64
    public func setMinFeeSatoshis(val: Swift.UInt64)
    public func getMaxFeeSatoshis() -> Swift.UInt64
    public func setMaxFeeSatoshis(val: Swift.UInt64)
    public init(minFeeSatoshisArg: Swift.UInt64, maxFeeSatoshisArg: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.ClosingSignedFeeRange, b: LightningDevKit.Bindings.ClosingSignedFeeRange) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_RouteHintDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHintDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.RouteHint) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHint?
    @objc deinit
  }
}
public typealias Result_CommitmentSignedDecodeErrorZ = LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CommitmentSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.CommitmentSigned) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CommitmentSigned?
    @objc deinit
  }
}
public typealias StaticPaymentOutputDescriptor = LightningDevKit.Bindings.StaticPaymentOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class StaticPaymentOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
    public func setOutpoint(val: LightningDevKit.Bindings.OutPoint)
    public func getOutput() -> LightningDevKit.Bindings.TxOut
    public func setOutput(val: LightningDevKit.Bindings.TxOut)
    public func getChannelKeysId() -> [Swift.UInt8]?
    public func setChannelKeysId(val: [Swift.UInt8])
    public func getChannelValueSatoshis() -> Swift.UInt64
    public func setChannelValueSatoshis(val: Swift.UInt64)
    public init(outpointArg: LightningDevKit.Bindings.OutPoint, outputArg: LightningDevKit.Bindings.TxOut, channelKeysIdArg: [Swift.UInt8], channelValueSatoshisArg: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.StaticPaymentOutputDescriptor, b: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_FundingSignedDecodeErrorZ = LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FundingSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.FundingSigned) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FundingSigned?
    @objc deinit
  }
}
public typealias NetAddress = LightningDevKit.Bindings.NetAddress
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetAddress : LightningDevKit.NativeTypeWrapper {
    public enum NetAddressType {
      case IPv4
      case IPv6
      case OnionV2
      case OnionV3
      case Hostname
      public static func == (a: LightningDevKit.Bindings.NetAddress.NetAddressType, b: LightningDevKit.Bindings.NetAddress.NetAddressType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.NetAddress.NetAddressType
    public class func initWithIpv4(addr: [Swift.UInt8], port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func initWithIpv6(addr: [Swift.UInt8], port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func initWithOnionV2(a: [Swift.UInt8]) -> LightningDevKit.Bindings.NetAddress
    public class func initWithOnionV3(ed25519Pubkey: [Swift.UInt8], checksum: Swift.UInt16, version: Swift.UInt8, port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func initWithHostname(hostname: LightningDevKit.Bindings.Hostname, port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func eq(a: LightningDevKit.Bindings.NetAddress, b: LightningDevKit.Bindings.NetAddress) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
    public func getValueAsIPv4() -> LightningDevKit.Bindings.NetAddress.IPv4?
    public func getValueAsIPv6() -> LightningDevKit.Bindings.NetAddress.IPv6?
    public func getValueAsOnionV2() -> [Swift.UInt8]?
    public func getValueAsOnionV3() -> LightningDevKit.Bindings.NetAddress.OnionV3?
    public func getValueAsHostname() -> LightningDevKit.Bindings.NetAddress.Hostname?
    @objc deinit
    @_hasMissingDesignatedInitializers public class IPv4 : LightningDevKit.NativeTypeWrapper {
      public func getAddr() -> [Swift.UInt8]
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class IPv6 : LightningDevKit.NativeTypeWrapper {
      public func getAddr() -> [Swift.UInt8]
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OnionV3 : LightningDevKit.NativeTypeWrapper {
      public func getEd25519Pubkey() -> [Swift.UInt8]
      public func getChecksum() -> Swift.UInt16
      public func getVersion() -> Swift.UInt8
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Hostname : LightningDevKit.NativeTypeWrapper {
      public func getHostname() -> LightningDevKit.Bindings.Hostname
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
  }
}
public typealias Result_SignDecodeErrorZ = LightningDevKit.Bindings.Result_SignDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Sign) -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Sign?
    @objc deinit
  }
}
public typealias Result_PublicKeyErrorZ = LightningDevKit.Bindings.Result_PublicKeyErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PublicKeyErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.Secp256k1Error) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.Secp256k1Error?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias OfferFeatures = LightningDevKit.Bindings.OfferFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OfferFeatures : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.OfferFeatures, b: LightningDevKit.Bindings.OfferFeatures) -> Swift.Bool
    public class func initWithEmpty() -> LightningDevKit.Bindings.OfferFeatures
    public func requiresUnknownBits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OfferFeaturesDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_UnsignedChannelUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedChannelUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedChannelUpdate?
    @objc deinit
  }
}
public typealias Result_WarningMessageDecodeErrorZ = LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_WarningMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.WarningMessage) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.WarningMessage?
    @objc deinit
  }
}
public typealias ShutdownScript = LightningDevKit.Bindings.ShutdownScript
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ShutdownScript : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.ShutdownScript, b: LightningDevKit.Bindings.ShutdownScript) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public class func initWithP2wpkh(pubkeyHash: [Swift.UInt8]) -> LightningDevKit.Bindings.ShutdownScript
    public class func initWithP2wsh(scriptHash: [Swift.UInt8]) -> LightningDevKit.Bindings.ShutdownScript
    public class func newWitnessProgram(version: Swift.UInt8, program: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public func intoInner() -> [Swift.UInt8]
    public func asLegacyPubkey() -> [Swift.UInt8]?
    public func isCompatible(features: LightningDevKit.Bindings.InitFeatures) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PaymentSecretAPIErrorZ = LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentSecretAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias Result_NoneSemanticErrorZ = LightningDevKit.Bindings.Result_NoneSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SemanticError) -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SemanticError?
    @objc deinit
  }
}
public typealias EventHandler = LightningDevKit.Bindings.EventHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EventHandler : LightningDevKit.NativeTraitWrapper {
    public init()
    open func handleEvent(event: LightningDevKit.Bindings.Event)
    @objc deinit
  }
}
public typealias LockedChannelMonitor = LightningDevKit.Bindings.LockedChannelMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class LockedChannelMonitor : LightningDevKit.NativeTypeWrapper {
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias HTLCClaim = LightningDevKit.Bindings.HTLCClaim
extension LightningDevKit.Bindings {
  public enum HTLCClaim {
    case OfferedTimeout
    case OfferedPreimage
    case AcceptedTimeout
    case AcceptedPreimage
    case Revocation
    public static func == (a: LightningDevKit.Bindings.HTLCClaim, b: LightningDevKit.Bindings.HTLCClaim) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias CustomOnionMessageContents = LightningDevKit.Bindings.CustomOnionMessageContents
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomOnionMessageContents : LightningDevKit.NativeTraitWrapper {
    public init()
    open func tlvType() -> Swift.UInt64
    open func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias Result_OpenChannelDecodeErrorZ = LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OpenChannelDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.OpenChannel) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OpenChannel?
    @objc deinit
  }
}
public typealias EffectiveCapacity = LightningDevKit.Bindings.EffectiveCapacity
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class EffectiveCapacity : LightningDevKit.NativeTypeWrapper {
    public enum EffectiveCapacityType {
      case ExactLiquidity
      case MaximumHTLC
      case Total
      case Infinite
      case Unknown
      public static func == (a: LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType, b: LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType
    public class func initWithExactLiquidity(liquidityMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithMaximumHtlc(amountMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithTotal(capacityMsat: Swift.UInt64, htlcMaximumMsat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithInfinite() -> LightningDevKit.Bindings.EffectiveCapacity
    public class func initWithUnknown() -> LightningDevKit.Bindings.EffectiveCapacity
    public func asMsat() -> Swift.UInt64
    public func getValueAsExactLiquidity() -> LightningDevKit.Bindings.EffectiveCapacity.ExactLiquidity?
    public func getValueAsMaximumHtlc() -> LightningDevKit.Bindings.EffectiveCapacity.MaximumHTLC?
    public func getValueAsTotal() -> LightningDevKit.Bindings.EffectiveCapacity.Total?
    @objc deinit
    @_hasMissingDesignatedInitializers public class ExactLiquidity : LightningDevKit.NativeTypeWrapper {
      public func getLiquidityMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaximumHTLC : LightningDevKit.NativeTypeWrapper {
      public func getAmountMsat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Total : LightningDevKit.NativeTypeWrapper {
      public func getCapacityMsat() -> Swift.UInt64
      public func getHtlcMaximumMsat() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias Result_ProbabilisticScorerDecodeErrorZ = LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ProbabilisticScorerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.ProbabilisticScorer) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ProbabilisticScorer?
    @objc deinit
  }
}
public typealias Retry = LightningDevKit.Bindings.Retry
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Retry : LightningDevKit.NativeTypeWrapper {
    public enum RetryType {
      case Attempts
      case Timeout
      public static func == (a: LightningDevKit.Bindings.Retry.RetryType, b: LightningDevKit.Bindings.Retry.RetryType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Retry.RetryType
    public class func initWithAttempts(a: Swift.UInt) -> LightningDevKit.Bindings.Retry
    public class func initWithTimeout(a: Swift.UInt64) -> LightningDevKit.Bindings.Retry
    public class func eq(a: LightningDevKit.Bindings.Retry, b: LightningDevKit.Bindings.Retry) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func getValueAsAttempts() -> Swift.UInt?
    public func getValueAsTimeout() -> Swift.UInt64?
    @objc deinit
  }
}
public typealias ClosingTransaction = LightningDevKit.Bindings.ClosingTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingTransaction : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ClosingTransaction, b: LightningDevKit.Bindings.ClosingTransaction) -> Swift.Bool
    public init(toHolderValueSat: Swift.UInt64, toCounterpartyValueSat: Swift.UInt64, toHolderScript: [Swift.UInt8], toCounterpartyScript: [Swift.UInt8], fundingOutpoint: LightningDevKit.Bindings.OutPoint)
    public func trust() -> LightningDevKit.Bindings.TrustedClosingTransaction
    public func verify(fundingOutpoint: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public func toHolderValueSat() -> Swift.UInt64
    public func toCounterpartyValueSat() -> Swift.UInt64
    public func toHolderScript() -> [Swift.UInt8]
    public func toCounterpartyScript() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Network = LightningDevKit.Bindings.Network
extension LightningDevKit.Bindings {
  public enum Network {
    case Bitcoin
    case Testnet
    case Regtest
    case Signet
    public static func == (a: LightningDevKit.Bindings.Network, b: LightningDevKit.Bindings.Network) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias ProbabilisticScorer = LightningDevKit.Bindings.ProbabilisticScorer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScorer : LightningDevKit.NativeTypeWrapper {
    public init(params: LightningDevKit.Bindings.ProbabilisticScoringParameters, networkGraph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger)
    public func debugLogLiquidityStats()
    public func estimatedChannelLiquidityRange(scid: Swift.UInt64, target: LightningDevKit.Bindings.NodeId) -> (Swift.UInt64, Swift.UInt64)?
    public func addBanned(nodeId: LightningDevKit.Bindings.NodeId)
    public func removeBanned(nodeId: LightningDevKit.Bindings.NodeId)
    public func setManualPenalty(nodeId: LightningDevKit.Bindings.NodeId, penalty: Swift.UInt64)
    public func removeManualPenalty(nodeId: LightningDevKit.Bindings.NodeId)
    public func clearManualPenalties()
    public func asScore() -> LightningDevKit.Bindings.Score
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], argA: LightningDevKit.Bindings.ProbabilisticScoringParameters, argB: LightningDevKit.Bindings.NetworkGraph, argC: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ScorerAccountingForInFlightHtlcs = LightningDevKit.Bindings.ScorerAccountingForInFlightHtlcs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ScorerAccountingForInFlightHtlcs : LightningDevKit.NativeTypeWrapper {
    public init(scorer: LightningDevKit.Bindings.Score, inflightHtlcs: LightningDevKit.Bindings.InFlightHtlcs)
    public func write() -> [Swift.UInt8]
    public func asScore() -> LightningDevKit.Bindings.Score
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RevokeAndACK = LightningDevKit.Bindings.RevokeAndACK
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RevokeAndACK : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getPerCommitmentSecret() -> [Swift.UInt8]?
    public func setPerCommitmentSecret(val: [Swift.UInt8])
    public func getNextPerCommitmentPoint() -> [Swift.UInt8]
    public func setNextPerCommitmentPoint(val: [Swift.UInt8])
    public init(channelIdArg: [Swift.UInt8], perCommitmentSecretArg: [Swift.UInt8], nextPerCommitmentPointArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.RevokeAndACK, b: LightningDevKit.Bindings.RevokeAndACK) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias MultiThreadedLockableScore = LightningDevKit.Bindings.MultiThreadedLockableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MultiThreadedLockableScore : LightningDevKit.NativeTypeWrapper {
    public func asLockableScore() -> LightningDevKit.Bindings.LockableScore
    public func write() -> [Swift.UInt8]
    public func asWriteableScore() -> LightningDevKit.Bindings.WriteableScore
    public init(score: LightningDevKit.Bindings.Score)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias RouteParameters = LightningDevKit.Bindings.RouteParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteParameters : LightningDevKit.NativeTypeWrapper {
    public func getPaymentParams() -> LightningDevKit.Bindings.PaymentParameters
    public func setPaymentParams(val: LightningDevKit.Bindings.PaymentParameters)
    public func getFinalValueMsat() -> Swift.UInt64
    public func setFinalValueMsat(val: Swift.UInt64)
    public func getFinalCltvExpiryDelta() -> Swift.UInt32
    public func setFinalCltvExpiryDelta(val: Swift.UInt32)
    public init(paymentParamsArg: LightningDevKit.Bindings.PaymentParameters, finalValueMsatArg: Swift.UInt64, finalCltvExpiryDeltaArg: Swift.UInt32)
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_NodeAliasDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAliasDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NodeAlias) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAlias?
    @objc deinit
  }
}
public typealias Result_UpdateFulfillHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFulfillHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFulfillHTLC) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFulfillHTLC?
    @objc deinit
  }
}
public typealias Access = LightningDevKit.Bindings.Access
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Access : LightningDevKit.NativeTraitWrapper {
    public init()
    open func getUtxo(genesisHash: [Swift.UInt8]?, shortChannelId: Swift.UInt64) -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
    @objc deinit
  }
}
public typealias BlindedHop = LightningDevKit.Bindings.BlindedHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BlindedHop : LightningDevKit.NativeTypeWrapper {
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BlindedHopDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Hostname = LightningDevKit.Bindings.Hostname
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Hostname : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.Hostname, b: LightningDevKit.Bindings.Hostname) -> Swift.Bool
    public func len() -> Swift.UInt8
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_InFlightHtlcsDecodeErrorZ = LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InFlightHtlcsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.InFlightHtlcs) -> LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InFlightHtlcsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InFlightHtlcs?
    @objc deinit
  }
}
public typealias Result_NonePeerHandleErrorZ = LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    @objc deinit
  }
}
public typealias QueryShortChannelIds = LightningDevKit.Bindings.QueryShortChannelIds
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class QueryShortChannelIds : LightningDevKit.NativeTypeWrapper {
    public func getChainHash() -> [Swift.UInt8]?
    public func setChainHash(val: [Swift.UInt8])
    public func getShortChannelIds() -> [Swift.UInt64]
    public func setShortChannelIds(val: [Swift.UInt64])
    public init(chainHashArg: [Swift.UInt8], shortChannelIdsArg: [Swift.UInt64])
    public class func eq(a: LightningDevKit.Bindings.QueryShortChannelIds, b: LightningDevKit.Bindings.QueryShortChannelIds) -> Swift.Bool
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_StaticPaymentOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StaticPaymentOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor?
    @objc deinit
  }
}
public typealias CustomOnionMessageHandler = LightningDevKit.Bindings.CustomOnionMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomOnionMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init()
    open func handleCustomMessage(msg: LightningDevKit.Bindings.CustomOnionMessageContents)
    open func readCustomMessage(messageType: Swift.UInt64, buffer: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_CustomOnionMessageContentsZDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_ClosingSignedFeeRangeDecodeErrorZ = LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClosingSignedFeeRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ClosingSignedFeeRange) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosingSignedFeeRange?
    @objc deinit
  }
}
public typealias Result_NoneNoneZ = LightningDevKit.Bindings.Result_NoneNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func isOk() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_COption_EventZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_EventZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Event?) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Event?
    @objc deinit
  }
}
public typealias Result_TrustedClosingTransactionNoneZ = LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TrustedClosingTransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    @available(*, deprecated, message: "This method passes the following non-cloneable, but freeable objects by value: `o`.")
    public class func initWithOk(o: LightningDevKit.Bindings.TrustedClosingTransaction) -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TrustedClosingTransaction?
    @objc deinit
  }
}
public typealias CustomMessageHandler = LightningDevKit.Bindings.CustomMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init(CustomMessageReader: LightningDevKit.Bindings.CustomMessageReader)
    open func handleCustomMessage(msg: LightningDevKit.Bindings.BindingsType, senderNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func getAndClearPendingMsg() -> [([Swift.UInt8], LightningDevKit.Bindings.BindingsType)]
    public func getCustomMessageReader() -> LightningDevKit.Bindings.CustomMessageReader
    @objc deinit
  }
}
public typealias Result_PublicKeyNoneZ = LightningDevKit.Bindings.Result_PublicKeyNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PublicKeyNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeyNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_PublicKeyNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias SignedRawInvoice = LightningDevKit.Bindings.SignedRawInvoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SignedRawInvoice : LightningDevKit.NativeTypeWrapper {
    public class func eq(a: LightningDevKit.Bindings.SignedRawInvoice, b: LightningDevKit.Bindings.SignedRawInvoice) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func intoParts() -> (LightningDevKit.Bindings.RawInvoice, [Swift.UInt8], LightningDevKit.Bindings.InvoiceSignature)
    public func rawInvoice() -> LightningDevKit.Bindings.RawInvoice
    public func signableHash() -> [Swift.UInt8]?
    public func signature() -> LightningDevKit.Bindings.InvoiceSignature
    public func recoverPayeePubKey() -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
    public func checkSignature() -> Swift.Bool
    public class func fromStr(s: Swift.String) -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
    public func toStr() -> Swift.String
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias SocketDescriptor = LightningDevKit.Bindings.SocketDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class SocketDescriptor : LightningDevKit.NativeTraitWrapper {
    public init()
    open func sendData(data: [Swift.UInt8], resumeRead: Swift.Bool) -> Swift.UInt
    open func disconnectSocket()
    open func eq(otherArg: LightningDevKit.Bindings.SocketDescriptor) -> Swift.Bool
    open func hash() -> Swift.UInt64
    @objc deinit
  }
}
public typealias Result_OfferFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_OfferFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OfferFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.OfferFeatures) -> LightningDevKit.Bindings.Result_OfferFeaturesDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OfferFeaturesDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OfferFeatures?
    @objc deinit
  }
}
public typealias Sha256 = LightningDevKit.Bindings.Sha256
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Sha256 : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Sha256, b: LightningDevKit.Bindings.Sha256) -> Swift.Bool
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias ExpiryTime = LightningDevKit.Bindings.ExpiryTime
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ExpiryTime : LightningDevKit.NativeTypeWrapper {
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ExpiryTime, b: LightningDevKit.Bindings.ExpiryTime) -> Swift.Bool
    public class func initWithSeconds(seconds: Swift.UInt64) -> LightningDevKit.Bindings.ExpiryTime
    public class func initWithDuration(duration: Swift.UInt64) -> LightningDevKit.Bindings.ExpiryTime
    public func asSeconds() -> Swift.UInt64
    public func asDuration() -> Swift.UInt64
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias NodeAlias = LightningDevKit.Bindings.NodeAlias
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAlias : LightningDevKit.NativeTypeWrapper {
    public func getA() -> [Swift.UInt8]?
    public func setA(val: [Swift.UInt8])
    public init(aArg: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.NodeAlias, b: LightningDevKit.Bindings.NodeAlias) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias GraphSyncError = LightningDevKit.Bindings.GraphSyncError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GraphSyncError : LightningDevKit.NativeTypeWrapper {
    public enum GraphSyncErrorType {
      case DecodeError
      case LightningError
      public static func == (a: LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType, b: LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType
    public class func initWithDecodeError(a: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.GraphSyncError
    public class func initWithLightningError(a: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.GraphSyncError
    public func getValueAsDecodeError() -> LightningDevKit.Bindings.DecodeError?
    public func getValueAsLightningError() -> LightningDevKit.Bindings.LightningError?
    @objc deinit
  }
}
public typealias MessageSendEvent = LightningDevKit.Bindings.MessageSendEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MessageSendEvent : LightningDevKit.NativeTypeWrapper {
    public enum MessageSendEventType {
      case SendAcceptChannel
      case SendOpenChannel
      case SendFundingCreated
      case SendFundingSigned
      case SendChannelReady
      case SendAnnouncementSignatures
      case UpdateHTLCs
      case SendRevokeAndACK
      case SendClosingSigned
      case SendShutdown
      case SendChannelReestablish
      case SendChannelAnnouncement
      case BroadcastChannelAnnouncement
      case BroadcastChannelUpdate
      case SendChannelUpdate
      case HandleError
      case SendChannelRangeQuery
      case SendShortIdsQuery
      case SendReplyChannelRange
      case SendGossipTimestampFilter
      public static func == (a: LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType, b: LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType
    public class func initWithSendAcceptChannel(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AcceptChannel) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendOpenChannel(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.OpenChannel) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendFundingCreated(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingCreated) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendFundingSigned(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingSigned) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelReady(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReady) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendAnnouncementSignatures(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.AnnouncementSignatures) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithUpdateHtlcs(nodeId: [Swift.UInt8], updates: LightningDevKit.Bindings.CommitmentUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendRevokeAndAck(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.RevokeAndACK) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendClosingSigned(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ClosingSigned) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendShutdown(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.Shutdown) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelReestablish(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReestablish) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelAnnouncement(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelAnnouncement, updateMsg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithBroadcastChannelAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement, updateMsg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithBroadcastChannelUpdate(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelUpdate(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithHandleError(nodeId: [Swift.UInt8], action: LightningDevKit.Bindings.ErrorAction) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendChannelRangeQuery(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendShortIdsQuery(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendReplyChannelRange(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.MessageSendEvent
    public class func initWithSendGossipTimestampFilter(nodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.GossipTimestampFilter) -> LightningDevKit.Bindings.MessageSendEvent
    public func getValueAsSendAcceptChannel() -> LightningDevKit.Bindings.MessageSendEvent.SendAcceptChannel?
    public func getValueAsSendOpenChannel() -> LightningDevKit.Bindings.MessageSendEvent.SendOpenChannel?
    public func getValueAsSendFundingCreated() -> LightningDevKit.Bindings.MessageSendEvent.SendFundingCreated?
    public func getValueAsSendFundingSigned() -> LightningDevKit.Bindings.MessageSendEvent.SendFundingSigned?
    public func getValueAsSendChannelReady() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelReady?
    public func getValueAsSendAnnouncementSignatures() -> LightningDevKit.Bindings.MessageSendEvent.SendAnnouncementSignatures?
    public func getValueAsUpdateHtlcs() -> LightningDevKit.Bindings.MessageSendEvent.UpdateHTLCs?
    public func getValueAsSendRevokeAndAck() -> LightningDevKit.Bindings.MessageSendEvent.SendRevokeAndACK?
    public func getValueAsSendClosingSigned() -> LightningDevKit.Bindings.MessageSendEvent.SendClosingSigned?
    public func getValueAsSendShutdown() -> LightningDevKit.Bindings.MessageSendEvent.SendShutdown?
    public func getValueAsSendChannelReestablish() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelReestablish?
    public func getValueAsSendChannelAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelAnnouncement?
    public func getValueAsBroadcastChannelAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastChannelAnnouncement?
    public func getValueAsBroadcastChannelUpdate() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastChannelUpdate?
    public func getValueAsSendChannelUpdate() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelUpdate?
    public func getValueAsHandleError() -> LightningDevKit.Bindings.MessageSendEvent.HandleError?
    public func getValueAsSendChannelRangeQuery() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelRangeQuery?
    public func getValueAsSendShortIdsQuery() -> LightningDevKit.Bindings.MessageSendEvent.SendShortIdsQuery?
    public func getValueAsSendReplyChannelRange() -> LightningDevKit.Bindings.MessageSendEvent.SendReplyChannelRange?
    public func getValueAsSendGossipTimestampFilter() -> LightningDevKit.Bindings.MessageSendEvent.SendGossipTimestampFilter?
    @objc deinit
    @_hasMissingDesignatedInitializers public class SendAcceptChannel : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AcceptChannel
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendOpenChannel : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.OpenChannel
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendFundingCreated : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.FundingCreated
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendFundingSigned : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.FundingSigned
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelReady : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelReady
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendAnnouncementSignatures : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AnnouncementSignatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class UpdateHTLCs : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getUpdates() -> LightningDevKit.Bindings.CommitmentUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendRevokeAndACK : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.RevokeAndACK
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendClosingSigned : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ClosingSigned
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendShutdown : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.Shutdown
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelReestablish : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelReestablish
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelAnnouncement
      public func getUpdateMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ChannelAnnouncement
      public func getUpdateMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastChannelUpdate : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelUpdate : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HandleError : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getAction() -> LightningDevKit.Bindings.ErrorAction
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelRangeQuery : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.QueryChannelRange
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendShortIdsQuery : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.QueryShortChannelIds
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendReplyChannelRange : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ReplyChannelRange
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendGossipTimestampFilter : LightningDevKit.NativeTypeWrapper {
      public func getNodeId() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.GossipTimestampFilter
      @objc deinit
    }
  }
}
public typealias Result_NoneSendErrorZ = LightningDevKit.Bindings.Result_NoneSendErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneSendErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk() -> LightningDevKit.Bindings.Result_NoneSendErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SendError) -> LightningDevKit.Bindings.Result_NoneSendErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SendError?
    @objc deinit
  }
}
public typealias SpendableOutputDescriptor = LightningDevKit.Bindings.SpendableOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SpendableOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public enum SpendableOutputDescriptorType {
      case StaticOutput
      case DelayedPaymentOutput
      case StaticPaymentOutput
      public static func == (a: LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType, b: LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType
    public class func initWithStaticOutput(outpoint: LightningDevKit.Bindings.OutPoint, output: LightningDevKit.Bindings.TxOut) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func initWithDelayedPaymentOutput(a: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func initWithStaticPaymentOutput(a: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func eq(a: LightningDevKit.Bindings.SpendableOutputDescriptor, b: LightningDevKit.Bindings.SpendableOutputDescriptor) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public func getValueAsStaticOutput() -> LightningDevKit.Bindings.SpendableOutputDescriptor.StaticOutput?
    public func getValueAsDelayedPaymentOutput() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor?
    public func getValueAsStaticPaymentOutput() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor?
    @objc deinit
    @_hasMissingDesignatedInitializers public class StaticOutput : LightningDevKit.NativeTypeWrapper {
      public func getOutpoint() -> LightningDevKit.Bindings.OutPoint
      public func getOutput() -> LightningDevKit.Bindings.TxOut
      @objc deinit
    }
  }
}
public typealias Result_ShutdownScriptInvalidShutdownScriptZ = LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptInvalidShutdownScriptZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public class func initWithErr(e: LightningDevKit.Bindings.InvalidShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.InvalidShutdownScript?
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    @objc deinit
  }
}
public typealias PrintableString = LightningDevKit.Bindings.PrintableString
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PrintableString : LightningDevKit.NativeTypeWrapper {
    public func getA() -> Swift.String
    public func setA(val: Swift.String)
    public init(aArg: Swift.String)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias TxCreationKeys = LightningDevKit.Bindings.TxCreationKeys
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxCreationKeys : LightningDevKit.NativeTypeWrapper {
    public func getPerCommitmentPoint() -> [Swift.UInt8]
    public func setPerCommitmentPoint(val: [Swift.UInt8])
    public func getRevocationKey() -> [Swift.UInt8]
    public func setRevocationKey(val: [Swift.UInt8])
    public func getBroadcasterHtlcKey() -> [Swift.UInt8]
    public func setBroadcasterHtlcKey(val: [Swift.UInt8])
    public func getCountersignatoryHtlcKey() -> [Swift.UInt8]
    public func setCountersignatoryHtlcKey(val: [Swift.UInt8])
    public func getBroadcasterDelayedPaymentKey() -> [Swift.UInt8]
    public func setBroadcasterDelayedPaymentKey(val: [Swift.UInt8])
    public class func initWith(perCommitmentPointArg: [Swift.UInt8], revocationKeyArg: [Swift.UInt8], broadcasterHtlcKeyArg: [Swift.UInt8], countersignatoryHtlcKeyArg: [Swift.UInt8], broadcasterDelayedPaymentKeyArg: [Swift.UInt8]) -> LightningDevKit.Bindings.TxCreationKeys
    public class func eq(a: LightningDevKit.Bindings.TxCreationKeys, b: LightningDevKit.Bindings.TxCreationKeys) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public class func initWithDeriveNew(perCommitmentPoint: [Swift.UInt8], broadcasterDelayedPaymentBase: [Swift.UInt8], broadcasterHtlcBase: [Swift.UInt8], countersignatoryRevocationBase: [Swift.UInt8], countersignatoryHtlcBase: [Swift.UInt8]) -> LightningDevKit.Bindings.TxCreationKeys
    public class func initWithChannelStaticKeys(perCommitmentPoint: [Swift.UInt8], broadcasterKeys: LightningDevKit.Bindings.ChannelPublicKeys, countersignatoryKeys: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.TxCreationKeys
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_TransactionNoneZ = LightningDevKit.Bindings.Result_TransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    @objc deinit
  }
}
public typealias RouteHintHop = LightningDevKit.Bindings.RouteHintHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHintHop : LightningDevKit.NativeTypeWrapper {
    public func getSrcNodeId() -> [Swift.UInt8]
    public func setSrcNodeId(val: [Swift.UInt8])
    public func getShortChannelId() -> Swift.UInt64
    public func setShortChannelId(val: Swift.UInt64)
    public func getFees() -> LightningDevKit.Bindings.RoutingFees
    public func setFees(val: LightningDevKit.Bindings.RoutingFees)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64?
    public func setHtlcMinimumMsat(val: Swift.UInt64?)
    public func getHtlcMaximumMsat() -> Swift.UInt64?
    public func setHtlcMaximumMsat(val: Swift.UInt64?)
    public init(srcNodeIdArg: [Swift.UInt8], shortChannelIdArg: Swift.UInt64, feesArg: LightningDevKit.Bindings.RoutingFees, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64?, htlcMaximumMsatArg: Swift.UInt64?)
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHintHop, b: LightningDevKit.Bindings.RouteHintHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelCounterpartyDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelCounterpartyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelCounterparty) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelCounterparty?
    @objc deinit
  }
}
public typealias Result_InitDecodeErrorZ = LightningDevKit.Bindings.Result_InitDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InitDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.BindingsInit) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BindingsInit?
    @objc deinit
  }
}
public typealias Result_AcceptChannelDecodeErrorZ = LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AcceptChannelDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.AcceptChannel) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AcceptChannel?
    @objc deinit
  }
}
public typealias OnionMessage = LightningDevKit.Bindings.OnionMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionMessage : LightningDevKit.NativeTypeWrapper {
    public func getBlindingPoint() -> [Swift.UInt8]
    public func setBlindingPoint(val: [Swift.UInt8])
    public class func eq(a: LightningDevKit.Bindings.OnionMessage, b: LightningDevKit.Bindings.OnionMessage) -> Swift.Bool
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OnionMessageDecodeErrorZ
    public func write() -> [Swift.UInt8]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Future = LightningDevKit.Bindings.Future
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Future : LightningDevKit.NativeTypeWrapper {
    public func registerCallbackFn(callback: LightningDevKit.Bindings.FutureCallback)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_CVec_SignatureZNoneZ = LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_SignatureZNoneZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
    public class func initWithErr() -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
    public func isOk() -> Swift.Bool
    public func getValue() -> [[Swift.UInt8]]?
    @objc deinit
  }
}
public typealias Result_PaymentParametersDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.PaymentParameters) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentParameters?
    @objc deinit
  }
}
public typealias OnionMessenger = LightningDevKit.Bindings.OnionMessenger
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OnionMessenger : LightningDevKit.NativeTypeWrapper {
    public init(keysManager: LightningDevKit.Bindings.KeysInterface, logger: LightningDevKit.Bindings.Logger, customHandler: LightningDevKit.Bindings.CustomOnionMessageHandler)
    public func sendOnionMessage(intermediateNodes: [[Swift.UInt8]], destination: LightningDevKit.Bindings.Destination, message: LightningDevKit.Bindings.OnionMessageContents, replyPath: LightningDevKit.Bindings.BlindedPath) -> LightningDevKit.Bindings.Result_NoneSendErrorZ
    public func asOnionMessageHandler() -> LightningDevKit.Bindings.OnionMessageHandler
    public func asOnionMessageProvider() -> LightningDevKit.Bindings.OnionMessageProvider
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias OnionMessageProvider = LightningDevKit.Bindings.OnionMessageProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class OnionMessageProvider : LightningDevKit.NativeTraitWrapper {
    public init()
    open func nextOnionMessageForPeer(peerNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.OnionMessage
    @objc deinit
  }
}
public typealias EventsProvider = LightningDevKit.Bindings.EventsProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EventsProvider : LightningDevKit.NativeTraitWrapper {
    public init()
    open func processPendingEvents(handler: LightningDevKit.Bindings.EventHandler)
    @objc deinit
  }
}
public typealias ChainParameters = LightningDevKit.Bindings.ChainParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChainParameters : LightningDevKit.NativeTypeWrapper {
    public func getNetwork() -> LightningDevKit.Bindings.Network
    public func setNetwork(val: LightningDevKit.Bindings.Network)
    public func getBestBlock() -> LightningDevKit.Bindings.BestBlock
    public func setBestBlock(val: LightningDevKit.Bindings.BestBlock)
    public init(networkArg: LightningDevKit.Bindings.Network, bestBlockArg: LightningDevKit.Bindings.BestBlock)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_ChannelTransactionParametersDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelTransactionParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ChannelTransactionParameters) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelTransactionParameters?
    @objc deinit
  }
}
public typealias Result_UnsignedNodeAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedNodeAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement?
    @objc deinit
  }
}
public typealias Result_ErrorMessageDecodeErrorZ = LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ErrorMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ErrorMessage?
    @objc deinit
  }
}
public typealias Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ = LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: ([Swift.UInt8], [Swift.UInt8])) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    public class func initWithErr(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public func getValue() -> ([Swift.UInt8], [Swift.UInt8])?
    @objc deinit
  }
}
public typealias BroadcasterInterface = LightningDevKit.Bindings.BroadcasterInterface
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BroadcasterInterface : LightningDevKit.NativeTraitWrapper {
    public init()
    open func broadcastTransaction(tx: [Swift.UInt8])
    @objc deinit
  }
}
public typealias Recipient = LightningDevKit.Bindings.Recipient
extension LightningDevKit.Bindings {
  public enum Recipient {
    case Node
    case PhantomNode
    public static func == (a: LightningDevKit.Bindings.Recipient, b: LightningDevKit.Bindings.Recipient) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_SpendableOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SpendableOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.SpendableOutputDescriptor) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.SpendableOutputDescriptor?
    @objc deinit
  }
}
public typealias ChannelUpdateInfo = LightningDevKit.Bindings.ChannelUpdateInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUpdateInfo : LightningDevKit.NativeTypeWrapper {
    public func getLastUpdate() -> Swift.UInt32
    public func setLastUpdate(val: Swift.UInt32)
    public func getEnabled() -> Swift.Bool
    public func setEnabled(val: Swift.Bool)
    public func getCltvExpiryDelta() -> Swift.UInt16
    public func setCltvExpiryDelta(val: Swift.UInt16)
    public func getHtlcMinimumMsat() -> Swift.UInt64
    public func setHtlcMinimumMsat(val: Swift.UInt64)
    public func getHtlcMaximumMsat() -> Swift.UInt64
    public func setHtlcMaximumMsat(val: Swift.UInt64)
    public func getFees() -> LightningDevKit.Bindings.RoutingFees
    public func setFees(val: LightningDevKit.Bindings.RoutingFees)
    public func getLastUpdateMessage() -> LightningDevKit.Bindings.ChannelUpdate?
    public func setLastUpdateMessage(val: LightningDevKit.Bindings.ChannelUpdate)
    public init(lastUpdateArg: Swift.UInt32, enabledArg: Swift.Bool, cltvExpiryDeltaArg: Swift.UInt16, htlcMinimumMsatArg: Swift.UInt64, htlcMaximumMsatArg: Swift.UInt64, feesArg: LightningDevKit.Bindings.RoutingFees, lastUpdateMessageArg: LightningDevKit.Bindings.ChannelUpdate)
    public class func eq(a: LightningDevKit.Bindings.ChannelUpdateInfo, b: LightningDevKit.Bindings.ChannelUpdateInfo) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_HTLCUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.HTLCUpdate) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCUpdate?
    @objc deinit
  }
}
public typealias ChannelMonitor = LightningDevKit.Bindings.ChannelMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelMonitor : LightningDevKit.NativeTypeWrapper {
    public func write() -> [Swift.UInt8]
    public func updateMonitor(updates: LightningDevKit.Bindings.ChannelMonitorUpdate, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func getLatestUpdateId() -> Swift.UInt64
    public func getFundingTxo() -> (LightningDevKit.Bindings.OutPoint, [Swift.UInt8])
    public func getOutputsToWatch() -> [([Swift.UInt8], [(Swift.UInt32, [Swift.UInt8])])]
    public func loadOutputsToWatch(filter: LightningDevKit.Bindings.Filter)
    public func getAndClearPendingMonitorEvents() -> [LightningDevKit.Bindings.MonitorEvent]
    public func getAndClearPendingEvents() -> [LightningDevKit.Bindings.Event]
    public func getCounterpartyNodeId() -> [Swift.UInt8]?
    public func getLatestHolderCommitmentTxn(logger: LightningDevKit.Bindings.Logger) -> [[Swift.UInt8]]
    public func blockConnected(header: [Swift.UInt8], txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [([Swift.UInt8], [(Swift.UInt32, LightningDevKit.Bindings.TxOut)])]
    public func blockDisconnected(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func transactionsConfirmed(header: [Swift.UInt8], txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [([Swift.UInt8], [(Swift.UInt32, LightningDevKit.Bindings.TxOut)])]
    public func transactionUnconfirmed(txid: [Swift.UInt8], broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func bestBlockUpdated(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, feeEstimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [([Swift.UInt8], [(Swift.UInt32, LightningDevKit.Bindings.TxOut)])]
    public func getRelevantTxids() -> [([Swift.UInt8], [Swift.UInt8])]
    public func currentBestBlock() -> LightningDevKit.Bindings.BestBlock
    public func getClaimableBalances() -> [LightningDevKit.Bindings.Balance]
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias CommitmentTransaction = LightningDevKit.Bindings.CommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public func commitmentNumber() -> Swift.UInt64
    public func toBroadcasterValueSat() -> Swift.UInt64
    public func toCountersignatoryValueSat() -> Swift.UInt64
    public func feeratePerKw() -> Swift.UInt32
    public func trust() -> LightningDevKit.Bindings.TrustedCommitmentTransaction
    public func verify(channelParameters: LightningDevKit.Bindings.DirectedChannelTransactionParameters, broadcasterKeys: LightningDevKit.Bindings.ChannelPublicKeys, countersignatoryKeys: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_QueryShortChannelIdsDecodeErrorZ = LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_QueryShortChannelIdsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.QueryShortChannelIds?
    @objc deinit
  }
}
public typealias ErrorMessage = LightningDevKit.Bindings.ErrorMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErrorMessage : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getData() -> Swift.String
    public func setData(val: Swift.String)
    public init(channelIdArg: [Swift.UInt8], dataArg: Swift.String)
    public class func eq(a: LightningDevKit.Bindings.ErrorMessage, b: LightningDevKit.Bindings.ErrorMessage) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias LockableScore = LightningDevKit.Bindings.LockableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class LockableScore : LightningDevKit.NativeTraitWrapper {
    public init()
    open func lock() -> LightningDevKit.Bindings.Score
    @objc deinit
  }
}
public typealias Result_boolLightningErrorZ = LightningDevKit.Bindings.Result_boolLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_boolLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: Swift.Bool) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public func getValue() -> Swift.Bool?
    @objc deinit
  }
}
public typealias Result_NetAddressDecodeErrorZ = LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NetAddressDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.NetAddress) -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetAddress?
    @objc deinit
  }
}
public typealias SiPrefix = LightningDevKit.Bindings.SiPrefix
extension LightningDevKit.Bindings {
  public enum SiPrefix {
    case Milli
    case Micro
    case Nano
    case Pico
    public static func == (a: LightningDevKit.Bindings.SiPrefix, b: LightningDevKit.Bindings.SiPrefix) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias Result_InvoiceSignOrCreationErrorZ = LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceSignOrCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.SignOrCreationError) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SignOrCreationError?
    public func getValue() -> LightningDevKit.Bindings.Invoice?
    @objc deinit
  }
}
public typealias LightningError = LightningDevKit.Bindings.LightningError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class LightningError : LightningDevKit.NativeTypeWrapper {
    public func getErr() -> Swift.String
    public func setErr(val: Swift.String)
    public func getAction() -> LightningDevKit.Bindings.ErrorAction
    public func setAction(val: LightningDevKit.Bindings.ErrorAction)
    public init(errArg: Swift.String, actionArg: LightningDevKit.Bindings.ErrorAction)
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
extension LightningDevKit.Bindings {
  public class func getLDKSwiftBindingsSerializationHash() -> Swift.String
  public class func getLDKSwiftBindingsVersion() -> Swift.String
  public class func getLDKSwiftBindingsCommitHash() -> Swift.String
}
public typealias Result_InvoiceParseOrSemanticErrorZ = LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceParseOrSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.ParseOrSemanticError) -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseOrSemanticError?
    public func getValue() -> LightningDevKit.Bindings.Invoice?
    @objc deinit
  }
}
public typealias Result_ClosingSignedDecodeErrorZ = LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClosingSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.ClosingSigned) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosingSigned?
    @objc deinit
  }
}
public typealias RoutingMessageHandler = LightningDevKit.Bindings.RoutingMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class RoutingMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init(MessageSendEventsProvider: LightningDevKit.Bindings.MessageSendEventsProvider)
    open func handleNodeAnnouncement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func handleChannelAnnouncement(msg: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func handleChannelUpdate(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func getNextChannelAnnouncement(startingPoint: Swift.UInt64) -> (LightningDevKit.Bindings.ChannelAnnouncement, LightningDevKit.Bindings.ChannelUpdate, LightningDevKit.Bindings.ChannelUpdate)?
    open func getNextNodeAnnouncement(startingPoint: [Swift.UInt8]) -> LightningDevKit.Bindings.NodeAnnouncement
    open func peerConnected(theirNodeId: [Swift.UInt8], initArgument: LightningDevKit.Bindings.BindingsInit) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func handleReplyChannelRange(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handleReplyShortChannelIdsEnd(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handleQueryChannelRange(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handleQueryShortChannelIds(theirNodeId: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func providedNodeFeatures() -> LightningDevKit.Bindings.NodeFeatures
    open func providedInitFeatures(theirNodeId: [Swift.UInt8]) -> LightningDevKit.Bindings.InitFeatures
    public func getMessageSendEventsProvider() -> LightningDevKit.Bindings.MessageSendEventsProvider
    @objc deinit
  }
}
public typealias Result_GossipTimestampFilterDecodeErrorZ = LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_GossipTimestampFilterDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.GossipTimestampFilter) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.GossipTimestampFilter?
    @objc deinit
  }
}
public typealias InvoicePayer = LightningDevKit.Bindings.InvoicePayer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoicePayer : LightningDevKit.NativeTypeWrapper {
    public init(payer: LightningDevKit.Bindings.Payer, router: LightningDevKit.Bindings.Router, logger: LightningDevKit.Bindings.Logger, eventHandler: LightningDevKit.Bindings.EventHandler, retry: LightningDevKit.Bindings.Retry)
    public func payInvoice(invoice: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func payInvoiceWithId(invoice: LightningDevKit.Bindings.Invoice, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentErrorZ
    public func payZeroValueInvoice(invoice: LightningDevKit.Bindings.Invoice, amountMsats: Swift.UInt64) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func payZeroValueInvoiceWithId(invoice: LightningDevKit.Bindings.Invoice, amountMsats: Swift.UInt64, paymentId: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentErrorZ
    public func payPubkey(pubkey: [Swift.UInt8], paymentPreimage: [Swift.UInt8], amountMsats: Swift.UInt64, finalCltvExpiryDelta: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func payPubkeyWithId(pubkey: [Swift.UInt8], paymentPreimage: [Swift.UInt8], paymentId: [Swift.UInt8], amountMsats: Swift.UInt64, finalCltvExpiryDelta: Swift.UInt32) -> LightningDevKit.Bindings.Result_NonePaymentErrorZ
    public func removeCachedPayment(paymentHash: [Swift.UInt8])
    public func asEventHandler() -> LightningDevKit.Bindings.EventHandler
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias Confirm = LightningDevKit.Bindings.Confirm
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Confirm : LightningDevKit.NativeTraitWrapper {
    public init()
    open func transactionsConfirmed(header: [Swift.UInt8]?, txdata: [(Swift.UInt, [Swift.UInt8])], height: Swift.UInt32)
    open func transactionUnconfirmed(txid: [Swift.UInt8]?)
    open func bestBlockUpdated(header: [Swift.UInt8]?, height: Swift.UInt32)
    open func getRelevantTxids() -> [([Swift.UInt8], [Swift.UInt8])]
    @objc deinit
  }
}
public typealias Result_UpdateFailMalformedHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFailMalformedHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public class func initWithOk(o: LightningDevKit.Bindings.UpdateFailMalformedHTLC) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public class func initWithErr(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFailMalformedHTLC?
    @objc deinit
  }
}
public typealias ChannelReestablish = LightningDevKit.Bindings.ChannelReestablish
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelReestablish : LightningDevKit.NativeTypeWrapper {
    public func getChannelId() -> [Swift.UInt8]?
    public func setChannelId(val: [Swift.UInt8])
    public func getNextLocalCommitmentNumber() -> Swift.UInt64
    public func setNextLocalCommitmentNumber(val: Swift.UInt64)
    public func getNextRemoteCommitmentNumber() -> Swift.UInt64
    public func setNextRemoteCommitmentNumber(val: Swift.UInt64)
    public class func eq(a: LightningDevKit.Bindings.ChannelReestablish, b: LightningDevKit.Bindings.ChannelReestablish) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public func isOwned() -> Swift.Bool
    @objc deinit
  }
}
public typealias APIError = LightningDevKit.Bindings.APIError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class APIError : LightningDevKit.NativeTypeWrapper {
    public enum APIErrorType {
      case APIMisuseError
      case FeeRateTooHigh
      case InvalidRoute
      case ChannelUnavailable
      case MonitorUpdateInProgress
      case IncompatibleShutdownScript
      public static func == (a: LightningDevKit.Bindings.APIError.APIErrorType, b: LightningDevKit.Bindings.APIError.APIErrorType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.APIError.APIErrorType
    public class func initWithApimisuseError(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func initWithFeeRateTooHigh(err: Swift.String, feerate: Swift.UInt32) -> LightningDevKit.Bindings.APIError
    public class func initWithInvalidRoute(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func initWithChannelUnavailable(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func initWithMonitorUpdateInProgress() -> LightningDevKit.Bindings.APIError
    public class func initWithIncompatibleShutdownScript(script: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.APIError
    public class func eq(a: LightningDevKit.Bindings.APIError, b: LightningDevKit.Bindings.APIError) -> Swift.Bool
    public func getValueAsApiMisuseError() -> LightningDevKit.Bindings.APIError.APIMisuseError?
    public func getValueAsFeeRateTooHigh() -> LightningDevKit.Bindings.APIError.FeeRateTooHigh?
    public func getValueAsInvalidRoute() -> LightningDevKit.Bindings.APIError.InvalidRoute?
    public func getValueAsChannelUnavailable() -> LightningDevKit.Bindings.APIError.ChannelUnavailable?
    public func getValueAsIncompatibleShutdownScript() -> LightningDevKit.Bindings.APIError.IncompatibleShutdownScript?
    @objc deinit
    @_hasMissingDesignatedInitializers public class APIMisuseError : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class FeeRateTooHigh : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      public func getFeerate() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class InvalidRoute : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelUnavailable : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class IncompatibleShutdownScript : LightningDevKit.NativeTypeWrapper {
      public func getScript() -> LightningDevKit.Bindings.ShutdownScript
      @objc deinit
    }
  }
}
extension LightningDevKit.Bindings.PaymentError.PaymentErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentError.PaymentErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Destination.DestinationType : Swift.Equatable {}
extension LightningDevKit.Bindings.Destination.DestinationType : Swift.Hashable {}
extension LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType : Swift.Equatable {}
extension LightningDevKit.Bindings.HTLCDestination.HTLCDestinationType : Swift.Hashable {}
extension LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Currency : Swift.Equatable {}
extension LightningDevKit.Bindings.Currency : Swift.Hashable {}
extension LightningDevKit.Bindings.ConfirmationTarget : Swift.Equatable {}
extension LightningDevKit.Bindings.ConfirmationTarget : Swift.Hashable {}
extension LightningDevKit.Bindings.Fallback.FallbackType : Swift.Equatable {}
extension LightningDevKit.Bindings.Fallback.FallbackType : Swift.Hashable {}
extension LightningDevKit.Bindings.CreationError : Swift.Equatable {}
extension LightningDevKit.Bindings.CreationError : Swift.Hashable {}
extension LightningDevKit.Bindings.Secp256k1Error : Swift.Equatable {}
extension LightningDevKit.Bindings.Secp256k1Error : Swift.Hashable {}
extension LightningDevKit.Bindings.SemanticError : Swift.Equatable {}
extension LightningDevKit.Bindings.SemanticError : Swift.Hashable {}
extension LightningDevKit.Bindings.ClosureReason.ClosureReasonType : Swift.Equatable {}
extension LightningDevKit.Bindings.ClosureReason.ClosureReasonType : Swift.Hashable {}
extension LightningDevKit.Bindings.MonitorEvent.MonitorEventType : Swift.Equatable {}
extension LightningDevKit.Bindings.MonitorEvent.MonitorEventType : Swift.Hashable {}
extension LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Event.EventType : Swift.Equatable {}
extension LightningDevKit.Bindings.Event.EventType : Swift.Hashable {}
extension LightningDevKit.Bindings.SendError.SendErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.SendError.SendErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeType : Swift.Hashable {}
extension LightningDevKit.Bindings.ParseError.ParseErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.ParseError.ParseErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.ChannelMonitorUpdateStatus : Swift.Equatable {}
extension LightningDevKit.Bindings.ChannelMonitorUpdateStatus : Swift.Hashable {}
extension LightningDevKit.Bindings.Bech32Error.Bech32ErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.Bech32Error.Bech32ErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Option_NoneZ : Swift.Equatable {}
extension LightningDevKit.Bindings.Option_NoneZ : Swift.Hashable {}
extension LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType : Swift.Equatable {}
extension LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateType : Swift.Hashable {}
extension LightningDevKit.Bindings.OnionMessageContents.OnionMessageContentsType : Swift.Equatable {}
extension LightningDevKit.Bindings.OnionMessageContents.OnionMessageContentsType : Swift.Hashable {}
extension LightningDevKit.Bindings.IOError : Swift.Equatable {}
extension LightningDevKit.Bindings.IOError : Swift.Hashable {}
extension LightningDevKit.Bindings.AccessError : Swift.Equatable {}
extension LightningDevKit.Bindings.AccessError : Swift.Hashable {}
extension LightningDevKit.Bindings.Level : Swift.Equatable {}
extension LightningDevKit.Bindings.Level : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureType : Swift.Hashable {}
extension LightningDevKit.Bindings.DecodeError.DecodeErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.DecodeError.DecodeErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.Equatable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.Hashable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.RawRepresentable {}
extension LightningDevKit.Bindings.ErrorAction.ErrorActionType : Swift.Equatable {}
extension LightningDevKit.Bindings.ErrorAction.ErrorActionType : Swift.Hashable {}
extension LightningDevKit.Bindings.GossipSync.GossipSyncType : Swift.Equatable {}
extension LightningDevKit.Bindings.GossipSync.GossipSyncType : Swift.Hashable {}
extension LightningDevKit.Bindings.Balance.BalanceType : Swift.Equatable {}
extension LightningDevKit.Bindings.Balance.BalanceType : Swift.Hashable {}
extension LightningDevKit.Bindings.NetAddress.NetAddressType : Swift.Equatable {}
extension LightningDevKit.Bindings.NetAddress.NetAddressType : Swift.Hashable {}
extension LightningDevKit.Bindings.HTLCClaim : Swift.Equatable {}
extension LightningDevKit.Bindings.HTLCClaim : Swift.Hashable {}
extension LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType : Swift.Equatable {}
extension LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityType : Swift.Hashable {}
extension LightningDevKit.Bindings.Retry.RetryType : Swift.Equatable {}
extension LightningDevKit.Bindings.Retry.RetryType : Swift.Hashable {}
extension LightningDevKit.Bindings.Network : Swift.Equatable {}
extension LightningDevKit.Bindings.Network : Swift.Hashable {}
extension LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorType : Swift.Hashable {}
extension LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType : Swift.Equatable {}
extension LightningDevKit.Bindings.MessageSendEvent.MessageSendEventType : Swift.Hashable {}
extension LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType : Swift.Equatable {}
extension LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorType : Swift.Hashable {}
extension LightningDevKit.Bindings.Recipient : Swift.Equatable {}
extension LightningDevKit.Bindings.Recipient : Swift.Hashable {}
extension LightningDevKit.Bindings.SiPrefix : Swift.Equatable {}
extension LightningDevKit.Bindings.SiPrefix : Swift.Hashable {}
extension LightningDevKit.Bindings.APIError.APIErrorType : Swift.Equatable {}
extension LightningDevKit.Bindings.APIError.APIErrorType : Swift.Hashable {}
