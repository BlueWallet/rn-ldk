// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LightningDevKit
import Foundation
@_exported import LightningDevKit
import Swift
import _Concurrency
public typealias BroadcasterInterface = LightningDevKit.Bindings.BroadcasterInterface
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BroadcasterInterface : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKBroadcasterInterface)
    public init(pointer: LightningDevKit.LDKBroadcasterInterface, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func broadcast_transaction(tx: [Swift.UInt8])
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedBroadcasterInterface : LightningDevKit.BroadcasterInterface {
  override public func broadcast_transaction(tx: [Swift.UInt8])
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKBroadcasterInterface)
  override public init(pointer: LightningDevKit.LDKBroadcasterInterface, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias RouteHint = LightningDevKit.Bindings.RouteHint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHint : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKRouteHint)
    public init(pointer: LightningDevKit.LDKRouteHint, anchor: LightningDevKit.NativeTypeWrapper)
    convenience public init(a_arg: [LightningDevKit.Bindings.RouteHintHop])
    public func get_a() -> [LightningDevKit.Bindings.RouteHintHop]
    public func set_a(val: [LightningDevKit.Bindings.RouteHintHop])
    public func clone() -> LightningDevKit.Bindings.RouteHint
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHint, b: LightningDevKit.Bindings.RouteHint) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    @objc deinit
  }
}
public typealias Filter = LightningDevKit.Bindings.Filter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Filter : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKFilter)
    public init(pointer: LightningDevKit.LDKFilter, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func register_tx(txid: [Swift.UInt8]?, script_pubkey: [Swift.UInt8])
    open func register_output(output: LightningDevKit.Bindings.WatchedOutput) -> LightningDevKit.Bindings.Option_C2Tuple_usizeTransactionZZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedFilter : LightningDevKit.Filter {
  override public func register_tx(txid: [Swift.UInt8]?, script_pubkey: [Swift.UInt8])
  override public func register_output(output: LightningDevKit.WatchedOutput) -> LightningDevKit.Option_C2Tuple_usizeTransactionZZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKFilter)
  override public init(pointer: LightningDevKit.LDKFilter, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias ChannelFeatures = LightningDevKit.Bindings.ChannelFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelFeatures : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKChannelFeatures)
    public init(pointer: LightningDevKit.LDKChannelFeatures, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.ChannelFeatures, b: LightningDevKit.Bindings.ChannelFeatures) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.ChannelFeatures
    public func requires_unknown_bits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_InitDecodeErrorZ = LightningDevKit.Bindings.Result_InitDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InitDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InitDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InitDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Init?
    public class func ok(o: LightningDevKit.Bindings.Init) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
  }
}
public typealias MinFinalCltvExpiry = LightningDevKit.Bindings.MinFinalCltvExpiry
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MinFinalCltvExpiry : LightningDevKit.NativeTypeWrapper {
    public init(a_arg: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKMinFinalCltvExpiry)
    public init(pointer: LightningDevKit.LDKMinFinalCltvExpiry, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_a() -> Swift.UInt64
    public func set_a(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.MinFinalCltvExpiry
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.MinFinalCltvExpiry, b: LightningDevKit.Bindings.MinFinalCltvExpiry) -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_InvoiceFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InvoiceFeaturesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InvoiceFeaturesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InvoiceFeatures?
    public class func ok(o: LightningDevKit.Bindings.InvoiceFeatures) -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
  }
}
public typealias Result_RecoverableSignatureNoneZ = LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RecoverableSignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RecoverableSignatureNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_RecoverableSignatureNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
  }
}
public typealias Result_HolderCommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HolderCommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_HolderCommitmentTransactionDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_HolderCommitmentTransactionDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HolderCommitmentTransaction?
    public class func ok(o: LightningDevKit.Bindings.HolderCommitmentTransaction) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
  }
}
public typealias SpendableOutputDescriptor = LightningDevKit.Bindings.SpendableOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SpendableOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKSpendableOutputDescriptor)
    public init(pointer: LightningDevKit.LDKSpendableOutputDescriptor, anchor: LightningDevKit.NativeTypeWrapper)
    public enum SpendableOutputDescriptorValueType {
      case StaticOutput, DelayedPaymentOutput, StaticPaymentOutput
      public static func == (a: LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorValueType, b: LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorValueType?
    public func getValueAsStaticOutput() -> LightningDevKit.Bindings.SpendableOutputDescriptor.StaticOutput?
    public func getValueAsDelayedPaymentOutput() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor?
    public func getValueAsStaticPaymentOutput() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func static_output(outpoint: LightningDevKit.Bindings.OutPoint, output: LightningDevKit.LDKTxOut) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func delayed_payment_output(a: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public class func static_payment_output(a: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.SpendableOutputDescriptor
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    @_hasMissingDesignatedInitializers public class StaticOutput : LightningDevKit.NativeTypeWrapper {
      public func getOutpoint() -> LightningDevKit.Bindings.OutPoint?
      public func getOutput() -> LightningDevKit.Bindings.TxOut
      @objc deinit
    }
  }
}
public typealias CounterpartyChannelTransactionParameters = LightningDevKit.Bindings.CounterpartyChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public init(pubkeys_arg: LightningDevKit.Bindings.ChannelPublicKeys, selected_contest_delay_arg: Swift.UInt16)
    public init(pointer: LightningDevKit.LDKCounterpartyChannelTransactionParameters)
    public init(pointer: LightningDevKit.LDKCounterpartyChannelTransactionParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_pubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func set_pubkeys(val: LightningDevKit.Bindings.ChannelPublicKeys)
    public func get_selected_contest_delay() -> Swift.UInt16
    public func set_selected_contest_delay(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    @objc deinit
  }
}
public typealias Description = LightningDevKit.Bindings.Description
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Description : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKDescription)
    public init(pointer: LightningDevKit.LDKDescription, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.Description
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Description, b: LightningDevKit.Bindings.Description) -> Swift.Bool
    public class func new(description: Swift.String) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public func into_inner() -> Swift.String
    @objc deinit
  }
}
public typealias Result_ChannelPublicKeysDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelPublicKeysDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelPublicKeysDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelPublicKeysDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelPublicKeys?
    public class func ok(o: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
  }
}
@_hasMissingDesignatedInitializers public class ChannelManagerConstructor : LightningDevKit.NativeTypeWrapper {
  final public let channelManager: LightningDevKit.ChannelManager
  final public let channel_manager_latest_block_hash: [Swift.UInt8]?
  public var net_graph: LightningDevKit.NetworkGraph? {
    get
  }
  public var payer: LightningDevKit.InvoicePayer? {
    get
  }
  final public let peerManager: LightningDevKit.PeerManager
  public var channel_monitors: [(LightningDevKit.ChannelMonitor, [Swift.UInt8])] {
    get
  }
  public init(channel_manager_serialized: [Swift.UInt8], channel_monitors_serialized: [[Swift.UInt8]], keys_interface: LightningDevKit.KeysInterface, fee_estimator: LightningDevKit.FeeEstimator, chain_monitor: LightningDevKit.ChainMonitor, filter: LightningDevKit.Filter?, net_graph_serialized: [Swift.UInt8]?, tx_broadcaster: LightningDevKit.BroadcasterInterface, logger: LightningDevKit.Logger, enableP2PGossip: Swift.Bool = false) throws
  public init(network: LightningDevKit.LDKNetwork, config: LightningDevKit.UserConfig, current_blockchain_tip_hash: [Swift.UInt8], current_blockchain_tip_height: Swift.UInt32, keys_interface: LightningDevKit.KeysInterface, fee_estimator: LightningDevKit.FeeEstimator, chain_monitor: LightningDevKit.ChainMonitor, net_graph: LightningDevKit.NetworkGraph?, tx_broadcaster: LightningDevKit.BroadcasterInterface, logger: LightningDevKit.Logger, enableP2PGossip: Swift.Bool = false)
  public func chain_sync_completed(persister: LightningDevKit.ExtendedChannelManagerPersister, scorer: LightningDevKit.MultiThreadedLockableScore?)
  public func interrupt()
  public func getTCPPeerHandler() -> LightningDevKit.TCPPeerHandler
  @objc deinit
}
public protocol ExtendedChannelManagerPersister : LightningDevKit.Bindings.Persister {
  func handle_event(event: LightningDevKit.Event)
}
@_hasMissingDesignatedInitializers public class TCPPeerHandler {
  public func bind(address: Swift.String, port: Swift.UInt16) -> Swift.Bool
  public func connect(address: Swift.String, port: Swift.UInt16, theirNodeId: [Swift.UInt8]) -> Swift.Bool
  @objc deinit
}
public typealias FixedPenaltyScorer = LightningDevKit.Bindings.FixedPenaltyScorer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FixedPenaltyScorer : LightningDevKit.NativeTypeWrapper {
    public init(penalty_msat: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKFixedPenaltyScorer)
    public init(pointer: LightningDevKit.LDKFixedPenaltyScorer, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.FixedPenaltyScorer
    public func as_Score() -> LightningDevKit.NativelyImplementedScore
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: Swift.UInt64) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_PongDecodeErrorZ = LightningDevKit.Bindings.Result_PongDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PongDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PongDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PongDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Pong?
    public class func ok(o: LightningDevKit.Bindings.Pong) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
  }
}
public typealias Result_TxOutAccessErrorZ = LightningDevKit.Bindings.Result_TxOutAccessErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxOutAccessErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_TxOutAccessErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_TxOutAccessErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKAccessError?
    public func getValue() -> LightningDevKit.Bindings.TxOut?
    public class func ok(o: LightningDevKit.LDKTxOut) -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
    public class func err(e: LightningDevKit.LDKAccessError) -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
  }
}
public typealias Result_UpdateFailMalformedHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFailMalformedHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFailMalformedHTLC?
    public class func ok(o: LightningDevKit.Bindings.UpdateFailMalformedHTLC) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
  }
}
public typealias Option_TypeZ = LightningDevKit.Bindings.Option_TypeZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_TypeZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.BindingsType?)
    public init(pointer: LightningDevKit.LDKCOption_TypeZ)
    public init(pointer: LightningDevKit.LDKCOption_TypeZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.BindingsType?
    public class func some(o: LightningDevKit.Bindings.BindingsType) -> LightningDevKit.Bindings.Option_TypeZ
    public class func none() -> LightningDevKit.Bindings.Option_TypeZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_TypeZ
  }
}
public typealias ChannelUsage = LightningDevKit.Bindings.ChannelUsage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUsage : LightningDevKit.NativeTypeWrapper {
    public init(amount_msat_arg: Swift.UInt64, inflight_htlc_msat_arg: Swift.UInt64, effective_capacity_arg: LightningDevKit.Bindings.EffectiveCapacity)
    public init(pointer: LightningDevKit.LDKChannelUsage)
    public init(pointer: LightningDevKit.LDKChannelUsage, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_amount_msat() -> Swift.UInt64
    public func set_amount_msat(val: Swift.UInt64)
    public func get_inflight_htlc_msat() -> Swift.UInt64
    public func set_inflight_htlc_msat(val: Swift.UInt64)
    public func get_effective_capacity() -> LightningDevKit.Bindings.EffectiveCapacity
    public func set_effective_capacity(val: LightningDevKit.Bindings.EffectiveCapacity)
    public func clone() -> LightningDevKit.Bindings.ChannelUsage
    @objc deinit
  }
}
public typealias Result_ShutdownDecodeErrorZ = LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ShutdownDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ShutdownDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Shutdown?
    public class func ok(o: LightningDevKit.Bindings.Shutdown) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
  }
}
public typealias Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ = LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentIdZ?
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentIdZ) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    public class func err(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
  }
}
public typealias C2Tuple_BlockHashChannelManagerZ = LightningDevKit.Bindings.C2Tuple_BlockHashChannelManagerZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_BlockHashChannelManagerZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_BlockHashChannelManagerZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_BlockHashChannelManagerZ, anchor: LightningDevKit.NativeTypeWrapper)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func new(a: [Swift.UInt8], b: LightningDevKit.Bindings.ChannelManager) -> LightningDevKit.Bindings.C2Tuple_BlockHashChannelManagerZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> LightningDevKit.Bindings.ChannelManager
  }
}
public typealias Result_COption_ClosureReasonZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_ClosureReasonZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_COption_ClosureReasonZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_COption_ClosureReasonZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Option_ClosureReasonZ?
    public class func ok(o: LightningDevKit.Bindings.Option_ClosureReasonZ) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
  }
}
public typealias UnsignedNodeAnnouncement = LightningDevKit.Bindings.UnsignedNodeAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedNodeAnnouncement : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKUnsignedNodeAnnouncement)
    public init(pointer: LightningDevKit.LDKUnsignedNodeAnnouncement, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_features() -> LightningDevKit.Bindings.NodeFeatures
    public func set_features(val: LightningDevKit.Bindings.NodeFeatures)
    public func get_timestamp() -> Swift.UInt32
    public func set_timestamp(val: Swift.UInt32)
    public func get_node_id() -> [Swift.UInt8]
    public func set_node_id(val: [Swift.UInt8])
    public func get_rgb() -> [Swift.UInt8]
    public func set_rgb(val: [Swift.UInt8])
    public func get_alias() -> [Swift.UInt8]
    public func set_alias(val: [Swift.UInt8])
    public func get_addresses() -> [LightningDevKit.Bindings.NetAddress]
    public func set_addresses(val: [LightningDevKit.Bindings.NetAddress])
    public func clone() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    @objc deinit
  }
}
public typealias Option_u64Z = LightningDevKit.Bindings.Option_u64Z
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_u64Z : LightningDevKit.NativeTypeWrapper {
    public init(value: Swift.UInt64?)
    public init(pointer: LightningDevKit.LDKCOption_u64Z)
    public init(pointer: LightningDevKit.LDKCOption_u64Z, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> Swift.UInt64?
    public class func some(o: Swift.UInt64) -> LightningDevKit.Bindings.Option_u64Z
    public class func none() -> LightningDevKit.Bindings.Option_u64Z
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_u64Z
  }
}
public typealias MessageSendEventsProvider = LightningDevKit.Bindings.MessageSendEventsProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class MessageSendEventsProvider : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKMessageSendEventsProvider)
    public init(pointer: LightningDevKit.LDKMessageSendEventsProvider, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func get_and_clear_pending_msg_events() -> [LightningDevKit.LDKMessageSendEvent]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedMessageSendEventsProvider : LightningDevKit.MessageSendEventsProvider {
  override public func get_and_clear_pending_msg_events() -> [LightningDevKit.LDKMessageSendEvent]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKMessageSendEventsProvider)
  override public init(pointer: LightningDevKit.LDKMessageSendEventsProvider, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias ProbabilisticScorer = LightningDevKit.Bindings.ProbabilisticScorer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScorer : LightningDevKit.NativeTypeWrapper {
    public init(params: LightningDevKit.Bindings.ProbabilisticScoringParameters, network_graph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger)
    public init(pointer: LightningDevKit.LDKProbabilisticScorer)
    public init(pointer: LightningDevKit.LDKProbabilisticScorer, anchor: LightningDevKit.NativeTypeWrapper)
    public func debug_log_liquidity_stats()
    public func estimated_channel_liquidity_range(scid: Swift.UInt64, target: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.Option_C2Tuple_u64u64ZZ
    public func add_banned(node_id: LightningDevKit.Bindings.NodeId)
    public func remove_banned(node_id: LightningDevKit.Bindings.NodeId)
    public func set_manual_penalty(node_id: LightningDevKit.Bindings.NodeId, penalty: Swift.UInt64)
    public func remove_manual_penalty(node_id: LightningDevKit.Bindings.NodeId)
    public func clear_manual_penalties()
    public func as_Score() -> LightningDevKit.NativelyImplementedScore
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg_a: LightningDevKit.Bindings.ProbabilisticScoringParameters, arg_b: LightningDevKit.Bindings.NetworkGraph, arg_c: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    @objc deinit
  }
}
public typealias Option_ClosureReasonZ = LightningDevKit.Bindings.Option_ClosureReasonZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_ClosureReasonZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.ClosureReason?)
    public init(pointer: LightningDevKit.LDKCOption_ClosureReasonZ)
    public init(pointer: LightningDevKit.LDKCOption_ClosureReasonZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.ClosureReason?
    public class func some(o: LightningDevKit.Bindings.ClosureReason) -> LightningDevKit.Bindings.Option_ClosureReasonZ
    public class func none() -> LightningDevKit.Bindings.Option_ClosureReasonZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_ClosureReasonZ
  }
}
public typealias Result_RouteDecodeErrorZ = LightningDevKit.Bindings.Result_RouteDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RouteDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RouteDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Route?
    public class func ok(o: LightningDevKit.Bindings.Route) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
  }
}
public typealias C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ = LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ
    public class func new(a: [Swift.UInt8], b: [LightningDevKit.Bindings.C2Tuple_u32ScriptZ]) -> LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> [LightningDevKit.Bindings.C2Tuple_u32ScriptZ]
  }
}
public typealias Persist = LightningDevKit.Bindings.Persist
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Persist : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKPersist)
    public init(pointer: LightningDevKit.LDKPersist, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func persist_new_channel(channel_id: LightningDevKit.Bindings.OutPoint, data: LightningDevKit.Bindings.ChannelMonitor, update_id: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
    open func update_persisted_channel(channel_id: LightningDevKit.Bindings.OutPoint, update: LightningDevKit.Bindings.ChannelMonitorUpdate, data: LightningDevKit.Bindings.ChannelMonitor, update_id: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedPersist : LightningDevKit.Persist {
  override public func persist_new_channel(channel_id: LightningDevKit.OutPoint, data: LightningDevKit.ChannelMonitor, update_id: LightningDevKit.MonitorUpdateId) -> LightningDevKit.Result_NoneChannelMonitorUpdateErrZ
  override public func update_persisted_channel(channel_id: LightningDevKit.OutPoint, update: LightningDevKit.ChannelMonitorUpdate, data: LightningDevKit.ChannelMonitor, update_id: LightningDevKit.MonitorUpdateId) -> LightningDevKit.Result_NoneChannelMonitorUpdateErrZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKPersist)
  override public init(pointer: LightningDevKit.LDKPersist, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias MultiThreadedLockableScore = LightningDevKit.Bindings.MultiThreadedLockableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MultiThreadedLockableScore : LightningDevKit.NativeTypeWrapper {
    public init(score: LightningDevKit.Bindings.Score)
    public init(pointer: LightningDevKit.LDKMultiThreadedLockableScore)
    public init(pointer: LightningDevKit.LDKMultiThreadedLockableScore, anchor: LightningDevKit.NativeTypeWrapper)
    public func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias Result_SecretKeyErrorZ = LightningDevKit.Bindings.Result_SecretKeyErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SecretKeyErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SecretKeyErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_SecretKeyErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSecp256k1Error?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SecretKeyErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKSecp256k1Error) -> LightningDevKit.Bindings.Result_SecretKeyErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SecretKeyErrorZ
  }
}
public typealias Result_PayeePubKeyErrorZ = LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PayeePubKeyErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PayeePubKeyErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PayeePubKeyErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSecp256k1Error?
    public func getValue() -> LightningDevKit.Bindings.PayeePubKey?
    public class func ok(o: LightningDevKit.Bindings.PayeePubKey) -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKSecp256k1Error) -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
  }
}
public typealias Logger = LightningDevKit.Bindings.Logger
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Logger : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKLogger)
    public init(pointer: LightningDevKit.LDKLogger, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func log(record: LightningDevKit.Bindings.Record)
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedLogger : LightningDevKit.Logger {
  override public func log(record: LightningDevKit.Record)
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKLogger)
  override public init(pointer: LightningDevKit.LDKLogger, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Watch = LightningDevKit.Bindings.Watch
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Watch : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKWatch)
    public init(pointer: LightningDevKit.LDKWatch, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func watch_channel(funding_txo: LightningDevKit.Bindings.OutPoint, monitor: LightningDevKit.Bindings.ChannelMonitor) -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
    open func update_channel(funding_txo: LightningDevKit.Bindings.OutPoint, update: LightningDevKit.Bindings.ChannelMonitorUpdate) -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
    open func release_pending_monitor_events() -> [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedWatch : LightningDevKit.Watch {
  override public func watch_channel(funding_txo: LightningDevKit.OutPoint, monitor: LightningDevKit.ChannelMonitor) -> LightningDevKit.Result_NoneChannelMonitorUpdateErrZ
  override public func update_channel(funding_txo: LightningDevKit.OutPoint, update: LightningDevKit.ChannelMonitorUpdate) -> LightningDevKit.Result_NoneChannelMonitorUpdateErrZ
  override public func release_pending_monitor_events() -> [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKWatch)
  override public init(pointer: LightningDevKit.LDKWatch, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias P2PGossipSync = LightningDevKit.Bindings.P2PGossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class P2PGossipSync : LightningDevKit.NativeTypeWrapper {
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(network_graph: LightningDevKit.Bindings.NetworkGraph, chain_access: LightningDevKit.Bindings.Option_AccessZ, logger: LightningDevKit.Bindings.Logger)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKP2PGossipSync)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKP2PGossipSync, anchor: LightningDevKit.NativeTypeWrapper)
    public func add_chain_access(chain_access: LightningDevKit.Bindings.Option_AccessZ)
    public func as_RoutingMessageHandler() -> LightningDevKit.NativelyImplementedRoutingMessageHandler
    public func as_MessageSendEventsProvider() -> LightningDevKit.NativelyImplementedMessageSendEventsProvider
    @objc deinit
  }
}
public typealias Payer = LightningDevKit.Bindings.Payer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Payer : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKPayer)
    public init(pointer: LightningDevKit.LDKPayer, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func node_id() -> [Swift.UInt8]
    open func first_hops() -> [LightningDevKit.LDKChannelDetails]
    open func send_payment(route: LightningDevKit.Bindings.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
    open func send_spontaneous_payment(route: LightningDevKit.Bindings.Route, payment_preimage: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
    open func retry_payment(route: LightningDevKit.Bindings.Route, payment_id: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    open func abandon_payment(payment_id: [Swift.UInt8])
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedPayer : LightningDevKit.Payer {
  override public func node_id() -> [Swift.UInt8]
  override public func first_hops() -> [LightningDevKit.LDKChannelDetails]
  override public func send_payment(route: LightningDevKit.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LightningDevKit.Result_PaymentIdPaymentSendFailureZ
  override public func send_spontaneous_payment(route: LightningDevKit.Route, payment_preimage: [Swift.UInt8]) -> LightningDevKit.Result_PaymentIdPaymentSendFailureZ
  override public func retry_payment(route: LightningDevKit.Route, payment_id: [Swift.UInt8]) -> LightningDevKit.Result_NonePaymentSendFailureZ
  override public func abandon_payment(payment_id: [Swift.UInt8])
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKPayer)
  override public init(pointer: LightningDevKit.LDKPayer, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias ExpandedKey = LightningDevKit.Bindings.ExpandedKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ExpandedKey : LightningDevKit.NativeTypeWrapper {
    public init(key_material: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKExpandedKey)
    public init(pointer: LightningDevKit.LDKExpandedKey, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
  }
}
public typealias Result_PaymentParametersDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentParametersDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentParametersDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentParameters?
    public class func ok(o: LightningDevKit.Bindings.PaymentParameters) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
  }
}
public typealias Sha256 = LightningDevKit.Bindings.Sha256
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Sha256 : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKSha256)
    public init(pointer: LightningDevKit.LDKSha256, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.Sha256
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Sha256, b: LightningDevKit.Bindings.Sha256) -> Swift.Bool
    @objc deinit
  }
}
public typealias Result_PositiveTimestampCreationErrorZ = LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PositiveTimestampCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PositiveTimestampCreationErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PositiveTimestampCreationErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKCreationError?
    public func getValue() -> LightningDevKit.Bindings.PositiveTimestamp?
    public class func ok(o: LightningDevKit.Bindings.PositiveTimestamp) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func err(e: LightningDevKit.LDKCreationError) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
  }
}
public typealias ReadOnlyNetworkGraph = LightningDevKit.Bindings.ReadOnlyNetworkGraph
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReadOnlyNetworkGraph : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKReadOnlyNetworkGraph)
    public init(pointer: LightningDevKit.LDKReadOnlyNetworkGraph, anchor: LightningDevKit.NativeTypeWrapper)
    public func channel(short_channel_id: Swift.UInt64) -> LightningDevKit.Bindings.ChannelInfo
    public func list_channels() -> [Swift.UInt64]
    public func node(node_id: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.NodeInfo
    public func list_nodes() -> [LightningDevKit.Bindings.NodeId]
    public func get_addresses(pubkey: [Swift.UInt8]) -> LightningDevKit.Bindings.Option_CVec_NetAddressZZ
    @objc deinit
  }
}
public typealias UpdateAddHTLC = LightningDevKit.Bindings.UpdateAddHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateAddHTLC : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKUpdateAddHTLC)
    public init(pointer: LightningDevKit.LDKUpdateAddHTLC, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_htlc_id() -> Swift.UInt64
    public func set_htlc_id(val: Swift.UInt64)
    public func get_amount_msat() -> Swift.UInt64
    public func set_amount_msat(val: Swift.UInt64)
    public func get_payment_hash() -> [Swift.UInt8]
    public func set_payment_hash(val: [Swift.UInt8])
    public func get_cltv_expiry() -> Swift.UInt32
    public func set_cltv_expiry(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.UpdateAddHTLC
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_PaymentIdPaymentErrorZ = LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentIdPaymentErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentIdPaymentErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentIdPaymentErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentError?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public class func err(e: LightningDevKit.Bindings.PaymentError) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
  }
}
public typealias PeerManager = LightningDevKit.Bindings.PeerManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeerManager : LightningDevKit.NativeTypeWrapper {
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(message_handler: LightningDevKit.Bindings.MessageHandler, our_node_secret: [Swift.UInt8], ephemeral_random_data: [Swift.UInt8], logger: LightningDevKit.Bindings.Logger, custom_message_handler: LightningDevKit.Bindings.CustomMessageHandler)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKPeerManager)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKPeerManager, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_peer_node_ids() -> [[Swift.UInt8]]
    public func new_outbound_connection(their_node_id: [Swift.UInt8], descriptor: LightningDevKit.Bindings.SocketDescriptor, remote_network_address: LightningDevKit.Bindings.Option_NetAddressZ) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public func new_inbound_connection(descriptor: LightningDevKit.Bindings.SocketDescriptor, remote_network_address: LightningDevKit.Bindings.Option_NetAddressZ) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func write_buffer_space_avail(descriptor: LightningDevKit.Bindings.SocketDescriptor) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public func read_event(peer_descriptor: LightningDevKit.Bindings.SocketDescriptor, data: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public func process_events()
    public func socket_disconnected(descriptor: LightningDevKit.Bindings.SocketDescriptor)
    public func disconnect_by_node_id(node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
    public func disconnect_all_peers()
    public func timer_tick_occurred()
    @objc deinit
  }
}
public typealias Result_RoutingFeesDecodeErrorZ = LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RoutingFeesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RoutingFeesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RoutingFeesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RoutingFees?
    public class func ok(o: LightningDevKit.Bindings.RoutingFees) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
  }
}
public typealias PaymentParameters = LightningDevKit.Bindings.PaymentParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentParameters : LightningDevKit.NativeTypeWrapper {
    public init(payee_pubkey: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKPaymentParameters)
    public init(pointer: LightningDevKit.LDKPaymentParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_payee_pubkey() -> [Swift.UInt8]
    public func set_payee_pubkey(val: [Swift.UInt8])
    public func get_features() -> LightningDevKit.Bindings.InvoiceFeatures
    public func set_features(val: LightningDevKit.Bindings.InvoiceFeatures)
    public func get_route_hints() -> [LightningDevKit.Bindings.RouteHint]
    public func set_route_hints(val: [LightningDevKit.Bindings.RouteHint])
    public func get_expiry_time() -> LightningDevKit.Bindings.Option_u64Z
    public func set_expiry_time(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_max_total_cltv_expiry_delta() -> Swift.UInt32
    public func set_max_total_cltv_expiry_delta(val: Swift.UInt32)
    public func get_max_path_count() -> Swift.UInt8
    public func set_max_path_count(val: Swift.UInt8)
    public func get_max_channel_saturation_power_of_half() -> Swift.UInt8
    public func set_max_channel_saturation_power_of_half(val: Swift.UInt8)
    public func get_previously_failed_channels() -> [Swift.UInt64]
    public func set_previously_failed_channels(val: [Swift.UInt64])
    public func clone() -> LightningDevKit.Bindings.PaymentParameters
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PaymentParameters, b: LightningDevKit.Bindings.PaymentParameters) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ
    @objc deinit
  }
}
public typealias Invoice = LightningDevKit.Bindings.Invoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Invoice : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKInvoice)
    public init(pointer: LightningDevKit.LDKInvoice, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.Invoice, b: LightningDevKit.Bindings.Invoice) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.Invoice
    public func into_signed_raw() -> LightningDevKit.Bindings.SignedRawInvoice
    public func check_signature() -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
    public class func from_signed(signed_invoice: LightningDevKit.Bindings.SignedRawInvoice) -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
    public func timestamp() -> Swift.UInt64
    public func duration_since_epoch() -> Swift.UInt64
    public func payment_hash() -> [Swift.UInt8]
    public func payee_pub_key() -> [Swift.UInt8]
    public func payment_secret() -> [Swift.UInt8]
    public func features() -> LightningDevKit.Bindings.InvoiceFeatures
    public func recover_payee_pub_key() -> [Swift.UInt8]
    public func expiry_time() -> Swift.UInt64
    public func is_expired() -> Swift.Bool
    public func would_expire(at_time: Swift.UInt64) -> Swift.Bool
    public func min_final_cltv_expiry() -> Swift.UInt64
    public func private_routes() -> [LightningDevKit.Bindings.PrivateRoute]
    public func route_hints() -> [LightningDevKit.Bindings.RouteHint]
    public func currency() -> LightningDevKit.LDKCurrency
    public func amount_milli_satoshis() -> LightningDevKit.Bindings.Option_u64Z
    public class func from_str(s: Swift.String) -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
    public func to_str() -> Swift.String
    @objc deinit
  }
}
public typealias SignOrCreationError = LightningDevKit.Bindings.SignOrCreationError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SignOrCreationError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKSignOrCreationError)
    public init(pointer: LightningDevKit.LDKSignOrCreationError, anchor: LightningDevKit.NativeTypeWrapper)
    public enum SignOrCreationErrorValueType {
      case CreationError
      public static func == (a: LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorValueType, b: LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorValueType?
    public func getValueAsCreationError() -> LightningDevKit.LDKCreationError?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.SignOrCreationError
    public class func sign_error() -> LightningDevKit.Bindings.SignOrCreationError
    public class func creation_error(a: LightningDevKit.LDKCreationError) -> LightningDevKit.Bindings.SignOrCreationError
    public class func eq(a: LightningDevKit.Bindings.SignOrCreationError, b: LightningDevKit.Bindings.SignOrCreationError) -> Swift.Bool
    public func to_str() -> Swift.String
  }
}
public typealias Option_EventZ = LightningDevKit.Bindings.Option_EventZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_EventZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.Event?)
    public init(pointer: LightningDevKit.LDKCOption_EventZ)
    public init(pointer: LightningDevKit.LDKCOption_EventZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.Event?
    public class func some(o: LightningDevKit.Bindings.Event) -> LightningDevKit.Bindings.Option_EventZ
    public class func none() -> LightningDevKit.Bindings.Option_EventZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_EventZ
  }
}
public typealias LDKTransactionOutputs = LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
public typealias TransactionOutputs = LightningDevKit.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
public typealias LDKTxid = LightningDevKit.LDKThirtyTwoBytes
public typealias Txid = [Swift.UInt8]
@_hasMissingDesignatedInitializers open class NativeTypeWrapper : Swift.Hashable {
  public static func == (lhs: LightningDevKit.NativeTypeWrapper, rhs: LightningDevKit.NativeTypeWrapper) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NativeTraitWrapper : LightningDevKit.NativeTypeWrapper {
  public func activate() -> Self
  public func activateOnce() -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Bindings {
  public enum PrintSeverity : Swift.UInt {
    case DEBUG
    case WARNING
    case ERROR
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public class func setLogThreshold(severity: LightningDevKit.Bindings.PrintSeverity)
  public class func new_LDKFourBytes(array: [Swift.UInt8]) -> LightningDevKit.LDKFourBytes
  public class func LDKFourBytes_to_array(nativeType: LightningDevKit.LDKFourBytes) -> [Swift.UInt8]
  public class func new_LDKPublicKey(array: [Swift.UInt8]) -> LightningDevKit.LDKPublicKey
  public class func LDKPublicKey_to_array(nativeType: LightningDevKit.LDKPublicKey) -> [Swift.UInt8]
  public class func new_LDKRecoverableSignature(array: [Swift.UInt8]) -> LightningDevKit.LDKRecoverableSignature
  public class func LDKRecoverableSignature_to_array(nativeType: LightningDevKit.LDKRecoverableSignature) -> [Swift.UInt8]
  public class func new_LDKSecretKey(array: [Swift.UInt8]) -> LightningDevKit.LDKSecretKey
  public class func LDKSecretKey_to_array(nativeType: LightningDevKit.LDKSecretKey) -> [Swift.UInt8]
  public class func new_LDKSignature(array: [Swift.UInt8]) -> LightningDevKit.LDKSignature
  public class func LDKSignature_to_array(nativeType: LightningDevKit.LDKSignature) -> [Swift.UInt8]
  public class func new_LDKSixteenBytes(array: [Swift.UInt8]) -> LightningDevKit.LDKSixteenBytes
  public class func LDKSixteenBytes_to_array(nativeType: LightningDevKit.LDKSixteenBytes) -> [Swift.UInt8]
  public class func new_LDKThirtyTwoBytes(array: [Swift.UInt8]) -> LightningDevKit.LDKThirtyTwoBytes
  public class func LDKThirtyTwoBytes_to_array(nativeType: LightningDevKit.LDKThirtyTwoBytes) -> [Swift.UInt8]
  public class func new_LDKThreeBytes(array: [Swift.UInt8]) -> LightningDevKit.LDKThreeBytes
  public class func LDKThreeBytes_to_array(nativeType: LightningDevKit.LDKThreeBytes) -> [Swift.UInt8]
  public class func new_LDKTwelveBytes(array: [Swift.UInt8]) -> LightningDevKit.LDKTwelveBytes
  public class func LDKTwelveBytes_to_array(nativeType: LightningDevKit.LDKTwelveBytes) -> [Swift.UInt8]
  public class func new_LDKTwentyBytes(array: [Swift.UInt8]) -> LightningDevKit.LDKTwentyBytes
  public class func LDKTwentyBytes_to_array(nativeType: LightningDevKit.LDKTwentyBytes) -> [Swift.UInt8]
  public class func new_LDKWitnessVersion(array: Swift.UInt8) -> LightningDevKit.LDKWitnessVersion
  public class func LDKWitnessVersion_to_array(nativeType: LightningDevKit.LDKWitnessVersion) -> Swift.UInt8
  public class func new_LDKu5(array: Swift.UInt8) -> LightningDevKit.LDKu5
  public class func LDKu5_to_array(nativeType: LightningDevKit.LDKu5) -> Swift.UInt8
  public class func array_to_tuple80(array: [Swift.UInt8]) -> (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)
  public class func tuple80_to_array(nativeType: (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)) -> [Swift.UInt8]
  public class func new_LDKCVec_APIErrorZWrapper(array: [LightningDevKit.LDKAPIError]) -> LightningDevKit.Bindings.LDKCVec_APIErrorZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_APIErrorZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_APIErrorZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_APIErrorZ_to_array(nativeType: LightningDevKit.LDKCVec_APIErrorZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKAPIError]
  public class func extractNativeLDKAPIErrorArray(array: [LightningDevKit.Bindings.APIError]) -> [LightningDevKit.LDKAPIError]
  public class func wrapNativeLDKAPIErrorArray(array: [LightningDevKit.LDKAPIError]) -> [LightningDevKit.Bindings.APIError]
  public class func wrapDanglingNativeLDKAPIErrorArray(array: [LightningDevKit.LDKAPIError]) -> [LightningDevKit.Bindings.APIError]
  public class func new_LDKCVec_BalanceZWrapper(array: [LightningDevKit.LDKBalance]) -> LightningDevKit.Bindings.LDKCVec_BalanceZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_BalanceZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_BalanceZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_BalanceZ_to_array(nativeType: LightningDevKit.LDKCVec_BalanceZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKBalance]
  public class func extractNativeLDKBalanceArray(array: [LightningDevKit.Bindings.Balance]) -> [LightningDevKit.LDKBalance]
  public class func wrapNativeLDKBalanceArray(array: [LightningDevKit.LDKBalance]) -> [LightningDevKit.Bindings.Balance]
  public class func wrapDanglingNativeLDKBalanceArray(array: [LightningDevKit.LDKBalance]) -> [LightningDevKit.Bindings.Balance]
  public class func new_LDKCVec_C2Tuple_BlockHashChannelMonitorZZWrapper(array: [LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ]) -> LightningDevKit.Bindings.LDKCVec_C2Tuple_BlockHashChannelMonitorZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_BlockHashChannelMonitorZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C2Tuple_BlockHashChannelMonitorZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_BlockHashChannelMonitorZZ_to_array(nativeType: LightningDevKit.LDKCVec_C2Tuple_BlockHashChannelMonitorZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ]
  public class func extractNativeLDKC2Tuple_BlockHashChannelMonitorZArray(array: [LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ]) -> [LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ]
  public class func wrapNativeLDKC2Tuple_BlockHashChannelMonitorZArray(array: [LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ]) -> [LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ]
  public class func wrapDanglingNativeLDKC2Tuple_BlockHashChannelMonitorZArray(array: [LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ]) -> [LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ]
  public class func new_LDKCVec_C2Tuple_PublicKeyTypeZZWrapper(array: [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]) -> LightningDevKit.Bindings.LDKCVec_C2Tuple_PublicKeyTypeZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_PublicKeyTypeZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C2Tuple_PublicKeyTypeZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_PublicKeyTypeZZ_to_array(nativeType: LightningDevKit.LDKCVec_C2Tuple_PublicKeyTypeZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]
  public class func extractNativeLDKC2Tuple_PublicKeyTypeZArray(array: [LightningDevKit.Bindings.C2Tuple_PublicKeyTypeZ]) -> [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]
  public class func wrapNativeLDKC2Tuple_PublicKeyTypeZArray(array: [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]) -> [LightningDevKit.Bindings.C2Tuple_PublicKeyTypeZ]
  public class func wrapDanglingNativeLDKC2Tuple_PublicKeyTypeZArray(array: [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]) -> [LightningDevKit.Bindings.C2Tuple_PublicKeyTypeZ]
  public class func new_LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZWrapper(array: [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> LightningDevKit.Bindings.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_to_array(nativeType: LightningDevKit.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func extractNativeLDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZArray(array: [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func wrapNativeLDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZArray(array: [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func wrapDanglingNativeLDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZArray(array: [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func new_LDKCVec_C2Tuple_u32ScriptZZWrapper(array: [LightningDevKit.LDKC2Tuple_u32ScriptZ]) -> LightningDevKit.Bindings.LDKCVec_C2Tuple_u32ScriptZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_u32ScriptZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C2Tuple_u32ScriptZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_u32ScriptZZ_to_array(nativeType: LightningDevKit.LDKCVec_C2Tuple_u32ScriptZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_u32ScriptZ]
  public class func extractNativeLDKC2Tuple_u32ScriptZArray(array: [LightningDevKit.Bindings.C2Tuple_u32ScriptZ]) -> [LightningDevKit.LDKC2Tuple_u32ScriptZ]
  public class func wrapNativeLDKC2Tuple_u32ScriptZArray(array: [LightningDevKit.LDKC2Tuple_u32ScriptZ]) -> [LightningDevKit.Bindings.C2Tuple_u32ScriptZ]
  public class func wrapDanglingNativeLDKC2Tuple_u32ScriptZArray(array: [LightningDevKit.LDKC2Tuple_u32ScriptZ]) -> [LightningDevKit.Bindings.C2Tuple_u32ScriptZ]
  public class func new_LDKCVec_C2Tuple_u32TxOutZZWrapper(array: [LightningDevKit.LDKC2Tuple_u32TxOutZ]) -> LightningDevKit.Bindings.LDKCVec_C2Tuple_u32TxOutZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_u32TxOutZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C2Tuple_u32TxOutZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_u32TxOutZZ_to_array(nativeType: LightningDevKit.LDKCVec_C2Tuple_u32TxOutZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_u32TxOutZ]
  public class func extractNativeLDKC2Tuple_u32TxOutZArray(array: [LightningDevKit.Bindings.C2Tuple_u32TxOutZ]) -> [LightningDevKit.LDKC2Tuple_u32TxOutZ]
  public class func wrapNativeLDKC2Tuple_u32TxOutZArray(array: [LightningDevKit.LDKC2Tuple_u32TxOutZ]) -> [LightningDevKit.Bindings.C2Tuple_u32TxOutZ]
  public class func wrapDanglingNativeLDKC2Tuple_u32TxOutZArray(array: [LightningDevKit.LDKC2Tuple_u32TxOutZ]) -> [LightningDevKit.Bindings.C2Tuple_u32TxOutZ]
  public class func new_LDKCVec_C2Tuple_usizeTransactionZZWrapper(array: [LightningDevKit.LDKC2Tuple_usizeTransactionZ]) -> LightningDevKit.Bindings.LDKCVec_C2Tuple_usizeTransactionZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_usizeTransactionZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C2Tuple_usizeTransactionZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_usizeTransactionZZ_to_array(nativeType: LightningDevKit.LDKCVec_C2Tuple_usizeTransactionZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_usizeTransactionZ]
  public class func extractNativeLDKC2Tuple_usizeTransactionZArray(array: [LightningDevKit.Bindings.C2Tuple_usizeTransactionZ]) -> [LightningDevKit.LDKC2Tuple_usizeTransactionZ]
  public class func wrapNativeLDKC2Tuple_usizeTransactionZArray(array: [LightningDevKit.LDKC2Tuple_usizeTransactionZ]) -> [LightningDevKit.Bindings.C2Tuple_usizeTransactionZ]
  public class func wrapDanglingNativeLDKC2Tuple_usizeTransactionZArray(array: [LightningDevKit.LDKC2Tuple_usizeTransactionZ]) -> [LightningDevKit.Bindings.C2Tuple_usizeTransactionZ]
  public class func new_LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZWrapper(array: [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> LightningDevKit.Bindings.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_to_array(nativeType: LightningDevKit.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func extractNativeLDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZArray(array: [LightningDevKit.Bindings.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func wrapNativeLDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZArray(array: [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> [LightningDevKit.Bindings.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func wrapDanglingNativeLDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZArray(array: [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> [LightningDevKit.Bindings.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func new_LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZWrapper(array: [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]) -> LightningDevKit.Bindings.LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ_to_array(nativeType: LightningDevKit.LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]
  public class func extractNativeLDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZArray(array: [LightningDevKit.Bindings.C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]) -> [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]
  public class func wrapNativeLDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZArray(array: [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]) -> [LightningDevKit.Bindings.C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]
  public class func wrapDanglingNativeLDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZArray(array: [LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]) -> [LightningDevKit.Bindings.C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ]
  public class func new_LDKCVec_CResult_NoneAPIErrorZZWrapper(array: [LightningDevKit.LDKCResult_NoneAPIErrorZ]) -> LightningDevKit.Bindings.LDKCVec_CResult_NoneAPIErrorZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_CResult_NoneAPIErrorZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_CResult_NoneAPIErrorZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_CResult_NoneAPIErrorZZ_to_array(nativeType: LightningDevKit.LDKCVec_CResult_NoneAPIErrorZZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKCResult_NoneAPIErrorZ]
  public class func extractNativeLDKCResult_NoneAPIErrorZArray(array: [LightningDevKit.Bindings.Result_NoneAPIErrorZ]) -> [LightningDevKit.LDKCResult_NoneAPIErrorZ]
  public class func wrapNativeLDKCResult_NoneAPIErrorZArray(array: [LightningDevKit.LDKCResult_NoneAPIErrorZ]) -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]
  public class func wrapDanglingNativeLDKCResult_NoneAPIErrorZArray(array: [LightningDevKit.LDKCResult_NoneAPIErrorZ]) -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]
  public class func new_LDKCVec_CVec_RouteHopZZWrapper(array: [[LightningDevKit.LDKRouteHop]]) -> LightningDevKit.Bindings.LDKCVec_CVec_RouteHopZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_CVec_RouteHopZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_CVec_RouteHopZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_CVec_RouteHopZZ_to_array(nativeType: LightningDevKit.LDKCVec_CVec_RouteHopZZ, deallocate: Swift.Bool = true) -> [[LightningDevKit.LDKRouteHop]]
  public class func new_LDKCVec_CVec_u8ZZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_CVec_u8ZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_CVec_u8ZZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_CVec_u8ZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_CVec_u8ZZ_to_array(nativeType: LightningDevKit.LDKCVec_CVec_u8ZZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_ChannelDetailsZWrapper(array: [LightningDevKit.LDKChannelDetails]) -> LightningDevKit.Bindings.LDKCVec_ChannelDetailsZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_ChannelDetailsZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_ChannelDetailsZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_ChannelDetailsZ_to_array(nativeType: LightningDevKit.LDKCVec_ChannelDetailsZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKChannelDetails]
  public class func extractNativeLDKChannelDetailsArray(array: [LightningDevKit.Bindings.ChannelDetails]) -> [LightningDevKit.LDKChannelDetails]
  public class func wrapNativeLDKChannelDetailsArray(array: [LightningDevKit.LDKChannelDetails]) -> [LightningDevKit.Bindings.ChannelDetails]
  public class func wrapDanglingNativeLDKChannelDetailsArray(array: [LightningDevKit.LDKChannelDetails]) -> [LightningDevKit.Bindings.ChannelDetails]
  public class func new_LDKCVec_ChannelMonitorZWrapper(array: [LightningDevKit.LDKChannelMonitor]) -> LightningDevKit.Bindings.LDKCVec_ChannelMonitorZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_ChannelMonitorZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_ChannelMonitorZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_ChannelMonitorZ_to_array(nativeType: LightningDevKit.LDKCVec_ChannelMonitorZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKChannelMonitor]
  public class func extractNativeLDKChannelMonitorArray(array: [LightningDevKit.Bindings.ChannelMonitor]) -> [LightningDevKit.LDKChannelMonitor]
  public class func wrapNativeLDKChannelMonitorArray(array: [LightningDevKit.LDKChannelMonitor]) -> [LightningDevKit.Bindings.ChannelMonitor]
  public class func wrapDanglingNativeLDKChannelMonitorArray(array: [LightningDevKit.LDKChannelMonitor]) -> [LightningDevKit.Bindings.ChannelMonitor]
  public class func new_LDKCVec_EventZWrapper(array: [LightningDevKit.LDKEvent]) -> LightningDevKit.Bindings.LDKCVec_EventZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_EventZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_EventZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_EventZ_to_array(nativeType: LightningDevKit.LDKCVec_EventZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKEvent]
  public class func extractNativeLDKEventArray(array: [LightningDevKit.Bindings.Event]) -> [LightningDevKit.LDKEvent]
  public class func wrapNativeLDKEventArray(array: [LightningDevKit.LDKEvent]) -> [LightningDevKit.Bindings.Event]
  public class func wrapDanglingNativeLDKEventArray(array: [LightningDevKit.LDKEvent]) -> [LightningDevKit.Bindings.Event]
  public class func new_LDKCVec_MessageSendEventZWrapper(array: [LightningDevKit.LDKMessageSendEvent]) -> LightningDevKit.Bindings.LDKCVec_MessageSendEventZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_MessageSendEventZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_MessageSendEventZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_MessageSendEventZ_to_array(nativeType: LightningDevKit.LDKCVec_MessageSendEventZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKMessageSendEvent]
  public class func extractNativeLDKMessageSendEventArray(array: [LightningDevKit.Bindings.MessageSendEvent]) -> [LightningDevKit.LDKMessageSendEvent]
  public class func wrapNativeLDKMessageSendEventArray(array: [LightningDevKit.LDKMessageSendEvent]) -> [LightningDevKit.Bindings.MessageSendEvent]
  public class func wrapDanglingNativeLDKMessageSendEventArray(array: [LightningDevKit.LDKMessageSendEvent]) -> [LightningDevKit.Bindings.MessageSendEvent]
  public class func new_LDKCVec_MonitorEventZWrapper(array: [LightningDevKit.LDKMonitorEvent]) -> LightningDevKit.Bindings.LDKCVec_MonitorEventZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_MonitorEventZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_MonitorEventZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_MonitorEventZ_to_array(nativeType: LightningDevKit.LDKCVec_MonitorEventZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKMonitorEvent]
  public class func extractNativeLDKMonitorEventArray(array: [LightningDevKit.Bindings.MonitorEvent]) -> [LightningDevKit.LDKMonitorEvent]
  public class func wrapNativeLDKMonitorEventArray(array: [LightningDevKit.LDKMonitorEvent]) -> [LightningDevKit.Bindings.MonitorEvent]
  public class func wrapDanglingNativeLDKMonitorEventArray(array: [LightningDevKit.LDKMonitorEvent]) -> [LightningDevKit.Bindings.MonitorEvent]
  public class func new_LDKCVec_NetAddressZWrapper(array: [LightningDevKit.LDKNetAddress]) -> LightningDevKit.Bindings.LDKCVec_NetAddressZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_NetAddressZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_NetAddressZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_NetAddressZ_to_array(nativeType: LightningDevKit.LDKCVec_NetAddressZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKNetAddress]
  public class func extractNativeLDKNetAddressArray(array: [LightningDevKit.Bindings.NetAddress]) -> [LightningDevKit.LDKNetAddress]
  public class func wrapNativeLDKNetAddressArray(array: [LightningDevKit.LDKNetAddress]) -> [LightningDevKit.Bindings.NetAddress]
  public class func wrapDanglingNativeLDKNetAddressArray(array: [LightningDevKit.LDKNetAddress]) -> [LightningDevKit.Bindings.NetAddress]
  public class func new_LDKCVec_NodeAnnouncementZWrapper(array: [LightningDevKit.LDKNodeAnnouncement]) -> LightningDevKit.Bindings.LDKCVec_NodeAnnouncementZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_NodeAnnouncementZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_NodeAnnouncementZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_NodeAnnouncementZ_to_array(nativeType: LightningDevKit.LDKCVec_NodeAnnouncementZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKNodeAnnouncement]
  public class func extractNativeLDKNodeAnnouncementArray(array: [LightningDevKit.Bindings.NodeAnnouncement]) -> [LightningDevKit.LDKNodeAnnouncement]
  public class func wrapNativeLDKNodeAnnouncementArray(array: [LightningDevKit.LDKNodeAnnouncement]) -> [LightningDevKit.Bindings.NodeAnnouncement]
  public class func wrapDanglingNativeLDKNodeAnnouncementArray(array: [LightningDevKit.LDKNodeAnnouncement]) -> [LightningDevKit.Bindings.NodeAnnouncement]
  public class func new_LDKCVec_NodeIdZWrapper(array: [LightningDevKit.LDKNodeId]) -> LightningDevKit.Bindings.LDKCVec_NodeIdZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_NodeIdZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_NodeIdZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_NodeIdZ_to_array(nativeType: LightningDevKit.LDKCVec_NodeIdZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKNodeId]
  public class func extractNativeLDKNodeIdArray(array: [LightningDevKit.Bindings.NodeId]) -> [LightningDevKit.LDKNodeId]
  public class func wrapNativeLDKNodeIdArray(array: [LightningDevKit.LDKNodeId]) -> [LightningDevKit.Bindings.NodeId]
  public class func wrapDanglingNativeLDKNodeIdArray(array: [LightningDevKit.LDKNodeId]) -> [LightningDevKit.Bindings.NodeId]
  public class func new_LDKCVec_OutPointZWrapper(array: [LightningDevKit.LDKOutPoint]) -> LightningDevKit.Bindings.LDKCVec_OutPointZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_OutPointZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_OutPointZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_OutPointZ_to_array(nativeType: LightningDevKit.LDKCVec_OutPointZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKOutPoint]
  public class func extractNativeLDKOutPointArray(array: [LightningDevKit.Bindings.OutPoint]) -> [LightningDevKit.LDKOutPoint]
  public class func wrapNativeLDKOutPointArray(array: [LightningDevKit.LDKOutPoint]) -> [LightningDevKit.Bindings.OutPoint]
  public class func wrapDanglingNativeLDKOutPointArray(array: [LightningDevKit.LDKOutPoint]) -> [LightningDevKit.Bindings.OutPoint]
  public class func new_LDKCVec_PaymentPreimageZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_PaymentPreimageZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PaymentPreimageZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_PaymentPreimageZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PaymentPreimageZ_to_array(nativeType: LightningDevKit.LDKCVec_PaymentPreimageZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_PhantomRouteHintsZWrapper(array: [LightningDevKit.LDKPhantomRouteHints]) -> LightningDevKit.Bindings.LDKCVec_PhantomRouteHintsZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PhantomRouteHintsZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_PhantomRouteHintsZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PhantomRouteHintsZ_to_array(nativeType: LightningDevKit.LDKCVec_PhantomRouteHintsZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKPhantomRouteHints]
  public class func extractNativeLDKPhantomRouteHintsArray(array: [LightningDevKit.Bindings.PhantomRouteHints]) -> [LightningDevKit.LDKPhantomRouteHints]
  public class func wrapNativeLDKPhantomRouteHintsArray(array: [LightningDevKit.LDKPhantomRouteHints]) -> [LightningDevKit.Bindings.PhantomRouteHints]
  public class func wrapDanglingNativeLDKPhantomRouteHintsArray(array: [LightningDevKit.LDKPhantomRouteHints]) -> [LightningDevKit.Bindings.PhantomRouteHints]
  public class func new_LDKCVec_PrivateRouteZWrapper(array: [LightningDevKit.LDKPrivateRoute]) -> LightningDevKit.Bindings.LDKCVec_PrivateRouteZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PrivateRouteZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_PrivateRouteZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PrivateRouteZ_to_array(nativeType: LightningDevKit.LDKCVec_PrivateRouteZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKPrivateRoute]
  public class func extractNativeLDKPrivateRouteArray(array: [LightningDevKit.Bindings.PrivateRoute]) -> [LightningDevKit.LDKPrivateRoute]
  public class func wrapNativeLDKPrivateRouteArray(array: [LightningDevKit.LDKPrivateRoute]) -> [LightningDevKit.Bindings.PrivateRoute]
  public class func wrapDanglingNativeLDKPrivateRouteArray(array: [LightningDevKit.LDKPrivateRoute]) -> [LightningDevKit.Bindings.PrivateRoute]
  public class func new_LDKCVec_PublicKeyZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_PublicKeyZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PublicKeyZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_PublicKeyZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PublicKeyZ_to_array(nativeType: LightningDevKit.LDKCVec_PublicKeyZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_RouteHintHopZWrapper(array: [LightningDevKit.LDKRouteHintHop]) -> LightningDevKit.Bindings.LDKCVec_RouteHintHopZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_RouteHintHopZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_RouteHintHopZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_RouteHintHopZ_to_array(nativeType: LightningDevKit.LDKCVec_RouteHintHopZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKRouteHintHop]
  public class func extractNativeLDKRouteHintHopArray(array: [LightningDevKit.Bindings.RouteHintHop]) -> [LightningDevKit.LDKRouteHintHop]
  public class func wrapNativeLDKRouteHintHopArray(array: [LightningDevKit.LDKRouteHintHop]) -> [LightningDevKit.Bindings.RouteHintHop]
  public class func wrapDanglingNativeLDKRouteHintHopArray(array: [LightningDevKit.LDKRouteHintHop]) -> [LightningDevKit.Bindings.RouteHintHop]
  public class func new_LDKCVec_RouteHintZWrapper(array: [LightningDevKit.LDKRouteHint]) -> LightningDevKit.Bindings.LDKCVec_RouteHintZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_RouteHintZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_RouteHintZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_RouteHintZ_to_array(nativeType: LightningDevKit.LDKCVec_RouteHintZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKRouteHint]
  public class func extractNativeLDKRouteHintArray(array: [LightningDevKit.Bindings.RouteHint]) -> [LightningDevKit.LDKRouteHint]
  public class func wrapNativeLDKRouteHintArray(array: [LightningDevKit.LDKRouteHint]) -> [LightningDevKit.Bindings.RouteHint]
  public class func wrapDanglingNativeLDKRouteHintArray(array: [LightningDevKit.LDKRouteHint]) -> [LightningDevKit.Bindings.RouteHint]
  public class func new_LDKCVec_RouteHopZWrapper(array: [LightningDevKit.LDKRouteHop]) -> LightningDevKit.Bindings.LDKCVec_RouteHopZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_RouteHopZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_RouteHopZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_RouteHopZ_to_array(nativeType: LightningDevKit.LDKCVec_RouteHopZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKRouteHop]
  public class func extractNativeLDKRouteHopArray(array: [LightningDevKit.Bindings.RouteHop]) -> [LightningDevKit.LDKRouteHop]
  public class func wrapNativeLDKRouteHopArray(array: [LightningDevKit.LDKRouteHop]) -> [LightningDevKit.Bindings.RouteHop]
  public class func wrapDanglingNativeLDKRouteHopArray(array: [LightningDevKit.LDKRouteHop]) -> [LightningDevKit.Bindings.RouteHop]
  public class func new_LDKCVec_SignatureZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_SignatureZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_SignatureZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_SignatureZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_SignatureZ_to_array(nativeType: LightningDevKit.LDKCVec_SignatureZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_SpendableOutputDescriptorZWrapper(array: [LightningDevKit.LDKSpendableOutputDescriptor]) -> LightningDevKit.Bindings.LDKCVec_SpendableOutputDescriptorZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_SpendableOutputDescriptorZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_SpendableOutputDescriptorZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_SpendableOutputDescriptorZ_to_array(nativeType: LightningDevKit.LDKCVec_SpendableOutputDescriptorZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKSpendableOutputDescriptor]
  public class func extractNativeLDKSpendableOutputDescriptorArray(array: [LightningDevKit.Bindings.SpendableOutputDescriptor]) -> [LightningDevKit.LDKSpendableOutputDescriptor]
  public class func wrapNativeLDKSpendableOutputDescriptorArray(array: [LightningDevKit.LDKSpendableOutputDescriptor]) -> [LightningDevKit.Bindings.SpendableOutputDescriptor]
  public class func wrapDanglingNativeLDKSpendableOutputDescriptorArray(array: [LightningDevKit.LDKSpendableOutputDescriptor]) -> [LightningDevKit.Bindings.SpendableOutputDescriptor]
  public class func new_LDKCVec_ThirtyTwoBytesZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_ThirtyTwoBytesZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_ThirtyTwoBytesZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_ThirtyTwoBytesZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_ThirtyTwoBytesZ_to_array(nativeType: LightningDevKit.LDKCVec_ThirtyTwoBytesZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_TransactionOutputsZWrapper(array: [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> LightningDevKit.Bindings.LDKCVec_TransactionOutputsZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TransactionOutputsZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_TransactionOutputsZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TransactionOutputsZ_to_array(nativeType: LightningDevKit.LDKCVec_TransactionOutputsZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func extractNativeLDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZArray(array: [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func wrapNativeLDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZArray(array: [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func wrapDanglingNativeLDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZArray(array: [LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func new_LDKCVec_TransactionZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_TransactionZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TransactionZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_TransactionZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TransactionZ_to_array(nativeType: LightningDevKit.LDKCVec_TransactionZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_TxOutZWrapper(array: [LightningDevKit.LDKTxOut]) -> LightningDevKit.Bindings.LDKCVec_TxOutZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TxOutZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_TxOutZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TxOutZ_to_array(nativeType: LightningDevKit.LDKCVec_TxOutZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKTxOut]
  public class func extractNativeLDKTxOutArray(array: [LightningDevKit.Bindings.TxOut]) -> [LightningDevKit.LDKTxOut]
  public class func wrapNativeLDKTxOutArray(array: [LightningDevKit.LDKTxOut]) -> [LightningDevKit.Bindings.TxOut]
  public class func wrapDanglingNativeLDKTxOutArray(array: [LightningDevKit.LDKTxOut]) -> [LightningDevKit.Bindings.TxOut]
  public class func new_LDKCVec_TxidZWrapper(array: [[Swift.UInt8]]) -> LightningDevKit.Bindings.LDKCVec_TxidZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TxidZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_TxidZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TxidZ_to_array(nativeType: LightningDevKit.LDKCVec_TxidZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_UpdateAddHTLCZWrapper(array: [LightningDevKit.LDKUpdateAddHTLC]) -> LightningDevKit.Bindings.LDKCVec_UpdateAddHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateAddHTLCZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_UpdateAddHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateAddHTLCZ_to_array(nativeType: LightningDevKit.LDKCVec_UpdateAddHTLCZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKUpdateAddHTLC]
  public class func extractNativeLDKUpdateAddHTLCArray(array: [LightningDevKit.Bindings.UpdateAddHTLC]) -> [LightningDevKit.LDKUpdateAddHTLC]
  public class func wrapNativeLDKUpdateAddHTLCArray(array: [LightningDevKit.LDKUpdateAddHTLC]) -> [LightningDevKit.Bindings.UpdateAddHTLC]
  public class func wrapDanglingNativeLDKUpdateAddHTLCArray(array: [LightningDevKit.LDKUpdateAddHTLC]) -> [LightningDevKit.Bindings.UpdateAddHTLC]
  public class func new_LDKCVec_UpdateFailHTLCZWrapper(array: [LightningDevKit.LDKUpdateFailHTLC]) -> LightningDevKit.Bindings.LDKCVec_UpdateFailHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateFailHTLCZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_UpdateFailHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateFailHTLCZ_to_array(nativeType: LightningDevKit.LDKCVec_UpdateFailHTLCZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKUpdateFailHTLC]
  public class func extractNativeLDKUpdateFailHTLCArray(array: [LightningDevKit.Bindings.UpdateFailHTLC]) -> [LightningDevKit.LDKUpdateFailHTLC]
  public class func wrapNativeLDKUpdateFailHTLCArray(array: [LightningDevKit.LDKUpdateFailHTLC]) -> [LightningDevKit.Bindings.UpdateFailHTLC]
  public class func wrapDanglingNativeLDKUpdateFailHTLCArray(array: [LightningDevKit.LDKUpdateFailHTLC]) -> [LightningDevKit.Bindings.UpdateFailHTLC]
  public class func new_LDKCVec_UpdateFailMalformedHTLCZWrapper(array: [LightningDevKit.LDKUpdateFailMalformedHTLC]) -> LightningDevKit.Bindings.LDKCVec_UpdateFailMalformedHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateFailMalformedHTLCZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_UpdateFailMalformedHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateFailMalformedHTLCZ_to_array(nativeType: LightningDevKit.LDKCVec_UpdateFailMalformedHTLCZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKUpdateFailMalformedHTLC]
  public class func extractNativeLDKUpdateFailMalformedHTLCArray(array: [LightningDevKit.Bindings.UpdateFailMalformedHTLC]) -> [LightningDevKit.LDKUpdateFailMalformedHTLC]
  public class func wrapNativeLDKUpdateFailMalformedHTLCArray(array: [LightningDevKit.LDKUpdateFailMalformedHTLC]) -> [LightningDevKit.Bindings.UpdateFailMalformedHTLC]
  public class func wrapDanglingNativeLDKUpdateFailMalformedHTLCArray(array: [LightningDevKit.LDKUpdateFailMalformedHTLC]) -> [LightningDevKit.Bindings.UpdateFailMalformedHTLC]
  public class func new_LDKCVec_UpdateFulfillHTLCZWrapper(array: [LightningDevKit.LDKUpdateFulfillHTLC]) -> LightningDevKit.Bindings.LDKCVec_UpdateFulfillHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateFulfillHTLCZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_UpdateFulfillHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateFulfillHTLCZ_to_array(nativeType: LightningDevKit.LDKCVec_UpdateFulfillHTLCZ, deallocate: Swift.Bool = true) -> [LightningDevKit.LDKUpdateFulfillHTLC]
  public class func extractNativeLDKUpdateFulfillHTLCArray(array: [LightningDevKit.Bindings.UpdateFulfillHTLC]) -> [LightningDevKit.LDKUpdateFulfillHTLC]
  public class func wrapNativeLDKUpdateFulfillHTLCArray(array: [LightningDevKit.LDKUpdateFulfillHTLC]) -> [LightningDevKit.Bindings.UpdateFulfillHTLC]
  public class func wrapDanglingNativeLDKUpdateFulfillHTLCArray(array: [LightningDevKit.LDKUpdateFulfillHTLC]) -> [LightningDevKit.Bindings.UpdateFulfillHTLC]
  public class func new_LDKCVec_u5ZWrapper(array: [Swift.UInt8]) -> LightningDevKit.Bindings.LDKCVec_u5ZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_u5ZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_u5Z)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_u5Z_to_array(nativeType: LightningDevKit.LDKCVec_u5Z, deallocate: Swift.Bool = true) -> [Swift.UInt8]
  public class func new_LDKCVec_u64ZWrapper(array: [Swift.UInt64]) -> LightningDevKit.Bindings.LDKCVec_u64ZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_u64ZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_u64Z)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_u64Z_to_array(nativeType: LightningDevKit.LDKCVec_u64Z, deallocate: Swift.Bool = true) -> [Swift.UInt64]
  public class func new_LDKCVec_u8ZWrapper(array: [Swift.UInt8]) -> LightningDevKit.Bindings.LDKCVec_u8ZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_u8ZWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCVec_u8Z)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_u8Z_to_array(nativeType: LightningDevKit.LDKCVec_u8Z, deallocate: Swift.Bool = true) -> [Swift.UInt8]
  public class func new_LDKu8sliceWrapper(array: [Swift.UInt8]) -> LightningDevKit.Bindings.LDKu8sliceWrapper
  @_hasMissingDesignatedInitializers public class LDKu8sliceWrapper : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKu8slice)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKu8slice_to_array(nativeType: LightningDevKit.LDKu8slice) -> [Swift.UInt8]
  public class func swift_ldk_get_compiled_version() -> Swift.String
  public class func swift_ldk_c_bindings_get_compiled_version() -> Swift.String
  public class func swift_CResult_NoneNoneZ_is_ok(o: LightningDevKit.Bindings.Result_NoneNoneZ) -> Swift.Bool
  public class func swift_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_SecretKeyErrorZ_is_ok(o: LightningDevKit.Bindings.Result_SecretKeyErrorZ) -> Swift.Bool
  public class func swift_CResult_PublicKeyErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PublicKeyErrorZ) -> Swift.Bool
  public class func swift_CResult_TxCreationKeysDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelPublicKeysDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TxCreationKeysErrorZ_is_ok(o: LightningDevKit.Bindings.Result_TxCreationKeysErrorZ) -> Swift.Bool
  public class func swift_CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TrustedClosingTransactionNoneZ_is_ok(o: LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ) -> Swift.Bool
  public class func swift_CResult_CommitmentTransactionDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TrustedCommitmentTransactionNoneZ_is_ok(o: LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ) -> Swift.Bool
  public class func swift_CResult_CVec_SignatureZNoneZ_is_ok(o: LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ) -> Swift.Bool
  public class func swift_CResult_ShutdownScriptDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(o: LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ) -> Swift.Bool
  public class func swift_CResult_NoneErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NoneErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteHopDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RouteDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteParametersDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentParametersDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteHintDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteHintHopDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteLightningErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RouteLightningErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentPurposeDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_EventZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TxOutAccessErrorZ_is_ok(o: LightningDevKit.Bindings.Result_TxOutAccessErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneChannelMonitorUpdateErrZ_is_ok(o: LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ) -> Swift.Bool
  public class func swift_CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ProbabilisticScorerDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InitFeaturesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelFeaturesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeFeaturesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceFeaturesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeIdDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_boolLightningErrorZ_is_ok(o: LightningDevKit.Bindings.Result_boolLightningErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneLightningErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NoneLightningErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelInfoDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RoutingFeesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeAliasDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeInfoDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NetworkGraphDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ) -> Swift.Bool
  public class func swift_CResult_SignatureNoneZ_is_ok(o: LightningDevKit.Bindings.Result_SignatureNoneZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_SignatureSignatureZNoneZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ) -> Swift.Bool
  public class func swift_CResult_SecretKeyNoneZ_is_ok(o: LightningDevKit.Bindings.Result_SecretKeyNoneZ) -> Swift.Bool
  public class func swift_CResult_SignDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_SignDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RecoverableSignatureNoneZ_is_ok(o: LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ) -> Swift.Bool
  public class func swift_CResult_CVec_CVec_u8ZZNoneZ_is_ok(o: LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ) -> Swift.Bool
  public class func swift_CResult_InMemorySignerDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TransactionNoneZ_is_ok(o: LightningDevKit.Bindings.Result_TransactionNoneZ) -> Swift.Bool
  public class func swift_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneAPIErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NoneAPIErrorZ) -> Swift.Bool
  public class func swift_CResult__u832APIErrorZ_is_ok(o: LightningDevKit.Bindings.Result__u832APIErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentIdPaymentSendFailureZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ) -> Swift.Bool
  public class func swift_CResult_NonePaymentSendFailureZ_is_ok(o: LightningDevKit.Bindings.Result_NonePaymentSendFailureZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentSecretNoneZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentSecretNoneZ) -> Swift.Bool
  public class func swift_CResult_PaymentSecretAPIErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentPreimageAPIErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ) -> Swift.Bool
  public class func swift_CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelCounterpartyDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelDetailsDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PhantomRouteHintsDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelConfigDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_OutPointDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_OutPointDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_TypeZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentIdPaymentErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ) -> Swift.Bool
  public class func swift_CResult_SiPrefixParseErrorZ_is_ok(o: LightningDevKit.Bindings.Result_SiPrefixParseErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceParseOrSemanticErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ) -> Swift.Bool
  public class func swift_CResult_SignedRawInvoiceParseErrorZ_is_ok(o: LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ) -> Swift.Bool
  public class func swift_CResult_PayeePubKeyErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PayeePubKeyErrorZ) -> Swift.Bool
  public class func swift_CResult_PositiveTimestampCreationErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneSemanticErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NoneSemanticErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceSemanticErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ) -> Swift.Bool
  public class func swift_CResult_DescriptionCreationErrorZ_is_ok(o: LightningDevKit.Bindings.Result_DescriptionCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_PrivateRouteCreationErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_StringErrorZ_is_ok(o: LightningDevKit.Bindings.Result_StringErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_MonitorEventZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_HTLCUpdateDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_CVec_u8ZPeerHandleErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ) -> Swift.Bool
  public class func swift_CResult_NonePeerHandleErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NonePeerHandleErrorZ) -> Swift.Bool
  public class func swift_CResult_boolPeerHandleErrorZ_is_ok(o: LightningDevKit.Bindings.Result_boolPeerHandleErrorZ) -> Swift.Bool
  public class func swift_CResult_u32GraphSyncErrorZ_is_ok(o: LightningDevKit.Bindings.Result_u32GraphSyncErrorZ) -> Swift.Bool
  public class func swift_CResult_NetAddressDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_AcceptChannelDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelReestablishDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ClosingSignedDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_CommitmentSignedDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_FundingCreatedDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_FundingSignedDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelReadyDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InitDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InitDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_OpenChannelDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RevokeAndACKDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ShutdownDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFailHTLCDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFeeDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateAddHTLCDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PingDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PingDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PongDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_PongDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelAnnouncementDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelUpdateDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ErrorMessageDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_WarningMessageDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeAnnouncementDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_QueryChannelRangeDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ReplyChannelRangeDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_GossipTimestampFilterDecodeErrorZ_is_ok(o: LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceSignOrCreationErrorZ_is_ok(o: LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_LockedChannelMonitorNoneZ_is_ok(o: LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ) -> Swift.Bool
  public class func swift_sign(msg: [Swift.UInt8], sk: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StringErrorZ
  public class func swift_recover_pk(msg: [Swift.UInt8], sig: Swift.String) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
  public class func swift_verify(msg: [Swift.UInt8], sig: Swift.String, pk: [Swift.UInt8]) -> Swift.Bool
  public class func swift_construct_invoice_preimage(hrp_bytes: [Swift.UInt8], data_without_signature: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_C2Tuple_BlockHashChannelMonitorZ_read(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.KeysInterface) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func swift_C2Tuple_BlockHashChannelManagerZ_read(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.ChannelManagerReadArgs) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  public class func swift_create(keys: LightningDevKit.Bindings.ExpandedKey, min_value_msat: LightningDevKit.Bindings.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32, keys_manager: LightningDevKit.Bindings.KeysInterface, current_time: Swift.UInt64) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
  public class func swift_create_from_hash(keys: LightningDevKit.Bindings.ExpandedKey, min_value_msat: LightningDevKit.Bindings.Option_u64Z, payment_hash: [Swift.UInt8], invoice_expiry_delta_secs: Swift.UInt32, current_time: Swift.UInt64) -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
  public class func swift_htlc_success_tx_weight(opt_anchors: Swift.Bool) -> Swift.UInt64
  public class func swift_htlc_timeout_tx_weight(opt_anchors: Swift.Bool) -> Swift.UInt64
  public class func swift_build_commitment_secret(commitment_seed: [Swift.UInt8], idx: Swift.UInt64) -> [Swift.UInt8]
  public class func swift_build_closing_transaction(to_holder_value_sat: Swift.UInt64, to_counterparty_value_sat: Swift.UInt64, to_holder_script: [Swift.UInt8], to_counterparty_script: [Swift.UInt8], funding_outpoint: LightningDevKit.Bindings.OutPoint) -> [Swift.UInt8]
  public class func swift_derive_private_key(per_commitment_point: [Swift.UInt8], base_secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SecretKeyErrorZ
  public class func swift_derive_public_key(per_commitment_point: [Swift.UInt8], base_point: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
  public class func swift_derive_private_revocation_key(per_commitment_secret: [Swift.UInt8], countersignatory_revocation_base_secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SecretKeyErrorZ
  public class func swift_derive_public_revocation_key(per_commitment_point: [Swift.UInt8], countersignatory_revocation_base_point: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
  public class func swift_get_revokeable_redeemscript(revocation_key: [Swift.UInt8], contest_delay: Swift.UInt16, broadcaster_delayed_payment_key: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_get_htlc_redeemscript(htlc: LightningDevKit.Bindings.HTLCOutputInCommitment, opt_anchors: Swift.Bool, keys: LightningDevKit.Bindings.TxCreationKeys) -> [Swift.UInt8]
  public class func swift_make_funding_redeemscript(broadcaster: [Swift.UInt8], countersignatory: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_build_htlc_transaction(commitment_txid: [Swift.UInt8], feerate_per_kw: Swift.UInt32, contest_delay: Swift.UInt16, htlc: LightningDevKit.Bindings.HTLCOutputInCommitment, opt_anchors: Swift.Bool, broadcaster_delayed_payment_key: [Swift.UInt8], revocation_key: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_get_anchor_redeemscript(funding_pubkey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_get_commitment_transaction_number_obscure_factor(broadcaster_payment_basepoint: [Swift.UInt8], countersignatory_payment_basepoint: [Swift.UInt8], outbound_from_broadcaster: Swift.Bool) -> Swift.UInt64
  public class func swift_find_route(our_node_pubkey: [Swift.UInt8], route_params: LightningDevKit.Bindings.RouteParameters, network_graph: LightningDevKit.Bindings.NetworkGraph, first_hops: [LightningDevKit.Bindings.ChannelDetails]?, logger: LightningDevKit.Bindings.Logger, scorer: LightningDevKit.Bindings.Score, random_seed_bytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  public class func swift_build_route_from_hops(our_node_pubkey: [Swift.UInt8], hops: [[Swift.UInt8]], route_params: LightningDevKit.Bindings.RouteParameters, network_graph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger, random_seed_bytes: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  public class func swift_create_phantom_invoice(amt_msat: LightningDevKit.Bindings.Option_u64Z, payment_hash: [Swift.UInt8], description: Swift.String, invoice_expiry_delta_secs: Swift.UInt32, phantom_route_hints: [LightningDevKit.Bindings.PhantomRouteHints], keys_manager: LightningDevKit.Bindings.KeysInterface, network: LightningDevKit.LDKCurrency) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_phantom_invoice_with_description_hash(amt_msat: LightningDevKit.Bindings.Option_u64Z, payment_hash: [Swift.UInt8], invoice_expiry_delta_secs: Swift.UInt32, description_hash: LightningDevKit.Bindings.Sha256, phantom_route_hints: [LightningDevKit.Bindings.PhantomRouteHints], keys_manager: LightningDevKit.Bindings.KeysInterface, network: LightningDevKit.LDKCurrency) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager(channelmanager: LightningDevKit.Bindings.ChannelManager, keys_manager: LightningDevKit.Bindings.KeysInterface, network: LightningDevKit.LDKCurrency, amt_msat: LightningDevKit.Bindings.Option_u64Z, description: Swift.String, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager_with_description_hash(channelmanager: LightningDevKit.Bindings.ChannelManager, keys_manager: LightningDevKit.Bindings.KeysInterface, network: LightningDevKit.LDKCurrency, amt_msat: LightningDevKit.Bindings.Option_u64Z, description_hash: LightningDevKit.Bindings.Sha256, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch(channelmanager: LightningDevKit.Bindings.ChannelManager, keys_manager: LightningDevKit.Bindings.KeysInterface, network: LightningDevKit.LDKCurrency, amt_msat: LightningDevKit.Bindings.Option_u64Z, description_hash: LightningDevKit.Bindings.Sha256, duration_since_epoch: Swift.UInt64, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager_and_duration_since_epoch(channelmanager: LightningDevKit.Bindings.ChannelManager, keys_manager: LightningDevKit.Bindings.KeysInterface, network: LightningDevKit.LDKCurrency, amt_msat: LightningDevKit.Bindings.Option_u64Z, description: Swift.String, duration_since_epoch: Swift.UInt64, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  public class func cacheInstance(instance: LightningDevKit.NativeTraitWrapper, countIdempotently: Swift.Bool = false)
  public class func instanceToPointer(instance: LightningDevKit.NativeTraitWrapper) -> Swift.UnsafeMutableRawPointer
  public class func pointerToInstance<T>(pointer: Swift.UnsafeRawPointer, sourceMarker: Swift.String?) -> T where T : LightningDevKit.NativeTraitWrapper
  public class func removeInstancePointer(instance: LightningDevKit.NativeTraitWrapper) -> Swift.Bool
  public class func new_LDKTransactionWrapper(array: [Swift.UInt8]) -> LightningDevKit.Bindings.LDKTransactionWrapper
  @_hasMissingDesignatedInitializers public class LDKTransactionWrapper {
    public init(pointer: LightningDevKit.LDKTransaction)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKTransaction_to_array(nativeType: LightningDevKit.LDKTransaction, deallocate: Swift.Bool = true) -> [Swift.UInt8]
  public class func LDKStr_to_string(nativeType: LightningDevKit.LDKStr, deallocate: Swift.Bool = true) -> Swift.String
  public class func UnsafeIntPointer_to_string(nativeType: Swift.UnsafePointer<Swift.Int8>) -> Swift.String
  public class func string_to_unsafe_int8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.Int8>
  public class func string_to_unsafe_uint8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.UInt8>
  public class func new_LDKStr(string: Swift.String, chars_is_owned: Swift.Bool = false) -> LightningDevKit.LDKStr
  public class func get_ldk_swift_bindings_version() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InstanceCrashSimulator : LightningDevKit.NativeTraitWrapper {
  public init()
  public func getPointer() -> Swift.UnsafeMutableRawPointer
  @objc deinit
}
public typealias ClosingSigned = LightningDevKit.Bindings.ClosingSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingSigned : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], fee_satoshis_arg: Swift.UInt64, signature_arg: [Swift.UInt8], fee_range_arg: LightningDevKit.Bindings.ClosingSignedFeeRange)
    public init(pointer: LightningDevKit.LDKClosingSigned)
    public init(pointer: LightningDevKit.LDKClosingSigned, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_fee_satoshis() -> Swift.UInt64
    public func set_fee_satoshis(val: Swift.UInt64)
    public func get_signature() -> [Swift.UInt8]
    public func set_signature(val: [Swift.UInt8])
    public func get_fee_range() -> LightningDevKit.Bindings.ClosingSignedFeeRange
    public func set_fee_range(val: LightningDevKit.Bindings.ClosingSignedFeeRange)
    public func clone() -> LightningDevKit.Bindings.ClosingSigned
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_NodeFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NodeFeaturesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NodeFeaturesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeFeatures?
    public class func ok(o: LightningDevKit.Bindings.NodeFeatures) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
  }
}
public typealias Result_CVec_SignatureZNoneZ = LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_SignatureZNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CVec_SignatureZNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_CVec_SignatureZNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [[Swift.UInt8]]?
    public class func ok(o: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
  }
}
public typealias Result_CounterpartyCommitmentSecretsDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyCommitmentSecretsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyCommitmentSecrets?
    public class func ok(o: LightningDevKit.Bindings.CounterpartyCommitmentSecrets) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
  }
}
public typealias Result_HTLCOutputInCommitmentDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCOutputInCommitmentDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_HTLCOutputInCommitmentDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_HTLCOutputInCommitmentDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCOutputInCommitment?
    public class func ok(o: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
  }
}
public typealias DirectedChannelTransactionParameters = LightningDevKit.Bindings.DirectedChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DirectedChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKDirectedChannelTransactionParameters)
    public init(pointer: LightningDevKit.LDKDirectedChannelTransactionParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func broadcaster_pubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func countersignatory_pubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func contest_delay() -> Swift.UInt16
    public func is_outbound() -> Swift.Bool
    public func funding_outpoint() -> LightningDevKit.Bindings.OutPoint?
    public func opt_anchors() -> Swift.Bool
    @objc deinit
  }
}
public typealias HTLCUpdate = LightningDevKit.Bindings.HTLCUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCUpdate : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKHTLCUpdate)
    public init(pointer: LightningDevKit.LDKHTLCUpdate, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.HTLCUpdate
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    @objc deinit
  }
}
public typealias NodeFeatures = LightningDevKit.Bindings.NodeFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeFeatures : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKNodeFeatures)
    public init(pointer: LightningDevKit.LDKNodeFeatures, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.NodeFeatures, b: LightningDevKit.Bindings.NodeFeatures) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.NodeFeatures
    public func requires_unknown_bits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeFeaturesDecodeErrorZ
    public func set_data_loss_protect_optional()
    public func set_data_loss_protect_required()
    public func supports_data_loss_protect() -> Swift.Bool
    public func requires_data_loss_protect() -> Swift.Bool
    public func set_upfront_shutdown_script_optional()
    public func set_upfront_shutdown_script_required()
    public func supports_upfront_shutdown_script() -> Swift.Bool
    public func requires_upfront_shutdown_script() -> Swift.Bool
    public func set_gossip_queries_optional()
    public func set_gossip_queries_required()
    public func supports_gossip_queries() -> Swift.Bool
    public func requires_gossip_queries() -> Swift.Bool
    public func set_variable_length_onion_optional()
    public func set_variable_length_onion_required()
    public func supports_variable_length_onion() -> Swift.Bool
    public func requires_variable_length_onion() -> Swift.Bool
    public func set_static_remote_key_optional()
    public func set_static_remote_key_required()
    public func supports_static_remote_key() -> Swift.Bool
    public func requires_static_remote_key() -> Swift.Bool
    public func set_payment_secret_optional()
    public func set_payment_secret_required()
    public func supports_payment_secret() -> Swift.Bool
    public func requires_payment_secret() -> Swift.Bool
    public func set_basic_mpp_optional()
    public func set_basic_mpp_required()
    public func supports_basic_mpp() -> Swift.Bool
    public func requires_basic_mpp() -> Swift.Bool
    public func set_wumbo_optional()
    public func set_wumbo_required()
    public func supports_wumbo() -> Swift.Bool
    public func requires_wumbo() -> Swift.Bool
    public func set_shutdown_any_segwit_optional()
    public func set_shutdown_any_segwit_required()
    public func supports_shutdown_anysegwit() -> Swift.Bool
    public func requires_shutdown_anysegwit() -> Swift.Bool
    public func set_channel_type_optional()
    public func set_channel_type_required()
    public func supports_channel_type() -> Swift.Bool
    public func requires_channel_type() -> Swift.Bool
    public func set_scid_privacy_optional()
    public func set_scid_privacy_required()
    public func supports_scid_privacy() -> Swift.Bool
    public func requires_scid_privacy() -> Swift.Bool
    public func set_zero_conf_optional()
    public func set_zero_conf_required()
    public func supports_zero_conf() -> Swift.Bool
    public func requires_zero_conf() -> Swift.Bool
    public func set_keysend_optional()
    public func set_keysend_required()
    public func supports_keysend() -> Swift.Bool
    public func requires_keysend() -> Swift.Bool
    @objc deinit
  }
}
public typealias CounterpartyCommitmentSecrets = LightningDevKit.Bindings.CounterpartyCommitmentSecrets
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyCommitmentSecrets : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCounterpartyCommitmentSecrets)
    public init(pointer: LightningDevKit.LDKCounterpartyCommitmentSecrets, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.CounterpartyCommitmentSecrets
    public func get_min_seen_secret() -> Swift.UInt64
    public func provide_secret(idx: Swift.UInt64, secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func get_secret(idx: Swift.UInt64) -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyCommitmentSecretsDecodeErrorZ
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class UtilMethods {
  public class func constructor_BlockHashChannelManagerZ_read(ser: [Swift.UInt8], arg_keys_manager: LightningDevKit.KeysInterface, arg_fee_estimator: LightningDevKit.FeeEstimator, arg_chain_monitor: LightningDevKit.Watch, arg_tx_broadcaster: LightningDevKit.BroadcasterInterface, arg_logger: LightningDevKit.Logger, arg_default_config: LightningDevKit.UserConfig, arg_channel_monitors: [LightningDevKit.LDKChannelMonitor]) -> LightningDevKit.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  public class func constructor_BlockHashChannelMonitorZ_read(ser: [Swift.UInt8], arg: LightningDevKit.KeysInterface) -> LightningDevKit.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  @objc deinit
}
public typealias ChannelAnnouncement = LightningDevKit.Bindings.ChannelAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
    public init(node_signature_1_arg: [Swift.UInt8], node_signature_2_arg: [Swift.UInt8], bitcoin_signature_1_arg: [Swift.UInt8], bitcoin_signature_2_arg: [Swift.UInt8], contents_arg: LightningDevKit.Bindings.UnsignedChannelAnnouncement)
    public init(pointer: LightningDevKit.LDKChannelAnnouncement)
    public init(pointer: LightningDevKit.LDKChannelAnnouncement, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_node_signature_1() -> [Swift.UInt8]
    public func set_node_signature_1(val: [Swift.UInt8])
    public func get_node_signature_2() -> [Swift.UInt8]
    public func set_node_signature_2(val: [Swift.UInt8])
    public func get_bitcoin_signature_1() -> [Swift.UInt8]
    public func set_bitcoin_signature_1(val: [Swift.UInt8])
    public func get_bitcoin_signature_2() -> [Swift.UInt8]
    public func set_bitcoin_signature_2(val: [Swift.UInt8])
    public func get_contents() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement
    public func set_contents(val: LightningDevKit.Bindings.UnsignedChannelAnnouncement)
    public func clone() -> LightningDevKit.Bindings.ChannelAnnouncement
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    @objc deinit
  }
}
public typealias Pong = LightningDevKit.Bindings.Pong
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Pong : LightningDevKit.NativeTypeWrapper {
    public init(byteslen_arg: Swift.UInt16)
    public init(pointer: LightningDevKit.LDKPong)
    public init(pointer: LightningDevKit.LDKPong, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_byteslen() -> Swift.UInt16
    public func set_byteslen(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.Pong
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PongDecodeErrorZ
    @objc deinit
  }
}
public typealias Shutdown = LightningDevKit.Bindings.Shutdown
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Shutdown : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], scriptpubkey_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKShutdown)
    public init(pointer: LightningDevKit.LDKShutdown, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_scriptpubkey() -> [Swift.UInt8]
    public func set_scriptpubkey(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.Shutdown
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownDecodeErrorZ
    @objc deinit
  }
}
public typealias ChannelReady = LightningDevKit.Bindings.ChannelReady
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelReady : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], next_per_commitment_point_arg: [Swift.UInt8], short_channel_id_alias_arg: LightningDevKit.Bindings.Option_u64Z)
    public init(pointer: LightningDevKit.LDKChannelReady)
    public init(pointer: LightningDevKit.LDKChannelReady, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_next_per_commitment_point() -> [Swift.UInt8]
    public func set_next_per_commitment_point(val: [Swift.UInt8])
    public func get_short_channel_id_alias() -> LightningDevKit.Bindings.Option_u64Z
    public func set_short_channel_id_alias(val: LightningDevKit.Bindings.Option_u64Z)
    public func clone() -> LightningDevKit.Bindings.ChannelReady
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_UpdateFailHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFailHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UpdateFailHTLCDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UpdateFailHTLCDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFailHTLC?
    public class func ok(o: LightningDevKit.Bindings.UpdateFailHTLC) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
  }
}
public typealias HTLCOutputInCommitment = LightningDevKit.Bindings.HTLCOutputInCommitment
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCOutputInCommitment : LightningDevKit.NativeTypeWrapper {
    public init(offered_arg: Swift.Bool, amount_msat_arg: Swift.UInt64, cltv_expiry_arg: Swift.UInt32, payment_hash_arg: [Swift.UInt8], transaction_output_index_arg: LightningDevKit.Bindings.Option_u32Z)
    public init(pointer: LightningDevKit.LDKHTLCOutputInCommitment)
    public init(pointer: LightningDevKit.LDKHTLCOutputInCommitment, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_offered() -> Swift.Bool
    public func set_offered(val: Swift.Bool)
    public func get_amount_msat() -> Swift.UInt64
    public func set_amount_msat(val: Swift.UInt64)
    public func get_cltv_expiry() -> Swift.UInt32
    public func set_cltv_expiry(val: Swift.UInt32)
    public func get_payment_hash() -> [Swift.UInt8]
    public func set_payment_hash(val: [Swift.UInt8])
    public func get_transaction_output_index() -> LightningDevKit.Bindings.Option_u32Z
    public func set_transaction_output_index(val: LightningDevKit.Bindings.Option_u32Z)
    public func clone() -> LightningDevKit.Bindings.HTLCOutputInCommitment
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HTLCOutputInCommitmentDecodeErrorZ
    @objc deinit
  }
}
public typealias RouteHop = LightningDevKit.Bindings.RouteHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHop : LightningDevKit.NativeTypeWrapper {
    public init(pubkey_arg: [Swift.UInt8], node_features_arg: LightningDevKit.Bindings.NodeFeatures, short_channel_id_arg: Swift.UInt64, channel_features_arg: LightningDevKit.Bindings.ChannelFeatures, fee_msat_arg: Swift.UInt64, cltv_expiry_delta_arg: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKRouteHop)
    public init(pointer: LightningDevKit.LDKRouteHop, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_pubkey() -> [Swift.UInt8]
    public func set_pubkey(val: [Swift.UInt8])
    public func get_node_features() -> LightningDevKit.Bindings.NodeFeatures
    public func set_node_features(val: LightningDevKit.Bindings.NodeFeatures)
    public func get_short_channel_id() -> Swift.UInt64
    public func set_short_channel_id(val: Swift.UInt64)
    public func get_channel_features() -> LightningDevKit.Bindings.ChannelFeatures
    public func set_channel_features(val: LightningDevKit.Bindings.ChannelFeatures)
    public func get_fee_msat() -> Swift.UInt64
    public func set_fee_msat(val: Swift.UInt64)
    public func get_cltv_expiry_delta() -> Swift.UInt32
    public func set_cltv_expiry_delta(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.RouteHop
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHop, b: LightningDevKit.Bindings.RouteHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    @objc deinit
  }
}
public typealias KeysManager = LightningDevKit.Bindings.KeysManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class KeysManager : LightningDevKit.NativeTypeWrapper {
    public init(seed: [Swift.UInt8], starting_time_secs: Swift.UInt64, starting_time_nanos: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKKeysManager)
    public init(pointer: LightningDevKit.LDKKeysManager, anchor: LightningDevKit.NativeTypeWrapper)
    public func derive_channel_keys(channel_value_satoshis: Swift.UInt64, params: [Swift.UInt8]) -> LightningDevKit.Bindings.InMemorySigner
    public func spend_spendable_outputs(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], change_destination_script: [Swift.UInt8], feerate_sat_per_1000_weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func as_KeysInterface() -> LightningDevKit.NativelyImplementedKeysInterface
    @objc deinit
  }
}
public typealias Result_ClosingSignedDecodeErrorZ = LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClosingSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ClosingSignedDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ClosingSignedDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosingSigned?
    public class func ok(o: LightningDevKit.Bindings.ClosingSigned) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ClosingSignedDecodeErrorZ
  }
}
public typealias ChannelHandshakeConfig = LightningDevKit.Bindings.ChannelHandshakeConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelHandshakeConfig : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKChannelHandshakeConfig)
    public init(pointer: LightningDevKit.LDKChannelHandshakeConfig, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_minimum_depth() -> Swift.UInt32
    public func set_minimum_depth(val: Swift.UInt32)
    public func get_our_to_self_delay() -> Swift.UInt16
    public func set_our_to_self_delay(val: Swift.UInt16)
    public func get_our_htlc_minimum_msat() -> Swift.UInt64
    public func set_our_htlc_minimum_msat(val: Swift.UInt64)
    public func get_max_inbound_htlc_value_in_flight_percent_of_channel() -> Swift.UInt8
    public func set_max_inbound_htlc_value_in_flight_percent_of_channel(val: Swift.UInt8)
    public func get_negotiate_scid_privacy() -> Swift.Bool
    public func set_negotiate_scid_privacy(val: Swift.Bool)
    public func get_announced_channel() -> Swift.Bool
    public func set_announced_channel(val: Swift.Bool)
    public func get_commit_upfront_shutdown_pubkey() -> Swift.Bool
    public func set_commit_upfront_shutdown_pubkey(val: Swift.Bool)
    public func clone() -> LightningDevKit.Bindings.ChannelHandshakeConfig
    @objc deinit
  }
}
public typealias ChannelMonitor = LightningDevKit.Bindings.ChannelMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelMonitor : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKChannelMonitor)
    public init(pointer: LightningDevKit.LDKChannelMonitor, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.ChannelMonitor
    public func write() -> [Swift.UInt8]
    public func update_monitor(updates: LightningDevKit.Bindings.ChannelMonitorUpdate, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_NoneNoneZ
    public func get_latest_update_id() -> Swift.UInt64
    public func get_funding_txo() -> LightningDevKit.Bindings.C2Tuple_OutPointScriptZ
    public func get_outputs_to_watch() -> [LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
    public func load_outputs_to_watch(filter: LightningDevKit.Bindings.Filter)
    public func get_and_clear_pending_monitor_events() -> [LightningDevKit.Bindings.MonitorEvent]
    public func get_and_clear_pending_events() -> [LightningDevKit.Bindings.Event]
    public func get_counterparty_node_id() -> [Swift.UInt8]
    public func get_latest_holder_commitment_txn(logger: LightningDevKit.Bindings.Logger) -> [[Swift.UInt8]]
    public func block_connected(header: [Swift.UInt8], txdata: [LightningDevKit.Bindings.C2Tuple_usizeTransactionZ], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [LightningDevKit.TransactionOutputs]
    public func block_disconnected(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func transactions_confirmed(header: [Swift.UInt8], txdata: [LightningDevKit.Bindings.C2Tuple_usizeTransactionZ], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [LightningDevKit.TransactionOutputs]
    public func transaction_unconfirmed(txid: [Swift.UInt8], broadcaster: LightningDevKit.Bindings.BroadcasterInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger)
    public func best_block_updated(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, logger: LightningDevKit.Bindings.Logger) -> [LightningDevKit.TransactionOutputs]
    public func get_relevant_txids() -> [[Swift.UInt8]]
    public func current_best_block() -> LightningDevKit.Bindings.BestBlock
    public func get_claimable_balances() -> [LightningDevKit.Bindings.Balance]
    @objc deinit
  }
}
public typealias PaymentError = LightningDevKit.Bindings.PaymentError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKPaymentError)
    public init(pointer: LightningDevKit.LDKPaymentError, anchor: LightningDevKit.NativeTypeWrapper)
    public enum PaymentErrorValueType {
      case Invoice, Routing, Sending
      public static func == (a: LightningDevKit.Bindings.PaymentError.PaymentErrorValueType, b: LightningDevKit.Bindings.PaymentError.PaymentErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentError.PaymentErrorValueType?
    public func getValueAsInvoice() -> Swift.String?
    public func getValueAsRouting() -> LightningDevKit.Bindings.LightningError?
    public func getValueAsSending() -> LightningDevKit.Bindings.PaymentSendFailure?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.PaymentError
    public class func invoice(a: Swift.String) -> LightningDevKit.Bindings.PaymentError
    public class func routing(a: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.PaymentError
    public class func sending(a: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.PaymentError
  }
}
public typealias Result_DescriptionCreationErrorZ = LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DescriptionCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_DescriptionCreationErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_DescriptionCreationErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKCreationError?
    public func getValue() -> LightningDevKit.Bindings.Description?
    public class func ok(o: LightningDevKit.Bindings.Description) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    public class func err(e: LightningDevKit.LDKCreationError) -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_DescriptionCreationErrorZ
  }
}
@_hasMissingDesignatedInitializers public class LDKExampleClass {
  public class func printSomething()
  public func printInstance()
  @objc deinit
}
public typealias C2Tuple_PaymentHashPaymentSecretZ = LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_PaymentHashPaymentSecretZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_PaymentHashPaymentSecretZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_PaymentHashPaymentSecretZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ
    public class func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> [Swift.UInt8]
  }
}
public typealias Result_CommitmentSignedDecodeErrorZ = LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CommitmentSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CommitmentSignedDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CommitmentSignedDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CommitmentSigned?
    public class func ok(o: LightningDevKit.Bindings.CommitmentSigned) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
  }
}
public typealias Result_ChannelInfoDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelInfoDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelInfoDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelInfo?
    public class func ok(o: LightningDevKit.Bindings.ChannelInfo) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
  }
}
public typealias InvoiceFeatures = LightningDevKit.Bindings.InvoiceFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceFeatures : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKInvoiceFeatures)
    public init(pointer: LightningDevKit.LDKInvoiceFeatures, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.InvoiceFeatures, b: LightningDevKit.Bindings.InvoiceFeatures) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.InvoiceFeatures
    public func requires_unknown_bits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InvoiceFeaturesDecodeErrorZ
    public func set_variable_length_onion_optional()
    public func set_variable_length_onion_required()
    public func supports_variable_length_onion() -> Swift.Bool
    public func requires_variable_length_onion() -> Swift.Bool
    public func set_payment_secret_optional()
    public func set_payment_secret_required()
    public func supports_payment_secret() -> Swift.Bool
    public func requires_payment_secret() -> Swift.Bool
    public func set_basic_mpp_optional()
    public func set_basic_mpp_required()
    public func supports_basic_mpp() -> Swift.Bool
    public func requires_basic_mpp() -> Swift.Bool
    @objc deinit
  }
}
public typealias ChannelReestablish = LightningDevKit.Bindings.ChannelReestablish
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelReestablish : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKChannelReestablish)
    public init(pointer: LightningDevKit.LDKChannelReestablish, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_next_local_commitment_number() -> Swift.UInt64
    public func set_next_local_commitment_number(val: Swift.UInt64)
    public func get_next_remote_commitment_number() -> Swift.UInt64
    public func set_next_remote_commitment_number(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.ChannelReestablish
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    @objc deinit
  }
}
public typealias HolderCommitmentTransaction = LightningDevKit.Bindings.HolderCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HolderCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public init(commitment_tx: LightningDevKit.Bindings.CommitmentTransaction, counterparty_sig: [Swift.UInt8], counterparty_htlc_sigs: [[Swift.UInt8]], holder_funding_key: [Swift.UInt8], counterparty_funding_key: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKHolderCommitmentTransaction)
    public init(pointer: LightningDevKit.LDKHolderCommitmentTransaction, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_counterparty_sig() -> [Swift.UInt8]
    public func set_counterparty_sig(val: [Swift.UInt8])
    public func get_counterparty_htlc_sigs() -> [[Swift.UInt8]]
    public func set_counterparty_htlc_sigs(val: [[Swift.UInt8]])
    public func clone() -> LightningDevKit.Bindings.HolderCommitmentTransaction
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_HolderCommitmentTransactionDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_PaymentPreimageAPIErrorZ = LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentPreimageAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentPreimageAPIErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentPreimageAPIErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
    public class func err(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
  }
}
public typealias MonitorUpdateId = LightningDevKit.Bindings.MonitorUpdateId
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorUpdateId : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKMonitorUpdateId)
    public init(pointer: LightningDevKit.LDKMonitorUpdateId, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.MonitorUpdateId
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.MonitorUpdateId, b: LightningDevKit.Bindings.MonitorUpdateId) -> Swift.Bool
    @objc deinit
  }
}
public typealias Option_u16Z = LightningDevKit.Bindings.Option_u16Z
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_u16Z : LightningDevKit.NativeTypeWrapper {
    public init(value: Swift.UInt16?)
    public init(pointer: LightningDevKit.LDKCOption_u16Z)
    public init(pointer: LightningDevKit.LDKCOption_u16Z, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> Swift.UInt16?
    public class func some(o: Swift.UInt16) -> LightningDevKit.Bindings.Option_u16Z
    public class func none() -> LightningDevKit.Bindings.Option_u16Z
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_u16Z
  }
}
public typealias NodeAnnouncement = LightningDevKit.Bindings.NodeAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAnnouncement : LightningDevKit.NativeTypeWrapper {
    public init(signature_arg: [Swift.UInt8], contents_arg: LightningDevKit.Bindings.UnsignedNodeAnnouncement)
    public init(pointer: LightningDevKit.LDKNodeAnnouncement)
    public init(pointer: LightningDevKit.LDKNodeAnnouncement, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_signature() -> [Swift.UInt8]
    public func set_signature(val: [Swift.UInt8])
    public func get_contents() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement
    public func set_contents(val: LightningDevKit.Bindings.UnsignedNodeAnnouncement)
    public func clone() -> LightningDevKit.Bindings.NodeAnnouncement
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_PaymentSecretNoneZ = LightningDevKit.Bindings.Result_PaymentSecretNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentSecretNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentSecretNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentSecretNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
  }
}
public typealias Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ = LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKIOError?
    public func getValue() -> [LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ]?
    public class func ok(o: [LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ]) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKIOError) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
  }
}
public typealias ChannelCounterparty = LightningDevKit.Bindings.ChannelCounterparty
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelCounterparty : LightningDevKit.NativeTypeWrapper {
    public init(node_id_arg: [Swift.UInt8], features_arg: LightningDevKit.Bindings.InitFeatures, unspendable_punishment_reserve_arg: Swift.UInt64, forwarding_info_arg: LightningDevKit.Bindings.CounterpartyForwardingInfo, outbound_htlc_minimum_msat_arg: LightningDevKit.Bindings.Option_u64Z, outbound_htlc_maximum_msat_arg: LightningDevKit.Bindings.Option_u64Z)
    public init(pointer: LightningDevKit.LDKChannelCounterparty)
    public init(pointer: LightningDevKit.LDKChannelCounterparty, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_node_id() -> [Swift.UInt8]
    public func set_node_id(val: [Swift.UInt8])
    public func get_features() -> LightningDevKit.Bindings.InitFeatures
    public func set_features(val: LightningDevKit.Bindings.InitFeatures)
    public func get_unspendable_punishment_reserve() -> Swift.UInt64
    public func set_unspendable_punishment_reserve(val: Swift.UInt64)
    public func get_forwarding_info() -> LightningDevKit.Bindings.CounterpartyForwardingInfo
    public func set_forwarding_info(val: LightningDevKit.Bindings.CounterpartyForwardingInfo)
    public func get_outbound_htlc_minimum_msat() -> LightningDevKit.Bindings.Option_u64Z
    public func set_outbound_htlc_minimum_msat(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_outbound_htlc_maximum_msat() -> LightningDevKit.Bindings.Option_u64Z
    public func set_outbound_htlc_maximum_msat(val: LightningDevKit.Bindings.Option_u64Z)
    public func clone() -> LightningDevKit.Bindings.ChannelCounterparty
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_LockedChannelMonitorNoneZ = LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_LockedChannelMonitorNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_LockedChannelMonitorNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_LockedChannelMonitorNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.LockedChannelMonitor?
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func ok(o: LightningDevKit.Bindings.LockedChannelMonitor) -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    @objc deinit
  }
}
public typealias Bech32Error = LightningDevKit.Bindings.Bech32Error
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Bech32Error : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKBech32Error)
    public init(pointer: LightningDevKit.LDKBech32Error, anchor: LightningDevKit.NativeTypeWrapper)
    public enum Bech32ErrorValueType {
      case InvalidChar, InvalidData
      public static func == (a: LightningDevKit.Bindings.Bech32Error.Bech32ErrorValueType, b: LightningDevKit.Bindings.Bech32Error.Bech32ErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Bech32Error.Bech32ErrorValueType?
    public func getValueAsInvalidChar() -> Swift.UInt32?
    public func getValueAsInvalidData() -> Swift.UInt8?
    public func clone() -> LightningDevKit.Bindings.Bech32Error
    @objc deinit
  }
}
public typealias NodeAlias = LightningDevKit.Bindings.NodeAlias
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAlias : LightningDevKit.NativeTypeWrapper {
    public init(a_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKNodeAlias)
    public init(pointer: LightningDevKit.LDKNodeAlias, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_a() -> [Swift.UInt8]
    public func set_a(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.NodeAlias
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ = LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_BlockHashChannelManagerZ?
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_BlockHashChannelManagerZ) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
    @objc deinit
  }
}
public typealias C2Tuple_usizeTransactionZ = LightningDevKit.Bindings.C2Tuple_usizeTransactionZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_usizeTransactionZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_usizeTransactionZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_usizeTransactionZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_usizeTransactionZ
    public class func new(a: Swift.UInt, b: [Swift.UInt8]) -> LightningDevKit.Bindings.C2Tuple_usizeTransactionZ
    @objc deinit
    public func getA() -> Swift.UInt
    public func getB() -> [Swift.UInt8]
  }
}
public typealias TxOut = LightningDevKit.Bindings.TxOut
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxOut : LightningDevKit.NativeTypeWrapper {
    public init(script_pubkey: [Swift.UInt8], value: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKTxOut)
    public init(pointer: LightningDevKit.LDKTxOut, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.TxOut
    @objc deinit
    public func get_script_pubkey() -> [Swift.UInt8]
    public func get_value() -> Swift.UInt64
  }
}
public typealias Result_RouteHintHopDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHintHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RouteHintHopDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RouteHintHopDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHintHop?
    public class func ok(o: LightningDevKit.Bindings.RouteHintHop) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
  }
}
public typealias Option_HTLCDestinationZ = LightningDevKit.Bindings.Option_HTLCDestinationZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_HTLCDestinationZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.HTLCDestination?)
    public init(pointer: LightningDevKit.LDKCOption_HTLCDestinationZ)
    public init(pointer: LightningDevKit.LDKCOption_HTLCDestinationZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.HTLCDestination?
    public class func some(o: LightningDevKit.Bindings.HTLCDestination) -> LightningDevKit.Bindings.Option_HTLCDestinationZ
    public class func none() -> LightningDevKit.Bindings.Option_HTLCDestinationZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_HTLCDestinationZ
  }
}
public typealias Result_NonePeerHandleErrorZ = LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NonePeerHandleErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NonePeerHandleErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public class func ok() -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    public class func err(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NonePeerHandleErrorZ
  }
}
public typealias C2Tuple_u64u64Z = LightningDevKit.Bindings.C2Tuple_u64u64Z
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_u64u64Z : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_u64u64Z)
    public init(pointer: LightningDevKit.LDKC2Tuple_u64u64Z, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_u64u64Z
    public class func new(a: Swift.UInt64, b: Swift.UInt64) -> LightningDevKit.Bindings.C2Tuple_u64u64Z
    @objc deinit
    public func getA() -> Swift.UInt64
    public func getB() -> Swift.UInt64
  }
}
public typealias QueryShortChannelIds = LightningDevKit.Bindings.QueryShortChannelIds
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class QueryShortChannelIds : LightningDevKit.NativeTypeWrapper {
    public init(chain_hash_arg: [Swift.UInt8], short_channel_ids_arg: [Swift.UInt64])
    public init(pointer: LightningDevKit.LDKQueryShortChannelIds)
    public init(pointer: LightningDevKit.LDKQueryShortChannelIds, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_short_channel_ids() -> [Swift.UInt64]
    public func set_short_channel_ids(val: [Swift.UInt64])
    public func clone() -> LightningDevKit.Bindings.QueryShortChannelIds
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias Result_QueryShortChannelIdsDecodeErrorZ = LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_QueryShortChannelIdsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_QueryShortChannelIdsDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_QueryShortChannelIdsDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.QueryShortChannelIds?
    public class func ok(o: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_QueryShortChannelIdsDecodeErrorZ
  }
}
public typealias BackgroundProcessor = LightningDevKit.Bindings.BackgroundProcessor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BackgroundProcessor : LightningDevKit.NativeTypeWrapper {
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(persister: LightningDevKit.Bindings.Persister, event_handler: LightningDevKit.Bindings.EventHandler, chain_monitor: LightningDevKit.Bindings.ChainMonitor, channel_manager: LightningDevKit.Bindings.ChannelManager, gossip_sync: LightningDevKit.Bindings.GossipSync, peer_manager: LightningDevKit.Bindings.PeerManager, logger: LightningDevKit.Bindings.Logger, scorer: LightningDevKit.Bindings.MultiThreadedLockableScore?)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKBackgroundProcessor)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKBackgroundProcessor, anchor: LightningDevKit.NativeTypeWrapper)
    public func join() -> LightningDevKit.Bindings.Result_NoneErrorZ
    public func stop() -> LightningDevKit.Bindings.Result_NoneErrorZ
    @objc deinit
  }
}
public typealias PayeePubKey = LightningDevKit.Bindings.PayeePubKey
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PayeePubKey : LightningDevKit.NativeTypeWrapper {
    public init(a_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKPayeePubKey)
    public init(pointer: LightningDevKit.LDKPayeePubKey, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_a() -> [Swift.UInt8]
    public func set_a(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.PayeePubKey
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PayeePubKey, b: LightningDevKit.Bindings.PayeePubKey) -> Swift.Bool
    @objc deinit
  }
}
public typealias WatchedOutput = LightningDevKit.Bindings.WatchedOutput
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WatchedOutput : LightningDevKit.NativeTypeWrapper {
    public init(block_hash_arg: [Swift.UInt8], outpoint_arg: LightningDevKit.Bindings.OutPoint, script_pubkey_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKWatchedOutput)
    public init(pointer: LightningDevKit.LDKWatchedOutput, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_block_hash() -> [Swift.UInt8]
    public func set_block_hash(val: [Swift.UInt8])
    public func get_outpoint() -> LightningDevKit.Bindings.OutPoint?
    public func set_outpoint(val: LightningDevKit.Bindings.OutPoint)
    public func get_script_pubkey() -> [Swift.UInt8]
    public func set_script_pubkey(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.WatchedOutput
    public func hash() -> Swift.UInt64
    @objc deinit
  }
}
public typealias C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ = LightningDevKit.Bindings.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ)
    public init(pointer: LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
    public class func new(a: LightningDevKit.Bindings.ChannelAnnouncement, b: LightningDevKit.Bindings.ChannelUpdate, c: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
    @objc deinit
    public func getA() -> LightningDevKit.Bindings.ChannelAnnouncement
    public func getB() -> LightningDevKit.Bindings.ChannelUpdate
    public func getC() -> LightningDevKit.Bindings.ChannelUpdate
  }
}
public typealias Hostname = LightningDevKit.Bindings.Hostname
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Hostname : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKHostname)
    public init(pointer: LightningDevKit.LDKHostname, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.Hostname
    public func len() -> Swift.UInt8
    @objc deinit
  }
}
public typealias C2Tuple_u32ScriptZ = LightningDevKit.Bindings.C2Tuple_u32ScriptZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_u32ScriptZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_u32ScriptZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_u32ScriptZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_u32ScriptZ
    public class func new(a: Swift.UInt32, b: [Swift.UInt8]) -> LightningDevKit.Bindings.C2Tuple_u32ScriptZ
    @objc deinit
    public func getA() -> Swift.UInt32
    public func getB() -> [Swift.UInt8]
  }
}
public typealias Fallback = LightningDevKit.Bindings.Fallback
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Fallback : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKFallback)
    public init(pointer: LightningDevKit.LDKFallback, anchor: LightningDevKit.NativeTypeWrapper)
    public enum FallbackValueType {
      case SegWitProgram, PubKeyHash, ScriptHash
      public static func == (a: LightningDevKit.Bindings.Fallback.FallbackValueType, b: LightningDevKit.Bindings.Fallback.FallbackValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Fallback.FallbackValueType?
    public func getValueAsSegWitProgram() -> LightningDevKit.Bindings.Fallback.SegWitProgram?
    public func getValueAsPubKeyHash() -> [Swift.UInt8]?
    public func getValueAsScriptHash() -> [Swift.UInt8]?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Fallback
    public class func seg_wit_program(version: Swift.UInt8, program: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public class func pub_key_hash(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public class func script_hash(a: [Swift.UInt8]) -> LightningDevKit.Bindings.Fallback
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Fallback, b: LightningDevKit.Bindings.Fallback) -> Swift.Bool
    @_hasMissingDesignatedInitializers public class SegWitProgram : LightningDevKit.NativeTypeWrapper {
      public func getVersion() -> Swift.UInt8
      public func getProgram() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias Result_NonePaymentSendFailureZ = LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NonePaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NonePaymentSendFailureZ)
    public init(pointer: LightningDevKit.LDKCResult_NonePaymentSendFailureZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public class func ok() -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public class func err(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
  }
}
public typealias UpdateFulfillHTLC = LightningDevKit.Bindings.UpdateFulfillHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFulfillHTLC : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], htlc_id_arg: Swift.UInt64, payment_preimage_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKUpdateFulfillHTLC)
    public init(pointer: LightningDevKit.LDKUpdateFulfillHTLC, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_htlc_id() -> Swift.UInt64
    public func set_htlc_id(val: Swift.UInt64)
    public func get_payment_preimage() -> [Swift.UInt8]
    public func set_payment_preimage(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.UpdateFulfillHTLC
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_ChannelConfigDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelConfigDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelConfigDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelConfigDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelConfig?
    public class func ok(o: LightningDevKit.Bindings.ChannelConfig) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
  }
}
public typealias Result_CVec_CVec_u8ZZNoneZ = LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_CVec_u8ZZNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CVec_CVec_u8ZZNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_CVec_CVec_u8ZZNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [[Swift.UInt8]]?
    public class func ok(o: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
  }
}
public typealias Result_COption_NetworkUpdateZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_NetworkUpdateZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_COption_NetworkUpdateZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_COption_NetworkUpdateZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Option_NetworkUpdateZ?
    public class func ok(o: LightningDevKit.Bindings.Option_NetworkUpdateZ) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
  }
}
public typealias Result_ChannelAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelAnnouncementDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelAnnouncementDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelAnnouncement?
    public class func ok(o: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelAnnouncementDecodeErrorZ
  }
}
public typealias Result_NoneErrorZ = LightningDevKit.Bindings.Result_NoneErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NoneErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NoneErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKIOError?
    public class func ok() -> LightningDevKit.Bindings.Result_NoneErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKIOError) -> LightningDevKit.Bindings.Result_NoneErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NoneErrorZ
  }
}
public typealias Result_FundingSignedDecodeErrorZ = LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FundingSignedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_FundingSignedDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_FundingSignedDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FundingSigned?
    public class func ok(o: LightningDevKit.Bindings.FundingSigned) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
  }
}
public typealias Result_ReplyChannelRangeDecodeErrorZ = LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ReplyChannelRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ReplyChannelRangeDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ReplyChannelRangeDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ReplyChannelRange?
    public class func ok(o: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
  }
}
public typealias Option_C2Tuple_usizeTransactionZZ = LightningDevKit.Bindings.Option_C2Tuple_usizeTransactionZZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_C2Tuple_usizeTransactionZZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.C2Tuple_usizeTransactionZ?)
    public init(pointer: LightningDevKit.LDKCOption_C2Tuple_usizeTransactionZZ)
    public init(pointer: LightningDevKit.LDKCOption_C2Tuple_usizeTransactionZZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_usizeTransactionZ?
    public class func some(o: LightningDevKit.Bindings.C2Tuple_usizeTransactionZ) -> LightningDevKit.Bindings.Option_C2Tuple_usizeTransactionZZ
    public class func none() -> LightningDevKit.Bindings.Option_C2Tuple_usizeTransactionZZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_C2Tuple_usizeTransactionZZ
  }
}
public typealias Option_NetworkUpdateZ = LightningDevKit.Bindings.Option_NetworkUpdateZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_NetworkUpdateZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.NetworkUpdate?)
    public init(pointer: LightningDevKit.LDKCOption_NetworkUpdateZ)
    public init(pointer: LightningDevKit.LDKCOption_NetworkUpdateZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.NetworkUpdate?
    public class func some(o: LightningDevKit.Bindings.NetworkUpdate) -> LightningDevKit.Bindings.Option_NetworkUpdateZ
    public class func none() -> LightningDevKit.Bindings.Option_NetworkUpdateZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_NetworkUpdateZ
  }
}
public typealias FundingSigned = LightningDevKit.Bindings.FundingSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FundingSigned : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], signature_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKFundingSigned)
    public init(pointer: LightningDevKit.LDKFundingSigned, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_signature() -> [Swift.UInt8]
    public func set_signature(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.FundingSigned
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FundingSignedDecodeErrorZ
    @objc deinit
  }
}
public typealias ReplyChannelRange = LightningDevKit.Bindings.ReplyChannelRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReplyChannelRange : LightningDevKit.NativeTypeWrapper {
    public init(chain_hash_arg: [Swift.UInt8], first_blocknum_arg: Swift.UInt32, number_of_blocks_arg: Swift.UInt32, sync_complete_arg: Swift.Bool, short_channel_ids_arg: [Swift.UInt64])
    public init(pointer: LightningDevKit.LDKReplyChannelRange)
    public init(pointer: LightningDevKit.LDKReplyChannelRange, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_first_blocknum() -> Swift.UInt32
    public func set_first_blocknum(val: Swift.UInt32)
    public func get_number_of_blocks() -> Swift.UInt32
    public func set_number_of_blocks(val: Swift.UInt32)
    public func get_sync_complete() -> Swift.Bool
    public func set_sync_complete(val: Swift.Bool)
    public func get_short_channel_ids() -> [Swift.UInt64]
    public func set_short_channel_ids(val: [Swift.UInt64])
    public func clone() -> LightningDevKit.Bindings.ReplyChannelRange
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ReplyChannelRangeDecodeErrorZ
    public func write() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias Result_PrivateRouteCreationErrorZ = LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PrivateRouteCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PrivateRouteCreationErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PrivateRouteCreationErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKCreationError?
    public func getValue() -> LightningDevKit.Bindings.PrivateRoute?
    public class func ok(o: LightningDevKit.Bindings.PrivateRoute) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public class func err(e: LightningDevKit.LDKCreationError) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
  }
}
public typealias Result_ChannelDetailsDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelDetailsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelDetailsDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelDetailsDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelDetails?
    public class func ok(o: LightningDevKit.Bindings.ChannelDetails) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
  }
}
public typealias Confirm = LightningDevKit.Bindings.Confirm
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Confirm : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKConfirm)
    public init(pointer: LightningDevKit.LDKConfirm, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LightningDevKit.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
    open func transaction_unconfirmed(txid: [Swift.UInt8]?)
    open func best_block_updated(header: [Swift.UInt8]?, height: Swift.UInt32)
    open func get_relevant_txids() -> [[Swift.UInt8]]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedConfirm : LightningDevKit.Confirm {
  public func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LightningDevKit.C2Tuple_usizeTransactionZ], height: Swift.UInt32)
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LightningDevKit.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
  override public func transaction_unconfirmed(txid: [Swift.UInt8]?)
  override public func best_block_updated(header: [Swift.UInt8]?, height: Swift.UInt32)
  override public func get_relevant_txids() -> [[Swift.UInt8]]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKConfirm)
  override public init(pointer: LightningDevKit.LDKConfirm, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_StringErrorZ = LightningDevKit.Bindings.Result_StringErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StringErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_StringErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_StringErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSecp256k1Error?
    public func getValue() -> Swift.String?
    public class func ok(o: Swift.String) -> LightningDevKit.Bindings.Result_StringErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKSecp256k1Error) -> LightningDevKit.Bindings.Result_StringErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_StringErrorZ
  }
}
public typealias BaseSign = LightningDevKit.Bindings.BaseSign
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BaseSign : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKBaseSign)
    public init(pointer: LightningDevKit.LDKBaseSign, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func get_per_commitment_point(idx: Swift.UInt64) -> [Swift.UInt8]
    open func release_commitment_secret(idx: Swift.UInt64) -> [Swift.UInt8]
    open func validate_holder_commitment(holder_tx: LightningDevKit.Bindings.HolderCommitmentTransaction, preimages: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func channel_keys_id() -> [Swift.UInt8]
    open func sign_counterparty_commitment(commitment_tx: LightningDevKit.Bindings.CommitmentTransaction, preimages: [[Swift.UInt8]]) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    open func validate_counterparty_revocation(idx: Swift.UInt64, secret: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_NoneNoneZ
    open func sign_holder_commitment_and_htlcs(commitment_tx: LightningDevKit.Bindings.HolderCommitmentTransaction) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    open func sign_justice_revoked_output(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func sign_justice_revoked_htlc(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?, htlc: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func sign_counterparty_htlc_transaction(htlc_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_point: [Swift.UInt8], htlc: LightningDevKit.Bindings.HTLCOutputInCommitment) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func sign_closing_transaction(closing_tx: LightningDevKit.Bindings.ClosingTransaction) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    open func sign_channel_announcement(msg: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
    open func ready_channel(channel_parameters: LightningDevKit.Bindings.ChannelTransactionParameters)
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedBaseSign : LightningDevKit.BaseSign {
  override public func get_per_commitment_point(idx: Swift.UInt64) -> [Swift.UInt8]
  override public func release_commitment_secret(idx: Swift.UInt64) -> [Swift.UInt8]
  override public func validate_holder_commitment(holder_tx: LightningDevKit.HolderCommitmentTransaction, preimages: [[Swift.UInt8]]) -> LightningDevKit.Result_NoneNoneZ
  override public func channel_keys_id() -> [Swift.UInt8]
  override public func sign_counterparty_commitment(commitment_tx: LightningDevKit.CommitmentTransaction, preimages: [[Swift.UInt8]]) -> LightningDevKit.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  override public func validate_counterparty_revocation(idx: Swift.UInt64, secret: [Swift.UInt8]?) -> LightningDevKit.Result_NoneNoneZ
  override public func sign_holder_commitment_and_htlcs(commitment_tx: LightningDevKit.HolderCommitmentTransaction) -> LightningDevKit.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  override public func sign_justice_revoked_output(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?) -> LightningDevKit.Result_SignatureNoneZ
  override public func sign_justice_revoked_htlc(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?, htlc: LightningDevKit.HTLCOutputInCommitment) -> LightningDevKit.Result_SignatureNoneZ
  override public func sign_counterparty_htlc_transaction(htlc_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_point: [Swift.UInt8], htlc: LightningDevKit.HTLCOutputInCommitment) -> LightningDevKit.Result_SignatureNoneZ
  override public func sign_closing_transaction(closing_tx: LightningDevKit.ClosingTransaction) -> LightningDevKit.Result_SignatureNoneZ
  override public func sign_channel_announcement(msg: LightningDevKit.UnsignedChannelAnnouncement) -> LightningDevKit.Result_C2Tuple_SignatureSignatureZNoneZ
  override public func ready_channel(channel_parameters: LightningDevKit.ChannelTransactionParameters)
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKBaseSign)
  override public init(pointer: LightningDevKit.LDKBaseSign, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Sign = LightningDevKit.Bindings.Sign
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Sign : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKSign)
    public init(pointer: LightningDevKit.LDKSign, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.Sign
    @objc deinit
    open func write() -> [Swift.UInt8]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedSign : LightningDevKit.Sign {
  override public func write() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKSign)
  override public init(pointer: LightningDevKit.LDKSign, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias MessageSendEvent = LightningDevKit.Bindings.MessageSendEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MessageSendEvent : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKMessageSendEvent)
    public init(pointer: LightningDevKit.LDKMessageSendEvent, anchor: LightningDevKit.NativeTypeWrapper)
    public enum MessageSendEventValueType {
      case SendAcceptChannel, SendOpenChannel, SendFundingCreated, SendFundingSigned, SendChannelReady, SendAnnouncementSignatures, UpdateHTLCs, SendRevokeAndACK, SendClosingSigned, SendShutdown, SendChannelReestablish, BroadcastChannelAnnouncement, BroadcastNodeAnnouncement, BroadcastChannelUpdate, SendChannelUpdate, HandleError, SendChannelRangeQuery, SendShortIdsQuery, SendReplyChannelRange, SendGossipTimestampFilter
      public static func == (a: LightningDevKit.Bindings.MessageSendEvent.MessageSendEventValueType, b: LightningDevKit.Bindings.MessageSendEvent.MessageSendEventValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MessageSendEvent.MessageSendEventValueType?
    public func getValueAsSendAcceptChannel() -> LightningDevKit.Bindings.MessageSendEvent.SendAcceptChannel?
    public func getValueAsSendOpenChannel() -> LightningDevKit.Bindings.MessageSendEvent.SendOpenChannel?
    public func getValueAsSendFundingCreated() -> LightningDevKit.Bindings.MessageSendEvent.SendFundingCreated?
    public func getValueAsSendFundingSigned() -> LightningDevKit.Bindings.MessageSendEvent.SendFundingSigned?
    public func getValueAsSendChannelReady() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelReady?
    public func getValueAsSendAnnouncementSignatures() -> LightningDevKit.Bindings.MessageSendEvent.SendAnnouncementSignatures?
    public func getValueAsUpdateHTLCs() -> LightningDevKit.Bindings.MessageSendEvent.UpdateHTLCs?
    public func getValueAsSendRevokeAndACK() -> LightningDevKit.Bindings.MessageSendEvent.SendRevokeAndACK?
    public func getValueAsSendClosingSigned() -> LightningDevKit.Bindings.MessageSendEvent.SendClosingSigned?
    public func getValueAsSendShutdown() -> LightningDevKit.Bindings.MessageSendEvent.SendShutdown?
    public func getValueAsSendChannelReestablish() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelReestablish?
    public func getValueAsBroadcastChannelAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastChannelAnnouncement?
    public func getValueAsBroadcastNodeAnnouncement() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastNodeAnnouncement?
    public func getValueAsBroadcastChannelUpdate() -> LightningDevKit.Bindings.MessageSendEvent.BroadcastChannelUpdate?
    public func getValueAsSendChannelUpdate() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelUpdate?
    public func getValueAsHandleError() -> LightningDevKit.Bindings.MessageSendEvent.HandleError?
    public func getValueAsSendChannelRangeQuery() -> LightningDevKit.Bindings.MessageSendEvent.SendChannelRangeQuery?
    public func getValueAsSendShortIdsQuery() -> LightningDevKit.Bindings.MessageSendEvent.SendShortIdsQuery?
    public func getValueAsSendReplyChannelRange() -> LightningDevKit.Bindings.MessageSendEvent.SendReplyChannelRange?
    public func getValueAsSendGossipTimestampFilter() -> LightningDevKit.Bindings.MessageSendEvent.SendGossipTimestampFilter?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_accept_channel(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.AcceptChannel) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_open_channel(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.OpenChannel) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_funding_created(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingCreated) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_funding_signed(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingSigned) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_channel_ready(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReady) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_announcement_signatures(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.AnnouncementSignatures) -> LightningDevKit.Bindings.MessageSendEvent
    public class func update_htlcs(node_id: [Swift.UInt8], updates: LightningDevKit.Bindings.CommitmentUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_revoke_and_ack(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.RevokeAndACK) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_closing_signed(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ClosingSigned) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_shutdown(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.Shutdown) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_channel_reestablish(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReestablish) -> LightningDevKit.Bindings.MessageSendEvent
    public class func broadcast_channel_announcement(msg: LightningDevKit.Bindings.ChannelAnnouncement, update_msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func broadcast_node_announcement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.MessageSendEvent
    public class func broadcast_channel_update(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_channel_update(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.MessageSendEvent
    public class func handle_error(node_id: [Swift.UInt8], action: LightningDevKit.Bindings.ErrorAction) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_channel_range_query(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_short_ids_query(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_reply_channel_range(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.MessageSendEvent
    public class func send_gossip_timestamp_filter(node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.GossipTimestampFilter) -> LightningDevKit.Bindings.MessageSendEvent
    @_hasMissingDesignatedInitializers public class SendAcceptChannel : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AcceptChannel
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendOpenChannel : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.OpenChannel
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendFundingCreated : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.FundingCreated
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendFundingSigned : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.FundingSigned
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelReady : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelReady
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendAnnouncementSignatures : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.AnnouncementSignatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class UpdateHTLCs : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getUpdates() -> LightningDevKit.Bindings.CommitmentUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendRevokeAndACK : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.RevokeAndACK
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendClosingSigned : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ClosingSigned
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendShutdown : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.Shutdown
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelReestablish : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelReestablish
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ChannelAnnouncement
      public func getUpdate_msg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastNodeAnnouncement : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.NodeAnnouncement
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class BroadcastChannelUpdate : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelUpdate : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HandleError : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getAction() -> LightningDevKit.Bindings.ErrorAction
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendChannelRangeQuery : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.QueryChannelRange
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendShortIdsQuery : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.QueryShortChannelIds
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendReplyChannelRange : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.ReplyChannelRange
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendGossipTimestampFilter : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getMsg() -> LightningDevKit.Bindings.GossipTimestampFilter
      @objc deinit
    }
  }
}
public typealias MessageHandler = LightningDevKit.Bindings.MessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MessageHandler : LightningDevKit.NativeTypeWrapper {
    public init(chan_handler_arg: LightningDevKit.Bindings.ChannelMessageHandler, route_handler_arg: LightningDevKit.Bindings.RoutingMessageHandler)
    public init(pointer: LightningDevKit.LDKMessageHandler)
    public init(pointer: LightningDevKit.LDKMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chan_handler() -> LightningDevKit.NativelyImplementedChannelMessageHandler
    public func set_chan_handler(val: LightningDevKit.Bindings.ChannelMessageHandler)
    public func get_route_handler() -> LightningDevKit.NativelyImplementedRoutingMessageHandler
    public func set_route_handler(val: LightningDevKit.Bindings.RoutingMessageHandler)
    @objc deinit
  }
}
public typealias Result_InitFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InitFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InitFeaturesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InitFeaturesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InitFeatures?
    public class func ok(o: LightningDevKit.Bindings.InitFeatures) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
  }
}
public typealias Result_ChannelTypeFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelTypeFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelTypeFeaturesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelTypeFeaturesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelTypeFeatures?
    public class func ok(o: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
  }
}
public typealias PhantomKeysManager = LightningDevKit.Bindings.PhantomKeysManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PhantomKeysManager : LightningDevKit.NativeTypeWrapper {
    public init(seed: [Swift.UInt8], starting_time_secs: Swift.UInt64, starting_time_nanos: Swift.UInt32, cross_node_seed: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKPhantomKeysManager)
    public init(pointer: LightningDevKit.LDKPhantomKeysManager, anchor: LightningDevKit.NativeTypeWrapper)
    public func as_KeysInterface() -> LightningDevKit.NativelyImplementedKeysInterface
    public func spend_spendable_outputs(descriptors: [LightningDevKit.Bindings.SpendableOutputDescriptor], outputs: [LightningDevKit.Bindings.TxOut], change_destination_script: [Swift.UInt8], feerate_sat_per_1000_weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public func derive_channel_keys(channel_value_satoshis: Swift.UInt64, params: [Swift.UInt8]) -> LightningDevKit.Bindings.InMemorySigner
    @objc deinit
  }
}
public typealias Result_NodeAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NodeAnnouncementDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NodeAnnouncementDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAnnouncement?
    public class func ok(o: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NodeAnnouncementDecodeErrorZ
  }
}
public typealias Result_SignedRawInvoiceParseErrorZ = LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignedRawInvoiceParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SignedRawInvoiceParseErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_SignedRawInvoiceParseErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseError?
    public func getValue() -> LightningDevKit.Bindings.SignedRawInvoice?
    public class func ok(o: LightningDevKit.Bindings.SignedRawInvoice) -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
    public class func err(e: LightningDevKit.Bindings.ParseError) -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
  }
}
public typealias LightningError = LightningDevKit.Bindings.LightningError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class LightningError : LightningDevKit.NativeTypeWrapper {
    public init(err_arg: Swift.String, action_arg: LightningDevKit.Bindings.ErrorAction)
    public init(pointer: LightningDevKit.LDKLightningError)
    public init(pointer: LightningDevKit.LDKLightningError, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_err() -> Swift.String
    public func set_err(val: Swift.String)
    public func get_action() -> LightningDevKit.Bindings.ErrorAction
    public func set_action(val: LightningDevKit.Bindings.ErrorAction)
    public func clone() -> LightningDevKit.Bindings.LightningError
    @objc deinit
  }
}
public typealias PrivateRoute = LightningDevKit.Bindings.PrivateRoute
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PrivateRoute : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKPrivateRoute)
    public init(pointer: LightningDevKit.LDKPrivateRoute, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.PrivateRoute
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.PrivateRoute, b: LightningDevKit.Bindings.PrivateRoute) -> Swift.Bool
    public class func new(hops: LightningDevKit.Bindings.RouteHint) -> LightningDevKit.Bindings.Result_PrivateRouteCreationErrorZ
    public func into_inner() -> LightningDevKit.Bindings.RouteHint
    @objc deinit
  }
}
public typealias Result_SpendableOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SpendableOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SpendableOutputDescriptorDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_SpendableOutputDescriptorDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.SpendableOutputDescriptor?
    public class func ok(o: LightningDevKit.Bindings.SpendableOutputDescriptor) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SpendableOutputDescriptorDecodeErrorZ
  }
}
public typealias Router = LightningDevKit.Bindings.Router
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Router : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKRouter)
    public init(pointer: LightningDevKit.LDKRouter, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func find_route(payer: [Swift.UInt8], route_params: LightningDevKit.Bindings.RouteParameters, payment_hash: [Swift.UInt8]?, first_hops: [LightningDevKit.LDKChannelDetails]?, scorer: LightningDevKit.Bindings.Score) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedRouter : LightningDevKit.Router {
  public func find_route(payer: [Swift.UInt8], route_params: LightningDevKit.RouteParameters, payment_hash: [Swift.UInt8]?, first_hops: [LightningDevKit.ChannelDetails]?, scorer: LightningDevKit.Score) -> LightningDevKit.Result_RouteLightningErrorZ
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func find_route(payer: [Swift.UInt8], route_params: LightningDevKit.RouteParameters, payment_hash: [Swift.UInt8]?, first_hops: [LightningDevKit.LDKChannelDetails]?, scorer: LightningDevKit.Score) -> LightningDevKit.Result_RouteLightningErrorZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKRouter)
  override public init(pointer: LightningDevKit.LDKRouter, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias ProbabilisticScoringParameters = LightningDevKit.Bindings.ProbabilisticScoringParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ProbabilisticScoringParameters : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKProbabilisticScoringParameters)
    public init(pointer: LightningDevKit.LDKProbabilisticScoringParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_base_penalty_msat() -> Swift.UInt64
    public func set_base_penalty_msat(val: Swift.UInt64)
    public func get_base_penalty_amount_multiplier_msat() -> Swift.UInt64
    public func set_base_penalty_amount_multiplier_msat(val: Swift.UInt64)
    public func get_liquidity_penalty_multiplier_msat() -> Swift.UInt64
    public func set_liquidity_penalty_multiplier_msat(val: Swift.UInt64)
    public func get_liquidity_offset_half_life() -> Swift.UInt64
    public func set_liquidity_offset_half_life(val: Swift.UInt64)
    public func get_liquidity_penalty_amount_multiplier_msat() -> Swift.UInt64
    public func set_liquidity_penalty_amount_multiplier_msat(val: Swift.UInt64)
    public func get_anti_probing_penalty_msat() -> Swift.UInt64
    public func set_anti_probing_penalty_msat(val: Swift.UInt64)
    public func get_considered_impossible_penalty_msat() -> Swift.UInt64
    public func set_considered_impossible_penalty_msat(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.ProbabilisticScoringParameters
    public func add_banned_from_list(node_ids: [LightningDevKit.Bindings.NodeId])
    @objc deinit
  }
}
public typealias PeerHandleError = LightningDevKit.Bindings.PeerHandleError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PeerHandleError : LightningDevKit.NativeTypeWrapper {
    public init(no_connection_possible_arg: Swift.Bool)
    public init(pointer: LightningDevKit.LDKPeerHandleError)
    public init(pointer: LightningDevKit.LDKPeerHandleError, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_no_connection_possible() -> Swift.Bool
    public func set_no_connection_possible(val: Swift.Bool)
    public func clone() -> LightningDevKit.Bindings.PeerHandleError
    @objc deinit
  }
}
public typealias C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ = LightningDevKit.Bindings.C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ)
    public init(pointer: LightningDevKit.LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ
    public class func new(a: LightningDevKit.Bindings.OutPoint, b: [LightningDevKit.Bindings.MonitorEvent], c: [Swift.UInt8]) -> LightningDevKit.Bindings.C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ
    @objc deinit
    public func getA() -> LightningDevKit.Bindings.OutPoint?
    public func getB() -> [LightningDevKit.Bindings.MonitorEvent]
    public func getC() -> [Swift.UInt8]
  }
}
public typealias ExpiryTime = LightningDevKit.Bindings.ExpiryTime
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ExpiryTime : LightningDevKit.NativeTypeWrapper {
    public init(duration: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKExpiryTime)
    public init(pointer: LightningDevKit.LDKExpiryTime, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.ExpiryTime
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.ExpiryTime, b: LightningDevKit.Bindings.ExpiryTime) -> Swift.Bool
    public func as_seconds() -> Swift.UInt64
    public func as_duration() -> Swift.UInt64
    @objc deinit
  }
}
public typealias Result_TxCreationKeysErrorZ = LightningDevKit.Bindings.Result_TxCreationKeysErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxCreationKeysErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_TxCreationKeysErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_TxCreationKeysErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSecp256k1Error?
    public func getValue() -> LightningDevKit.Bindings.TxCreationKeys?
    public class func ok(o: LightningDevKit.Bindings.TxCreationKeys) -> LightningDevKit.Bindings.Result_TxCreationKeysErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKSecp256k1Error) -> LightningDevKit.Bindings.Result_TxCreationKeysErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_TxCreationKeysErrorZ
  }
}
public typealias Result_NodeAliasDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAliasDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NodeAliasDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NodeAliasDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAlias?
    public class func ok(o: LightningDevKit.Bindings.NodeAlias) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NodeAliasDecodeErrorZ
  }
}
public typealias PaymentSendFailure = LightningDevKit.Bindings.PaymentSendFailure
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentSendFailure : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKPaymentSendFailure)
    public init(pointer: LightningDevKit.LDKPaymentSendFailure, anchor: LightningDevKit.NativeTypeWrapper)
    public enum PaymentSendFailureValueType {
      case ParameterError, PathParameterError, AllFailedRetrySafe, PartialFailure
      public static func == (a: LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureValueType, b: LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureValueType?
    public func getValueAsParameterError() -> LightningDevKit.Bindings.APIError?
    public func getValueAsPathParameterError() -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]?
    public func getValueAsAllFailedRetrySafe() -> [LightningDevKit.Bindings.APIError]?
    public func getValueAsPartialFailure() -> LightningDevKit.Bindings.PaymentSendFailure.PartialFailure?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.PaymentSendFailure
    public class func parameter_error(a: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func path_parameter_error(a: [LightningDevKit.Bindings.Result_NoneAPIErrorZ]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func all_failed_retry_safe(a: [LightningDevKit.Bindings.APIError]) -> LightningDevKit.Bindings.PaymentSendFailure
    public class func partial_failure(results: [LightningDevKit.Bindings.Result_NoneAPIErrorZ], failed_paths_retry: LightningDevKit.Bindings.RouteParameters, payment_id: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentSendFailure
    @_hasMissingDesignatedInitializers public class PartialFailure : LightningDevKit.NativeTypeWrapper {
      public func getResults() -> [LightningDevKit.Bindings.Result_NoneAPIErrorZ]
      public func getFailed_paths_retry() -> LightningDevKit.Bindings.RouteParameters
      public func getPayment_id() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias Result_SiPrefixParseErrorZ = LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SiPrefixParseErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SiPrefixParseErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_SiPrefixParseErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseError?
    public func getValue() -> LightningDevKit.LDKSiPrefix?
    public class func ok(o: LightningDevKit.LDKSiPrefix) -> LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
    public class func err(e: LightningDevKit.Bindings.ParseError) -> LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SiPrefixParseErrorZ
  }
}
public typealias ChannelInfo = LightningDevKit.Bindings.ChannelInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelInfo : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKChannelInfo)
    public init(pointer: LightningDevKit.LDKChannelInfo, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_features() -> LightningDevKit.Bindings.ChannelFeatures
    public func set_features(val: LightningDevKit.Bindings.ChannelFeatures)
    public func get_node_one() -> LightningDevKit.Bindings.NodeId
    public func set_node_one(val: LightningDevKit.Bindings.NodeId)
    public func get_one_to_two() -> LightningDevKit.Bindings.ChannelUpdateInfo
    public func set_one_to_two(val: LightningDevKit.Bindings.ChannelUpdateInfo)
    public func get_node_two() -> LightningDevKit.Bindings.NodeId
    public func set_node_two(val: LightningDevKit.Bindings.NodeId)
    public func get_two_to_one() -> LightningDevKit.Bindings.ChannelUpdateInfo
    public func set_two_to_one(val: LightningDevKit.Bindings.ChannelUpdateInfo)
    public func get_capacity_sats() -> LightningDevKit.Bindings.Option_u64Z
    public func set_capacity_sats(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_announcement_message() -> LightningDevKit.Bindings.ChannelAnnouncement
    public func set_announcement_message(val: LightningDevKit.Bindings.ChannelAnnouncement)
    public func clone() -> LightningDevKit.Bindings.ChannelInfo
    public func get_directional_info(channel_flags: Swift.UInt8) -> LightningDevKit.Bindings.ChannelUpdateInfo
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelInfoDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_NetAddressDecodeErrorZ = LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NetAddressDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NetAddressDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NetAddressDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetAddress?
    public class func ok(o: LightningDevKit.Bindings.NetAddress) -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
  }
}
public typealias APIError = LightningDevKit.Bindings.APIError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class APIError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKAPIError)
    public init(pointer: LightningDevKit.LDKAPIError, anchor: LightningDevKit.NativeTypeWrapper)
    public enum APIErrorValueType {
      case APIMisuseError, FeeRateTooHigh, RouteError, ChannelUnavailable, IncompatibleShutdownScript
      public static func == (a: LightningDevKit.Bindings.APIError.APIErrorValueType, b: LightningDevKit.Bindings.APIError.APIErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.APIError.APIErrorValueType?
    public func getValueAsAPIMisuseError() -> LightningDevKit.Bindings.APIError.APIMisuseError?
    public func getValueAsFeeRateTooHigh() -> LightningDevKit.Bindings.APIError.FeeRateTooHigh?
    public func getValueAsRouteError() -> LightningDevKit.Bindings.APIError.RouteError?
    public func getValueAsChannelUnavailable() -> LightningDevKit.Bindings.APIError.ChannelUnavailable?
    public func getValueAsIncompatibleShutdownScript() -> LightningDevKit.Bindings.APIError.IncompatibleShutdownScript?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.APIError
    public class func apimisuse_error(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func fee_rate_too_high(err: Swift.String, feerate: Swift.UInt32) -> LightningDevKit.Bindings.APIError
    public class func route_error(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func channel_unavailable(err: Swift.String) -> LightningDevKit.Bindings.APIError
    public class func monitor_update_failed() -> LightningDevKit.Bindings.APIError
    public class func incompatible_shutdown_script(script: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.APIError
    @_hasMissingDesignatedInitializers public class APIMisuseError : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class FeeRateTooHigh : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      public func getFeerate() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class RouteError : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelUnavailable : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class IncompatibleShutdownScript : LightningDevKit.NativeTypeWrapper {
      public func getScript() -> LightningDevKit.Bindings.ShutdownScript
      @objc deinit
    }
  }
}
public typealias ChannelDetails = LightningDevKit.Bindings.ChannelDetails
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelDetails : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], counterparty_arg: LightningDevKit.Bindings.ChannelCounterparty, funding_txo_arg: LightningDevKit.Bindings.OutPoint, channel_type_arg: LightningDevKit.Bindings.ChannelTypeFeatures, short_channel_id_arg: LightningDevKit.Bindings.Option_u64Z, outbound_scid_alias_arg: LightningDevKit.Bindings.Option_u64Z, inbound_scid_alias_arg: LightningDevKit.Bindings.Option_u64Z, channel_value_satoshis_arg: Swift.UInt64, unspendable_punishment_reserve_arg: LightningDevKit.Bindings.Option_u64Z, user_channel_id_arg: Swift.UInt64, balance_msat_arg: Swift.UInt64, outbound_capacity_msat_arg: Swift.UInt64, next_outbound_htlc_limit_msat_arg: Swift.UInt64, inbound_capacity_msat_arg: Swift.UInt64, confirmations_required_arg: LightningDevKit.Bindings.Option_u32Z, force_close_spend_delay_arg: LightningDevKit.Bindings.Option_u16Z, is_outbound_arg: Swift.Bool, is_channel_ready_arg: Swift.Bool, is_usable_arg: Swift.Bool, is_public_arg: Swift.Bool, inbound_htlc_minimum_msat_arg: LightningDevKit.Bindings.Option_u64Z, inbound_htlc_maximum_msat_arg: LightningDevKit.Bindings.Option_u64Z, config_arg: LightningDevKit.Bindings.ChannelConfig)
    public init(pointer: LightningDevKit.LDKChannelDetails)
    public init(pointer: LightningDevKit.LDKChannelDetails, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_counterparty() -> LightningDevKit.Bindings.ChannelCounterparty
    public func set_counterparty(val: LightningDevKit.Bindings.ChannelCounterparty)
    public func get_funding_txo() -> LightningDevKit.Bindings.OutPoint?
    public func set_funding_txo(val: LightningDevKit.Bindings.OutPoint)
    public func get_channel_type() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func set_channel_type(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func get_short_channel_id() -> LightningDevKit.Bindings.Option_u64Z
    public func set_short_channel_id(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_outbound_scid_alias() -> LightningDevKit.Bindings.Option_u64Z
    public func set_outbound_scid_alias(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_inbound_scid_alias() -> LightningDevKit.Bindings.Option_u64Z
    public func set_inbound_scid_alias(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_channel_value_satoshis() -> Swift.UInt64
    public func set_channel_value_satoshis(val: Swift.UInt64)
    public func get_unspendable_punishment_reserve() -> LightningDevKit.Bindings.Option_u64Z
    public func set_unspendable_punishment_reserve(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_user_channel_id() -> Swift.UInt64
    public func set_user_channel_id(val: Swift.UInt64)
    public func get_balance_msat() -> Swift.UInt64
    public func set_balance_msat(val: Swift.UInt64)
    public func get_outbound_capacity_msat() -> Swift.UInt64
    public func set_outbound_capacity_msat(val: Swift.UInt64)
    public func get_next_outbound_htlc_limit_msat() -> Swift.UInt64
    public func set_next_outbound_htlc_limit_msat(val: Swift.UInt64)
    public func get_inbound_capacity_msat() -> Swift.UInt64
    public func set_inbound_capacity_msat(val: Swift.UInt64)
    public func get_confirmations_required() -> LightningDevKit.Bindings.Option_u32Z
    public func set_confirmations_required(val: LightningDevKit.Bindings.Option_u32Z)
    public func get_force_close_spend_delay() -> LightningDevKit.Bindings.Option_u16Z
    public func set_force_close_spend_delay(val: LightningDevKit.Bindings.Option_u16Z)
    public func get_is_outbound() -> Swift.Bool
    public func set_is_outbound(val: Swift.Bool)
    public func get_is_channel_ready() -> Swift.Bool
    public func set_is_channel_ready(val: Swift.Bool)
    public func get_is_usable() -> Swift.Bool
    public func set_is_usable(val: Swift.Bool)
    public func get_is_public() -> Swift.Bool
    public func set_is_public(val: Swift.Bool)
    public func get_inbound_htlc_minimum_msat() -> LightningDevKit.Bindings.Option_u64Z
    public func set_inbound_htlc_minimum_msat(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_inbound_htlc_maximum_msat() -> LightningDevKit.Bindings.Option_u64Z
    public func set_inbound_htlc_maximum_msat(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_config() -> LightningDevKit.Bindings.ChannelConfig
    public func set_config(val: LightningDevKit.Bindings.ChannelConfig)
    public func clone() -> LightningDevKit.Bindings.ChannelDetails
    public func get_inbound_payment_scid() -> LightningDevKit.Bindings.Option_u64Z
    public func get_outbound_payment_scid() -> LightningDevKit.Bindings.Option_u64Z
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelDetailsDecodeErrorZ
    @objc deinit
  }
}
public typealias ChannelConfig = LightningDevKit.Bindings.ChannelConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelConfig : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKChannelConfig)
    public init(pointer: LightningDevKit.LDKChannelConfig, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_forwarding_fee_proportional_millionths() -> Swift.UInt32
    public func set_forwarding_fee_proportional_millionths(val: Swift.UInt32)
    public func get_forwarding_fee_base_msat() -> Swift.UInt32
    public func set_forwarding_fee_base_msat(val: Swift.UInt32)
    public func get_cltv_expiry_delta() -> Swift.UInt16
    public func set_cltv_expiry_delta(val: Swift.UInt16)
    public func get_max_dust_htlc_exposure_msat() -> Swift.UInt64
    public func set_max_dust_htlc_exposure_msat(val: Swift.UInt64)
    public func get_force_close_avoidance_max_fee_satoshis() -> Swift.UInt64
    public func set_force_close_avoidance_max_fee_satoshis(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.ChannelConfig
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelConfigDecodeErrorZ
    @objc deinit
  }
}
public typealias ErroringMessageHandler = LightningDevKit.Bindings.ErroringMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErroringMessageHandler : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKErroringMessageHandler)
    public init(pointer: LightningDevKit.LDKErroringMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
    public func as_MessageSendEventsProvider() -> LightningDevKit.NativelyImplementedMessageSendEventsProvider
    public func as_ChannelMessageHandler() -> LightningDevKit.NativelyImplementedChannelMessageHandler
    @objc deinit
  }
}
public typealias DecodeError = LightningDevKit.Bindings.DecodeError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DecodeError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKDecodeError)
    public init(pointer: LightningDevKit.LDKDecodeError, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.DecodeError
    @objc deinit
  }
}
public typealias Result_QueryChannelRangeDecodeErrorZ = LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_QueryChannelRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_QueryChannelRangeDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_QueryChannelRangeDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.QueryChannelRange?
    public class func ok(o: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
  }
}
public typealias EventsProvider = LightningDevKit.Bindings.EventsProvider
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EventsProvider : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKEventsProvider)
    public init(pointer: LightningDevKit.LDKEventsProvider, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func process_pending_events(handler: LightningDevKit.Bindings.EventHandler)
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedEventsProvider : LightningDevKit.EventsProvider {
  override public func process_pending_events(handler: LightningDevKit.EventHandler)
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKEventsProvider)
  override public init(pointer: LightningDevKit.LDKEventsProvider, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_COption_HTLCDestinationZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_HTLCDestinationZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_COption_HTLCDestinationZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_COption_HTLCDestinationZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Option_HTLCDestinationZ?
    public class func ok(o: LightningDevKit.Bindings.Option_HTLCDestinationZ) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
  }
}
public typealias CommitmentSigned = LightningDevKit.Bindings.CommitmentSigned
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentSigned : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], signature_arg: [Swift.UInt8], htlc_signatures_arg: [[Swift.UInt8]])
    public init(pointer: LightningDevKit.LDKCommitmentSigned)
    public init(pointer: LightningDevKit.LDKCommitmentSigned, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_signature() -> [Swift.UInt8]
    public func set_signature(val: [Swift.UInt8])
    public func get_htlc_signatures() -> [[Swift.UInt8]]
    public func set_htlc_signatures(val: [[Swift.UInt8]])
    public func clone() -> LightningDevKit.Bindings.CommitmentSigned
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CommitmentSignedDecodeErrorZ
    @objc deinit
  }
}
public typealias ErrorAction = LightningDevKit.Bindings.ErrorAction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErrorAction : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKErrorAction)
    public init(pointer: LightningDevKit.LDKErrorAction, anchor: LightningDevKit.NativeTypeWrapper)
    public enum ErrorActionValueType {
      case DisconnectPeer, IgnoreAndLog, SendErrorMessage, SendWarningMessage
      public static func == (a: LightningDevKit.Bindings.ErrorAction.ErrorActionValueType, b: LightningDevKit.Bindings.ErrorAction.ErrorActionValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ErrorAction.ErrorActionValueType?
    public func getValueAsDisconnectPeer() -> LightningDevKit.Bindings.ErrorAction.DisconnectPeer?
    public func getValueAsIgnoreAndLog() -> LightningDevKit.LDKLevel?
    public func getValueAsSendErrorMessage() -> LightningDevKit.Bindings.ErrorAction.SendErrorMessage?
    public func getValueAsSendWarningMessage() -> LightningDevKit.Bindings.ErrorAction.SendWarningMessage?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.ErrorAction
    public class func disconnect_peer(msg: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func ignore_error() -> LightningDevKit.Bindings.ErrorAction
    public class func ignore_and_log(a: LightningDevKit.LDKLevel) -> LightningDevKit.Bindings.ErrorAction
    public class func ignore_duplicate_gossip() -> LightningDevKit.Bindings.ErrorAction
    public class func send_error_message(msg: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.ErrorAction
    public class func send_warning_message(msg: LightningDevKit.Bindings.WarningMessage, log_level: LightningDevKit.LDKLevel) -> LightningDevKit.Bindings.ErrorAction
    @_hasMissingDesignatedInitializers public class DisconnectPeer : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ErrorMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendErrorMessage : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ErrorMessage
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SendWarningMessage : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.WarningMessage
      public func getLog_level() -> LightningDevKit.LDKLevel
      @objc deinit
    }
  }
}
public typealias Result_PublicKeyErrorZ = LightningDevKit.Bindings.Result_PublicKeyErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PublicKeyErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PublicKeyErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PublicKeyErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSecp256k1Error?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func err(e: LightningDevKit.LDKSecp256k1Error) -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PublicKeyErrorZ
  }
}
public typealias FeeEstimator = LightningDevKit.Bindings.FeeEstimator
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class FeeEstimator : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKFeeEstimator)
    public init(pointer: LightningDevKit.LDKFeeEstimator, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func get_est_sat_per_1000_weight(confirmation_target: LightningDevKit.LDKConfirmationTarget) -> Swift.UInt32
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedFeeEstimator : LightningDevKit.FeeEstimator {
  override public func get_est_sat_per_1000_weight(confirmation_target: LightningDevKit.LDKConfirmationTarget) -> Swift.UInt32
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKFeeEstimator)
  override public init(pointer: LightningDevKit.LDKFeeEstimator, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias UnsignedChannelAnnouncement = LightningDevKit.Bindings.UnsignedChannelAnnouncement
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedChannelAnnouncement : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKUnsignedChannelAnnouncement)
    public init(pointer: LightningDevKit.LDKUnsignedChannelAnnouncement, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_features() -> LightningDevKit.Bindings.ChannelFeatures
    public func set_features(val: LightningDevKit.Bindings.ChannelFeatures)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_short_channel_id() -> Swift.UInt64
    public func set_short_channel_id(val: Swift.UInt64)
    public func get_node_id_1() -> [Swift.UInt8]
    public func set_node_id_1(val: [Swift.UInt8])
    public func get_node_id_2() -> [Swift.UInt8]
    public func set_node_id_2(val: [Swift.UInt8])
    public func get_bitcoin_key_1() -> [Swift.UInt8]
    public func set_bitcoin_key_1(val: [Swift.UInt8])
    public func get_bitcoin_key_2() -> [Swift.UInt8]
    public func set_bitcoin_key_2(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    @objc deinit
  }
}
public typealias CustomMessageReader = LightningDevKit.Bindings.CustomMessageReader
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomMessageReader : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCustomMessageReader)
    public init(pointer: LightningDevKit.LDKCustomMessageReader, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func read(message_type: Swift.UInt16, buffer: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedCustomMessageReader : LightningDevKit.CustomMessageReader {
  override public func read(message_type: Swift.UInt16, buffer: [Swift.UInt8]) -> LightningDevKit.Result_COption_TypeZDecodeErrorZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKCustomMessageReader)
  override public init(pointer: LightningDevKit.LDKCustomMessageReader, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias ShutdownScript = LightningDevKit.Bindings.ShutdownScript
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ShutdownScript : LightningDevKit.NativeTypeWrapper {
    public init(script_hash: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKShutdownScript)
    public init(pointer: LightningDevKit.LDKShutdownScript, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.ShutdownScript
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public class func new_witness_program(version: Swift.UInt8, program: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public func into_inner() -> [Swift.UInt8]
    public func as_legacy_pubkey() -> [Swift.UInt8]
    public func is_compatible(features: LightningDevKit.Bindings.InitFeatures) -> Swift.Bool
    @objc deinit
  }
}
public typealias Event = LightningDevKit.Bindings.Event
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Event : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKEvent)
    public init(pointer: LightningDevKit.LDKEvent, anchor: LightningDevKit.NativeTypeWrapper)
    public enum EventValueType {
      case FundingGenerationReady, PaymentReceived, PaymentClaimed, PaymentSent, PaymentFailed, PaymentPathSuccessful, PaymentPathFailed, ProbeSuccessful, ProbeFailed, PendingHTLCsForwardable, SpendableOutputs, PaymentForwarded, ChannelClosed, DiscardFunding, OpenChannelRequest, HTLCHandlingFailed
      public static func == (a: LightningDevKit.Bindings.Event.EventValueType, b: LightningDevKit.Bindings.Event.EventValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Event.EventValueType?
    public func getValueAsFundingGenerationReady() -> LightningDevKit.Bindings.Event.FundingGenerationReady?
    public func getValueAsPaymentReceived() -> LightningDevKit.Bindings.Event.PaymentReceived?
    public func getValueAsPaymentClaimed() -> LightningDevKit.Bindings.Event.PaymentClaimed?
    public func getValueAsPaymentSent() -> LightningDevKit.Bindings.Event.PaymentSent?
    public func getValueAsPaymentFailed() -> LightningDevKit.Bindings.Event.PaymentFailed?
    public func getValueAsPaymentPathSuccessful() -> LightningDevKit.Bindings.Event.PaymentPathSuccessful?
    public func getValueAsPaymentPathFailed() -> LightningDevKit.Bindings.Event.PaymentPathFailed?
    public func getValueAsProbeSuccessful() -> LightningDevKit.Bindings.Event.ProbeSuccessful?
    public func getValueAsProbeFailed() -> LightningDevKit.Bindings.Event.ProbeFailed?
    public func getValueAsPendingHTLCsForwardable() -> LightningDevKit.Bindings.Event.PendingHTLCsForwardable?
    public func getValueAsSpendableOutputs() -> LightningDevKit.Bindings.Event.SpendableOutputs?
    public func getValueAsPaymentForwarded() -> LightningDevKit.Bindings.Event.PaymentForwarded?
    public func getValueAsChannelClosed() -> LightningDevKit.Bindings.Event.ChannelClosed?
    public func getValueAsDiscardFunding() -> LightningDevKit.Bindings.Event.DiscardFunding?
    public func getValueAsOpenChannelRequest() -> LightningDevKit.Bindings.Event.OpenChannelRequest?
    public func getValueAsHTLCHandlingFailed() -> LightningDevKit.Bindings.Event.HTLCHandlingFailed?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Event
    public class func funding_generation_ready(temporary_channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, output_script: [Swift.UInt8], user_channel_id: Swift.UInt64) -> LightningDevKit.Bindings.Event
    public class func payment_received(payment_hash: [Swift.UInt8], amount_msat: Swift.UInt64, purpose: LightningDevKit.Bindings.PaymentPurpose) -> LightningDevKit.Bindings.Event
    public class func payment_claimed(payment_hash: [Swift.UInt8], amount_msat: Swift.UInt64, purpose: LightningDevKit.Bindings.PaymentPurpose) -> LightningDevKit.Bindings.Event
    public class func payment_sent(payment_id: [Swift.UInt8], payment_preimage: [Swift.UInt8], payment_hash: [Swift.UInt8], fee_paid_msat: LightningDevKit.Bindings.Option_u64Z) -> LightningDevKit.Bindings.Event
    public class func payment_failed(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func payment_path_successful(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8], path: [LightningDevKit.Bindings.RouteHop]) -> LightningDevKit.Bindings.Event
    public class func payment_path_failed(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8], rejected_by_dest: Swift.Bool, network_update: LightningDevKit.Bindings.Option_NetworkUpdateZ, all_paths_failed: Swift.Bool, path: [LightningDevKit.Bindings.RouteHop], short_channel_id: LightningDevKit.Bindings.Option_u64Z, retry: LightningDevKit.Bindings.RouteParameters) -> LightningDevKit.Bindings.Event
    public class func probe_successful(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8], path: [LightningDevKit.Bindings.RouteHop]) -> LightningDevKit.Bindings.Event
    public class func probe_failed(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8], path: [LightningDevKit.Bindings.RouteHop], short_channel_id: LightningDevKit.Bindings.Option_u64Z) -> LightningDevKit.Bindings.Event
    public class func pending_htlcs_forwardable(time_forwardable: Swift.UInt64) -> LightningDevKit.Bindings.Event
    public class func spendable_outputs(outputs: [LightningDevKit.Bindings.SpendableOutputDescriptor]) -> LightningDevKit.Bindings.Event
    public class func payment_forwarded(prev_channel_id: [Swift.UInt8], next_channel_id: [Swift.UInt8], fee_earned_msat: LightningDevKit.Bindings.Option_u64Z, claim_from_onchain_tx: Swift.Bool) -> LightningDevKit.Bindings.Event
    public class func channel_closed(channel_id: [Swift.UInt8], user_channel_id: Swift.UInt64, reason: LightningDevKit.Bindings.ClosureReason) -> LightningDevKit.Bindings.Event
    public class func discard_funding(channel_id: [Swift.UInt8], transaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Event
    public class func open_channel_request(temporary_channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], funding_satoshis: Swift.UInt64, push_msat: Swift.UInt64, channel_type: LightningDevKit.Bindings.ChannelTypeFeatures) -> LightningDevKit.Bindings.Event
    public class func htlchandling_failed(prev_channel_id: [Swift.UInt8], failed_next_destination: LightningDevKit.Bindings.HTLCDestination) -> LightningDevKit.Bindings.Event
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    @_hasMissingDesignatedInitializers public class FundingGenerationReady : LightningDevKit.NativeTypeWrapper {
      public func getTemporary_channel_id() -> [Swift.UInt8]
      public func getCounterparty_node_id() -> [Swift.UInt8]
      public func getChannel_value_satoshis() -> Swift.UInt64
      public func getOutput_script() -> [Swift.UInt8]
      public func getUser_channel_id() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentReceived : LightningDevKit.NativeTypeWrapper {
      public func getPayment_hash() -> [Swift.UInt8]
      public func getAmount_msat() -> Swift.UInt64
      public func getPurpose() -> LightningDevKit.Bindings.PaymentPurpose
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentClaimed : LightningDevKit.NativeTypeWrapper {
      public func getPayment_hash() -> [Swift.UInt8]
      public func getAmount_msat() -> Swift.UInt64
      public func getPurpose() -> LightningDevKit.Bindings.PaymentPurpose
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentSent : LightningDevKit.NativeTypeWrapper {
      public func getPayment_id() -> [Swift.UInt8]
      public func getPayment_preimage() -> [Swift.UInt8]
      public func getPayment_hash() -> [Swift.UInt8]
      public func getFee_paid_msat() -> LightningDevKit.Bindings.Option_u64Z
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentFailed : LightningDevKit.NativeTypeWrapper {
      public func getPayment_id() -> [Swift.UInt8]
      public func getPayment_hash() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentPathSuccessful : LightningDevKit.NativeTypeWrapper {
      public func getPayment_id() -> [Swift.UInt8]
      public func getPayment_hash() -> [Swift.UInt8]
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentPathFailed : LightningDevKit.NativeTypeWrapper {
      public func getPayment_id() -> [Swift.UInt8]
      public func getPayment_hash() -> [Swift.UInt8]
      public func getRejected_by_dest() -> Swift.Bool
      public func getNetwork_update() -> LightningDevKit.Bindings.Option_NetworkUpdateZ
      public func getAll_paths_failed() -> Swift.Bool
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      public func getShort_channel_id() -> LightningDevKit.Bindings.Option_u64Z
      public func getRetry() -> LightningDevKit.Bindings.RouteParameters
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProbeSuccessful : LightningDevKit.NativeTypeWrapper {
      public func getPayment_id() -> [Swift.UInt8]
      public func getPayment_hash() -> [Swift.UInt8]
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProbeFailed : LightningDevKit.NativeTypeWrapper {
      public func getPayment_id() -> [Swift.UInt8]
      public func getPayment_hash() -> [Swift.UInt8]
      public func getPath() -> [LightningDevKit.Bindings.RouteHop]
      public func getShort_channel_id() -> LightningDevKit.Bindings.Option_u64Z
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PendingHTLCsForwardable : LightningDevKit.NativeTypeWrapper {
      public func getTime_forwardable() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class SpendableOutputs : LightningDevKit.NativeTypeWrapper {
      public func getOutputs() -> [LightningDevKit.Bindings.SpendableOutputDescriptor]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class PaymentForwarded : LightningDevKit.NativeTypeWrapper {
      public func getPrev_channel_id() -> [Swift.UInt8]
      public func getNext_channel_id() -> [Swift.UInt8]
      public func getFee_earned_msat() -> LightningDevKit.Bindings.Option_u64Z
      public func getClaim_from_onchain_tx() -> Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelClosed : LightningDevKit.NativeTypeWrapper {
      public func getChannel_id() -> [Swift.UInt8]
      public func getUser_channel_id() -> Swift.UInt64
      public func getReason() -> LightningDevKit.Bindings.ClosureReason
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class DiscardFunding : LightningDevKit.NativeTypeWrapper {
      public func getChannel_id() -> [Swift.UInt8]
      public func getTransaction() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OpenChannelRequest : LightningDevKit.NativeTypeWrapper {
      public func getTemporary_channel_id() -> [Swift.UInt8]
      public func getCounterparty_node_id() -> [Swift.UInt8]
      public func getFunding_satoshis() -> Swift.UInt64
      public func getPush_msat() -> Swift.UInt64
      public func getChannel_type() -> LightningDevKit.Bindings.ChannelTypeFeatures
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class HTLCHandlingFailed : LightningDevKit.NativeTypeWrapper {
      public func getPrev_channel_id() -> [Swift.UInt8]
      public func getFailed_next_destination() -> LightningDevKit.Bindings.HTLCDestination
      @objc deinit
    }
  }
}
public typealias EffectiveCapacity = LightningDevKit.Bindings.EffectiveCapacity
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class EffectiveCapacity : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKEffectiveCapacity)
    public init(pointer: LightningDevKit.LDKEffectiveCapacity, anchor: LightningDevKit.NativeTypeWrapper)
    public enum EffectiveCapacityValueType {
      case ExactLiquidity, MaximumHTLC, Total
      public static func == (a: LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityValueType, b: LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityValueType?
    public func getValueAsExactLiquidity() -> LightningDevKit.Bindings.EffectiveCapacity.ExactLiquidity?
    public func getValueAsMaximumHTLC() -> LightningDevKit.Bindings.EffectiveCapacity.MaximumHTLC?
    public func getValueAsTotal() -> LightningDevKit.Bindings.EffectiveCapacity.Total?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.EffectiveCapacity
    public class func exact_liquidity(liquidity_msat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func maximum_htlc(amount_msat: Swift.UInt64) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func total(capacity_msat: Swift.UInt64, htlc_maximum_msat: LightningDevKit.Bindings.Option_u64Z) -> LightningDevKit.Bindings.EffectiveCapacity
    public class func infinite() -> LightningDevKit.Bindings.EffectiveCapacity
    public class func unknown() -> LightningDevKit.Bindings.EffectiveCapacity
    public func as_msat() -> Swift.UInt64
    @_hasMissingDesignatedInitializers public class ExactLiquidity : LightningDevKit.NativeTypeWrapper {
      public func getLiquidity_msat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaximumHTLC : LightningDevKit.NativeTypeWrapper {
      public func getAmount_msat() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Total : LightningDevKit.NativeTypeWrapper {
      public func getCapacity_msat() -> Swift.UInt64
      public func getHtlc_maximum_msat() -> LightningDevKit.Bindings.Option_u64Z
      @objc deinit
    }
  }
}
public typealias Option_AccessZ = LightningDevKit.Bindings.Option_AccessZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_AccessZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.Access?)
    public init(pointer: LightningDevKit.LDKCOption_AccessZ)
    public init(pointer: LightningDevKit.LDKCOption_AccessZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.Access?
    public class func some(o: LightningDevKit.Bindings.Access) -> LightningDevKit.Bindings.Option_AccessZ
    public class func none() -> LightningDevKit.Bindings.Option_AccessZ
    @objc deinit
  }
}
public typealias Result_COption_TypeZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_TypeZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_COption_TypeZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_COption_TypeZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Option_TypeZ?
    public class func ok(o: LightningDevKit.Bindings.Option_TypeZ) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_COption_TypeZDecodeErrorZ
  }
}
public typealias DelayedPaymentOutputDescriptor = LightningDevKit.Bindings.DelayedPaymentOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DelayedPaymentOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public init(outpoint_arg: LightningDevKit.Bindings.OutPoint, per_commitment_point_arg: [Swift.UInt8], to_self_delay_arg: Swift.UInt16, output_arg: LightningDevKit.LDKTxOut, revocation_pubkey_arg: [Swift.UInt8], channel_keys_id_arg: [Swift.UInt8], channel_value_satoshis_arg: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKDelayedPaymentOutputDescriptor)
    public init(pointer: LightningDevKit.LDKDelayedPaymentOutputDescriptor, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_outpoint() -> LightningDevKit.Bindings.OutPoint?
    public func set_outpoint(val: LightningDevKit.Bindings.OutPoint)
    public func get_per_commitment_point() -> [Swift.UInt8]
    public func set_per_commitment_point(val: [Swift.UInt8])
    public func get_to_self_delay() -> Swift.UInt16
    public func set_to_self_delay(val: Swift.UInt16)
    public func get_output() -> LightningDevKit.Bindings.TxOut
    public func set_output(val: LightningDevKit.LDKTxOut)
    public func get_revocation_pubkey() -> [Swift.UInt8]
    public func set_revocation_pubkey(val: [Swift.UInt8])
    public func get_channel_keys_id() -> [Swift.UInt8]
    public func set_channel_keys_id(val: [Swift.UInt8])
    public func get_channel_value_satoshis() -> Swift.UInt64
    public func set_channel_value_satoshis(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    @objc deinit
  }
}
public typealias ReplyShortChannelIdsEnd = LightningDevKit.Bindings.ReplyShortChannelIdsEnd
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ReplyShortChannelIdsEnd : LightningDevKit.NativeTypeWrapper {
    public init(chain_hash_arg: [Swift.UInt8], full_information_arg: Swift.Bool)
    public init(pointer: LightningDevKit.LDKReplyShortChannelIdsEnd)
    public init(pointer: LightningDevKit.LDKReplyShortChannelIdsEnd, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_full_information() -> Swift.Bool
    public func set_full_information(val: Swift.Bool)
    public func clone() -> LightningDevKit.Bindings.ReplyShortChannelIdsEnd
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_boolLightningErrorZ = LightningDevKit.Bindings.Result_boolLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_boolLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_boolLightningErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_boolLightningErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public func getValue() -> Swift.Bool?
    public class func ok(o: Swift.Bool) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    public class func err(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_boolLightningErrorZ
  }
}
public typealias ClosureReason = LightningDevKit.Bindings.ClosureReason
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosureReason : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKClosureReason)
    public init(pointer: LightningDevKit.LDKClosureReason, anchor: LightningDevKit.NativeTypeWrapper)
    public enum ClosureReasonValueType {
      case CounterpartyForceClosed, ProcessingError
      public static func == (a: LightningDevKit.Bindings.ClosureReason.ClosureReasonValueType, b: LightningDevKit.Bindings.ClosureReason.ClosureReasonValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ClosureReason.ClosureReasonValueType?
    public func getValueAsCounterpartyForceClosed() -> LightningDevKit.Bindings.ClosureReason.CounterpartyForceClosed?
    public func getValueAsProcessingError() -> LightningDevKit.Bindings.ClosureReason.ProcessingError?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.ClosureReason
    public class func counterparty_force_closed(peer_msg: Swift.String) -> LightningDevKit.Bindings.ClosureReason
    public class func holder_force_closed() -> LightningDevKit.Bindings.ClosureReason
    public class func cooperative_closure() -> LightningDevKit.Bindings.ClosureReason
    public class func commitment_tx_confirmed() -> LightningDevKit.Bindings.ClosureReason
    public class func funding_timed_out() -> LightningDevKit.Bindings.ClosureReason
    public class func processing_error(err: Swift.String) -> LightningDevKit.Bindings.ClosureReason
    public class func disconnected_peer() -> LightningDevKit.Bindings.ClosureReason
    public class func outdated_channel_manager() -> LightningDevKit.Bindings.ClosureReason
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_ClosureReasonZDecodeErrorZ
    @_hasMissingDesignatedInitializers public class CounterpartyForceClosed : LightningDevKit.NativeTypeWrapper {
      public func getPeer_msg() -> Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ProcessingError : LightningDevKit.NativeTypeWrapper {
      public func getErr() -> Swift.String
      @objc deinit
    }
  }
}
public typealias Result_CommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CommitmentTransactionDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CommitmentTransactionDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CommitmentTransaction?
    public class func ok(o: LightningDevKit.Bindings.CommitmentTransaction) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
  }
}
public typealias C2Tuple_BlockHashChannelMonitorZ = LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_BlockHashChannelMonitorZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_BlockHashChannelMonitorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ
    public class func new(a: [Swift.UInt8], b: LightningDevKit.Bindings.ChannelMonitor) -> LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> LightningDevKit.Bindings.ChannelMonitor
  }
}
public typealias Route = LightningDevKit.Bindings.Route
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Route : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKRoute)
    public init(pointer: LightningDevKit.LDKRoute, anchor: LightningDevKit.NativeTypeWrapper)
    convenience public init(paths_arg: [[LightningDevKit.Bindings.RouteHop]], payment_params_arg: LightningDevKit.Bindings.PaymentParameters)
    public func get_paths() -> [[LightningDevKit.Bindings.RouteHop]]
    public func set_paths(val: [[LightningDevKit.Bindings.RouteHop]])
    public func get_payment_params() -> LightningDevKit.Bindings.PaymentParameters
    public func set_payment_params(val: LightningDevKit.Bindings.PaymentParameters)
    public func clone() -> LightningDevKit.Bindings.Route
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.Route, b: LightningDevKit.Bindings.Route) -> Swift.Bool
    public func get_total_fees() -> Swift.UInt64
    public func get_total_amount() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_PaymentSecretAPIErrorZ = LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentSecretAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentSecretAPIErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentSecretAPIErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
    public class func err(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
  }
}
public typealias ChannelMonitorUpdate = LightningDevKit.Bindings.ChannelMonitorUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelMonitorUpdate : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKChannelMonitorUpdate)
    public init(pointer: LightningDevKit.LDKChannelMonitorUpdate, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_update_id() -> Swift.UInt64
    public func set_update_id(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.ChannelMonitorUpdate
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_OutPointDecodeErrorZ = LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OutPointDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_OutPointDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_OutPointDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OutPoint?
    public class func ok(o: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
  }
}
public typealias Result_InMemorySignerDecodeErrorZ = LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InMemorySignerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InMemorySignerDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InMemorySignerDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.InMemorySigner?
    public class func ok(o: LightningDevKit.Bindings.InMemorySigner) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
  }
}
public typealias Result_CounterpartyForwardingInfoDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyForwardingInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CounterpartyForwardingInfoDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CounterpartyForwardingInfoDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyForwardingInfo?
    public class func ok(o: LightningDevKit.Bindings.CounterpartyForwardingInfo) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
  }
}
public typealias Result_TrustedClosingTransactionNoneZ = LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TrustedClosingTransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_TrustedClosingTransactionNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_TrustedClosingTransactionNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TrustedClosingTransaction?
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func ok(o: LightningDevKit.Bindings.TrustedClosingTransaction) -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    @objc deinit
  }
}
public typealias Result_CVec_u8ZPeerHandleErrorZ = LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CVec_u8ZPeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CVec_u8ZPeerHandleErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CVec_u8ZPeerHandleErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    public class func err(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CVec_u8ZPeerHandleErrorZ
  }
}
public typealias Result_ChannelUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelUpdateDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelUpdateDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelUpdate?
    public class func ok(o: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
  }
}
public typealias Result_UpdateFeeDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFeeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UpdateFeeDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UpdateFeeDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFee?
    public class func ok(o: LightningDevKit.Bindings.UpdateFee) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
  }
}
public typealias NodeId = LightningDevKit.Bindings.NodeId
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeId : LightningDevKit.NativeTypeWrapper {
    public init(pubkey: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKNodeId)
    public init(pointer: LightningDevKit.LDKNodeId, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.NodeId
    public func as_slice() -> [Swift.UInt8]
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    @objc deinit
  }
}
public typealias Option_NetAddressZ = LightningDevKit.Bindings.Option_NetAddressZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_NetAddressZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.NetAddress?)
    public init(pointer: LightningDevKit.LDKCOption_NetAddressZ)
    public init(pointer: LightningDevKit.LDKCOption_NetAddressZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.NetAddress?
    public class func some(o: LightningDevKit.Bindings.NetAddress) -> LightningDevKit.Bindings.Option_NetAddressZ
    public class func none() -> LightningDevKit.Bindings.Option_NetAddressZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_NetAddressZ
  }
}
public typealias CounterpartyForwardingInfo = LightningDevKit.Bindings.CounterpartyForwardingInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CounterpartyForwardingInfo : LightningDevKit.NativeTypeWrapper {
    public init(fee_base_msat_arg: Swift.UInt32, fee_proportional_millionths_arg: Swift.UInt32, cltv_expiry_delta_arg: Swift.UInt16)
    public init(pointer: LightningDevKit.LDKCounterpartyForwardingInfo)
    public init(pointer: LightningDevKit.LDKCounterpartyForwardingInfo, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_fee_base_msat() -> Swift.UInt32
    public func set_fee_base_msat(val: Swift.UInt32)
    public func get_fee_proportional_millionths() -> Swift.UInt32
    public func set_fee_proportional_millionths(val: Swift.UInt32)
    public func get_cltv_expiry_delta() -> Swift.UInt16
    public func set_cltv_expiry_delta(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.CounterpartyForwardingInfo
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CounterpartyForwardingInfoDecodeErrorZ
    @objc deinit
  }
}
public typealias IgnoringMessageHandler = LightningDevKit.Bindings.IgnoringMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class IgnoringMessageHandler : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKIgnoringMessageHandler)
    public init(pointer: LightningDevKit.LDKIgnoringMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
    public func as_MessageSendEventsProvider() -> LightningDevKit.NativelyImplementedMessageSendEventsProvider
    public func as_RoutingMessageHandler() -> LightningDevKit.NativelyImplementedRoutingMessageHandler
    public func as_CustomMessageReader() -> LightningDevKit.NativelyImplementedCustomMessageReader
    public func as_CustomMessageHandler() -> LightningDevKit.NativelyImplementedCustomMessageHandler
    @objc deinit
  }
}
public typealias Ping = LightningDevKit.Bindings.Ping
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Ping : LightningDevKit.NativeTypeWrapper {
    public init(ponglen_arg: Swift.UInt16, byteslen_arg: Swift.UInt16)
    public init(pointer: LightningDevKit.LDKPing)
    public init(pointer: LightningDevKit.LDKPing, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_ponglen() -> Swift.UInt16
    public func set_ponglen(val: Swift.UInt16)
    public func get_byteslen() -> Swift.UInt16
    public func set_byteslen(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.Ping
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_AcceptChannelDecodeErrorZ = LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AcceptChannelDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_AcceptChannelDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_AcceptChannelDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AcceptChannel?
    public class func ok(o: LightningDevKit.Bindings.AcceptChannel) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
  }
}
public typealias ChannelManagerReadArgs = LightningDevKit.Bindings.ChannelManagerReadArgs
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelManagerReadArgs : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKChannelManagerReadArgs)
    public init(pointer: LightningDevKit.LDKChannelManagerReadArgs, anchor: LightningDevKit.NativeTypeWrapper)
    convenience public init(keys_manager: LightningDevKit.Bindings.KeysInterface, fee_estimator: LightningDevKit.Bindings.FeeEstimator, chain_monitor: LightningDevKit.Bindings.Watch, tx_broadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, default_config: LightningDevKit.Bindings.UserConfig, channel_monitors: [LightningDevKit.Bindings.ChannelMonitor])
    public func get_keys_manager() -> LightningDevKit.NativelyImplementedKeysInterface
    public func set_keys_manager(val: LightningDevKit.Bindings.KeysInterface)
    public func get_fee_estimator() -> LightningDevKit.NativelyImplementedFeeEstimator
    public func set_fee_estimator(val: LightningDevKit.Bindings.FeeEstimator)
    public func get_chain_monitor() -> LightningDevKit.NativelyImplementedWatch
    public func set_chain_monitor(val: LightningDevKit.Bindings.Watch)
    public func get_tx_broadcaster() -> LightningDevKit.NativelyImplementedBroadcasterInterface
    public func set_tx_broadcaster(val: LightningDevKit.Bindings.BroadcasterInterface)
    public func get_logger() -> LightningDevKit.NativelyImplementedLogger
    public func set_logger(val: LightningDevKit.Bindings.Logger)
    public func get_default_config() -> LightningDevKit.Bindings.UserConfig
    public func set_default_config(val: LightningDevKit.Bindings.UserConfig)
    @objc deinit
  }
}
public typealias Result_ChannelReadyDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelReadyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelReadyDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelReadyDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelReady?
    public class func ok(o: LightningDevKit.Bindings.ChannelReady) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelReadyDecodeErrorZ
  }
}
public typealias NetworkUpdate = LightningDevKit.Bindings.NetworkUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetworkUpdate : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKNetworkUpdate)
    public init(pointer: LightningDevKit.LDKNetworkUpdate, anchor: LightningDevKit.NativeTypeWrapper)
    public enum NetworkUpdateValueType {
      case ChannelUpdateMessage, ChannelFailure, NodeFailure
      public static func == (a: LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateValueType, b: LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateValueType?
    public func getValueAsChannelUpdateMessage() -> LightningDevKit.Bindings.NetworkUpdate.ChannelUpdateMessage?
    public func getValueAsChannelFailure() -> LightningDevKit.Bindings.NetworkUpdate.ChannelFailure?
    public func getValueAsNodeFailure() -> LightningDevKit.Bindings.NetworkUpdate.NodeFailure?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.NetworkUpdate
    public class func channel_update_message(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.NetworkUpdate
    public class func channel_failure(short_channel_id: Swift.UInt64, is_permanent: Swift.Bool) -> LightningDevKit.Bindings.NetworkUpdate
    public class func node_failure(node_id: [Swift.UInt8], is_permanent: Swift.Bool) -> LightningDevKit.Bindings.NetworkUpdate
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_NetworkUpdateZDecodeErrorZ
    @_hasMissingDesignatedInitializers public class ChannelUpdateMessage : LightningDevKit.NativeTypeWrapper {
      public func getMsg() -> LightningDevKit.Bindings.ChannelUpdate
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ChannelFailure : LightningDevKit.NativeTypeWrapper {
      public func getShort_channel_id() -> Swift.UInt64
      public func getIs_permanent() -> Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class NodeFailure : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getIs_permanent() -> Swift.Bool
      @objc deinit
    }
  }
}
public typealias CommitmentUpdate = LightningDevKit.Bindings.CommitmentUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentUpdate : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCommitmentUpdate)
    public init(pointer: LightningDevKit.LDKCommitmentUpdate, anchor: LightningDevKit.NativeTypeWrapper)
    convenience public init(update_add_htlcs_arg: [LightningDevKit.Bindings.UpdateAddHTLC], update_fulfill_htlcs_arg: [LightningDevKit.Bindings.UpdateFulfillHTLC], update_fail_htlcs_arg: [LightningDevKit.Bindings.UpdateFailHTLC], update_fail_malformed_htlcs_arg: [LightningDevKit.Bindings.UpdateFailMalformedHTLC], update_fee_arg: LightningDevKit.Bindings.UpdateFee, commitment_signed_arg: LightningDevKit.Bindings.CommitmentSigned)
    public func get_update_add_htlcs() -> [LightningDevKit.Bindings.UpdateAddHTLC]
    public func set_update_add_htlcs(val: [LightningDevKit.Bindings.UpdateAddHTLC])
    public func get_update_fulfill_htlcs() -> [LightningDevKit.Bindings.UpdateFulfillHTLC]
    public func set_update_fulfill_htlcs(val: [LightningDevKit.Bindings.UpdateFulfillHTLC])
    public func get_update_fail_htlcs() -> [LightningDevKit.Bindings.UpdateFailHTLC]
    public func set_update_fail_htlcs(val: [LightningDevKit.Bindings.UpdateFailHTLC])
    public func get_update_fail_malformed_htlcs() -> [LightningDevKit.Bindings.UpdateFailMalformedHTLC]
    public func set_update_fail_malformed_htlcs(val: [LightningDevKit.Bindings.UpdateFailMalformedHTLC])
    public func get_update_fee() -> LightningDevKit.Bindings.UpdateFee
    public func set_update_fee(val: LightningDevKit.Bindings.UpdateFee)
    public func get_commitment_signed() -> LightningDevKit.Bindings.CommitmentSigned
    public func set_commitment_signed(val: LightningDevKit.Bindings.CommitmentSigned)
    public func clone() -> LightningDevKit.Bindings.CommitmentUpdate
    @objc deinit
  }
}
public typealias OpenChannel = LightningDevKit.Bindings.OpenChannel
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OpenChannel : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKOpenChannel)
    public init(pointer: LightningDevKit.LDKOpenChannel, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_temporary_channel_id() -> [Swift.UInt8]
    public func set_temporary_channel_id(val: [Swift.UInt8])
    public func get_funding_satoshis() -> Swift.UInt64
    public func set_funding_satoshis(val: Swift.UInt64)
    public func get_push_msat() -> Swift.UInt64
    public func set_push_msat(val: Swift.UInt64)
    public func get_dust_limit_satoshis() -> Swift.UInt64
    public func set_dust_limit_satoshis(val: Swift.UInt64)
    public func get_max_htlc_value_in_flight_msat() -> Swift.UInt64
    public func set_max_htlc_value_in_flight_msat(val: Swift.UInt64)
    public func get_channel_reserve_satoshis() -> Swift.UInt64
    public func set_channel_reserve_satoshis(val: Swift.UInt64)
    public func get_htlc_minimum_msat() -> Swift.UInt64
    public func set_htlc_minimum_msat(val: Swift.UInt64)
    public func get_feerate_per_kw() -> Swift.UInt32
    public func set_feerate_per_kw(val: Swift.UInt32)
    public func get_to_self_delay() -> Swift.UInt16
    public func set_to_self_delay(val: Swift.UInt16)
    public func get_max_accepted_htlcs() -> Swift.UInt16
    public func set_max_accepted_htlcs(val: Swift.UInt16)
    public func get_funding_pubkey() -> [Swift.UInt8]
    public func set_funding_pubkey(val: [Swift.UInt8])
    public func get_revocation_basepoint() -> [Swift.UInt8]
    public func set_revocation_basepoint(val: [Swift.UInt8])
    public func get_payment_point() -> [Swift.UInt8]
    public func set_payment_point(val: [Swift.UInt8])
    public func get_delayed_payment_basepoint() -> [Swift.UInt8]
    public func set_delayed_payment_basepoint(val: [Swift.UInt8])
    public func get_htlc_basepoint() -> [Swift.UInt8]
    public func set_htlc_basepoint(val: [Swift.UInt8])
    public func get_first_per_commitment_point() -> [Swift.UInt8]
    public func set_first_per_commitment_point(val: [Swift.UInt8])
    public func get_channel_flags() -> Swift.UInt8
    public func set_channel_flags(val: Swift.UInt8)
    public func get_channel_type() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func set_channel_type(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func clone() -> LightningDevKit.Bindings.OpenChannel
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_COption_MonitorEventZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_MonitorEventZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_COption_MonitorEventZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_COption_MonitorEventZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Option_MonitorEventZ?
    public class func ok(o: LightningDevKit.Bindings.Option_MonitorEventZ) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
  }
}
public typealias BigSize = LightningDevKit.Bindings.BigSize
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BigSize : LightningDevKit.NativeTypeWrapper {
    public init(a_arg: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKBigSize)
    public init(pointer: LightningDevKit.LDKBigSize, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_a() -> Swift.UInt64
    public func set_a(val: Swift.UInt64)
    @objc deinit
  }
}
public typealias Result_ChannelFeaturesDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelFeaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelFeaturesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelFeaturesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelFeatures?
    public class func ok(o: LightningDevKit.Bindings.ChannelFeatures) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelFeaturesDecodeErrorZ
  }
}
public typealias Result_ChannelReestablishDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelReestablishDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelReestablishDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelReestablishDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelReestablish?
    public class func ok(o: LightningDevKit.Bindings.ChannelReestablish) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelReestablishDecodeErrorZ
  }
}
public typealias LockedChannelMonitor = LightningDevKit.Bindings.LockedChannelMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class LockedChannelMonitor : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKLockedChannelMonitor)
    public init(pointer: LightningDevKit.LDKLockedChannelMonitor, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
  }
}
public typealias Result_UpdateAddHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateAddHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UpdateAddHTLCDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UpdateAddHTLCDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateAddHTLC?
    public class func ok(o: LightningDevKit.Bindings.UpdateAddHTLC) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UpdateAddHTLCDecodeErrorZ
  }
}
public typealias Result_PingDecodeErrorZ = LightningDevKit.Bindings.Result_PingDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PingDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PingDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PingDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Ping?
    public class func ok(o: LightningDevKit.Bindings.Ping) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PingDecodeErrorZ
  }
}
public typealias Result_SecretKeyNoneZ = LightningDevKit.Bindings.Result_SecretKeyNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SecretKeyNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SecretKeyNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_SecretKeyNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
  }
}
public typealias SignedRawInvoice = LightningDevKit.Bindings.SignedRawInvoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class SignedRawInvoice : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKSignedRawInvoice)
    public init(pointer: LightningDevKit.LDKSignedRawInvoice, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.SignedRawInvoice, b: LightningDevKit.Bindings.SignedRawInvoice) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.SignedRawInvoice
    public func into_parts() -> LightningDevKit.Bindings.C3Tuple_RawInvoice_u832InvoiceSignatureZ
    public func raw_invoice() -> LightningDevKit.Bindings.RawInvoice
    public func hash() -> [Swift.UInt8]
    public func signature() -> LightningDevKit.Bindings.InvoiceSignature
    public func recover_payee_pub_key() -> LightningDevKit.Bindings.Result_PayeePubKeyErrorZ
    public func check_signature() -> Swift.Bool
    public class func from_str(s: Swift.String) -> LightningDevKit.Bindings.Result_SignedRawInvoiceParseErrorZ
    public func to_str() -> Swift.String
    @objc deinit
  }
}
public typealias BindingsError = LightningDevKit.Bindings.BindingsError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BindingsError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKError)
    public init(pointer: LightningDevKit.LDKError, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
  }
}
public typealias NodeAnnouncementInfo = LightningDevKit.Bindings.NodeAnnouncementInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeAnnouncementInfo : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKNodeAnnouncementInfo)
    public init(pointer: LightningDevKit.LDKNodeAnnouncementInfo, anchor: LightningDevKit.NativeTypeWrapper)
    convenience public init(features_arg: LightningDevKit.Bindings.NodeFeatures, last_update_arg: Swift.UInt32, rgb_arg: [Swift.UInt8], alias_arg: LightningDevKit.Bindings.NodeAlias, addresses_arg: [LightningDevKit.Bindings.NetAddress], announcement_message_arg: LightningDevKit.Bindings.NodeAnnouncement)
    public func get_features() -> LightningDevKit.Bindings.NodeFeatures
    public func set_features(val: LightningDevKit.Bindings.NodeFeatures)
    public func get_last_update() -> Swift.UInt32
    public func set_last_update(val: Swift.UInt32)
    public func get_rgb() -> [Swift.UInt8]
    public func set_rgb(val: [Swift.UInt8])
    public func get_alias() -> LightningDevKit.Bindings.NodeAlias
    public func set_alias(val: LightningDevKit.Bindings.NodeAlias)
    public func get_addresses() -> [LightningDevKit.Bindings.NetAddress]
    public func set_addresses(val: [LightningDevKit.Bindings.NetAddress])
    public func get_announcement_message() -> LightningDevKit.Bindings.NodeAnnouncement
    public func set_announcement_message(val: LightningDevKit.Bindings.NodeAnnouncement)
    public func clone() -> LightningDevKit.Bindings.NodeAnnouncementInfo
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_StaticPaymentOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_StaticPaymentOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor?
    public class func ok(o: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
  }
}
public typealias C3Tuple_RawInvoice_u832InvoiceSignatureZ = LightningDevKit.Bindings.C3Tuple_RawInvoice_u832InvoiceSignatureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C3Tuple_RawInvoice_u832InvoiceSignatureZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ)
    public init(pointer: LightningDevKit.LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C3Tuple_RawInvoice_u832InvoiceSignatureZ
    public class func new(a: LightningDevKit.Bindings.RawInvoice, b: [Swift.UInt8], c: LightningDevKit.Bindings.InvoiceSignature) -> LightningDevKit.Bindings.C3Tuple_RawInvoice_u832InvoiceSignatureZ
    @objc deinit
    public func getA() -> LightningDevKit.Bindings.RawInvoice
    public func getB() -> [Swift.UInt8]
    public func getC() -> LightningDevKit.Bindings.InvoiceSignature
  }
}
public typealias Result_ChannelUpdateInfoDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelUpdateInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelUpdateInfoDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelUpdateInfoDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelUpdateInfo?
    public class func ok(o: LightningDevKit.Bindings.ChannelUpdateInfo) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
  }
}
public typealias UpdateFee = LightningDevKit.Bindings.UpdateFee
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFee : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], feerate_per_kw_arg: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKUpdateFee)
    public init(pointer: LightningDevKit.LDKUpdateFee, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_feerate_per_kw() -> Swift.UInt32
    public func set_feerate_per_kw(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.UpdateFee
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFeeDecodeErrorZ
    @objc deinit
  }
}
public typealias GossipSync = LightningDevKit.Bindings.GossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GossipSync : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKGossipSync)
    public init(pointer: LightningDevKit.LDKGossipSync, anchor: LightningDevKit.NativeTypeWrapper)
    public enum GossipSyncValueType {
      case P2P, Rapid
      public static func == (a: LightningDevKit.Bindings.GossipSync.GossipSyncValueType, b: LightningDevKit.Bindings.GossipSync.GossipSyncValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.GossipSync.GossipSyncValueType?
    public func getValueAsP2P() -> LightningDevKit.Bindings.P2PGossipSync?
    public func getValueAsRapid() -> LightningDevKit.Bindings.RapidGossipSync?
    @objc deinit
    public class func p2_p(a: LightningDevKit.Bindings.P2PGossipSync) -> LightningDevKit.Bindings.GossipSync
    public class func rapid(a: LightningDevKit.Bindings.RapidGossipSync) -> LightningDevKit.Bindings.GossipSync
    public class func none() -> LightningDevKit.Bindings.GossipSync
  }
}
public typealias DirectedChannelInfo = LightningDevKit.Bindings.DirectedChannelInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DirectedChannelInfo : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKDirectedChannelInfo)
    public init(pointer: LightningDevKit.LDKDirectedChannelInfo, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.DirectedChannelInfo
    public func channel() -> LightningDevKit.Bindings.ChannelInfo
    public func direction() -> LightningDevKit.Bindings.ChannelUpdateInfo
    public func htlc_maximum_msat() -> Swift.UInt64
    public func effective_capacity() -> LightningDevKit.Bindings.EffectiveCapacity
    @objc deinit
  }
}
public typealias DefaultRouter = LightningDevKit.Bindings.DefaultRouter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DefaultRouter : LightningDevKit.NativeTypeWrapper {
    public init(network_graph: LightningDevKit.Bindings.NetworkGraph, logger: LightningDevKit.Bindings.Logger, random_seed_bytes: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKDefaultRouter)
    public init(pointer: LightningDevKit.LDKDefaultRouter, anchor: LightningDevKit.NativeTypeWrapper)
    public func as_Router() -> LightningDevKit.NativelyImplementedRouter
    @objc deinit
  }
}
public typealias InMemorySigner = LightningDevKit.Bindings.InMemorySigner
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InMemorySigner : LightningDevKit.NativeTypeWrapper {
    public init(node_secret: [Swift.UInt8], funding_key: [Swift.UInt8], revocation_base_key: [Swift.UInt8], payment_key: [Swift.UInt8], delayed_payment_base_key: [Swift.UInt8], htlc_base_key: [Swift.UInt8], commitment_seed: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, channel_keys_id: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKInMemorySigner)
    public init(pointer: LightningDevKit.LDKInMemorySigner, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_funding_key() -> [Swift.UInt8]
    public func set_funding_key(val: [Swift.UInt8])
    public func get_revocation_base_key() -> [Swift.UInt8]
    public func set_revocation_base_key(val: [Swift.UInt8])
    public func get_payment_key() -> [Swift.UInt8]
    public func set_payment_key(val: [Swift.UInt8])
    public func get_delayed_payment_base_key() -> [Swift.UInt8]
    public func set_delayed_payment_base_key(val: [Swift.UInt8])
    public func get_htlc_base_key() -> [Swift.UInt8]
    public func set_htlc_base_key(val: [Swift.UInt8])
    public func get_commitment_seed() -> [Swift.UInt8]
    public func set_commitment_seed(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.InMemorySigner
    public func counterparty_pubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func counterparty_selected_contest_delay() -> Swift.UInt16
    public func holder_selected_contest_delay() -> Swift.UInt16
    public func is_outbound() -> Swift.Bool
    public func funding_outpoint() -> LightningDevKit.Bindings.OutPoint?
    public func get_channel_parameters() -> LightningDevKit.Bindings.ChannelTransactionParameters
    public func opt_anchors() -> Swift.Bool
    public func sign_counterparty_payment_input(spend_tx: [Swift.UInt8], input_idx: Swift.UInt, descriptor: LightningDevKit.Bindings.StaticPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public func sign_dynamic_p2wsh_input(spend_tx: [Swift.UInt8], input_idx: Swift.UInt, descriptor: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_CVec_CVec_u8ZZNoneZ
    public func as_BaseSign() -> LightningDevKit.NativelyImplementedBaseSign
    public func as_Sign() -> LightningDevKit.NativelyImplementedSign
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InMemorySignerDecodeErrorZ
    @objc deinit
  }
}
public typealias NetworkGraph = LightningDevKit.Bindings.NetworkGraph
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetworkGraph : LightningDevKit.NativeTypeWrapper {
    public init(genesis_hash: [Swift.UInt8], logger: LightningDevKit.Bindings.Logger)
    public init(pointer: LightningDevKit.LDKNetworkGraph)
    public init(pointer: LightningDevKit.LDKNetworkGraph, anchor: LightningDevKit.NativeTypeWrapper)
    public func as_EventHandler() -> LightningDevKit.NativelyImplementedEventHandler
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8], arg: LightningDevKit.Bindings.Logger) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public func read_only() -> LightningDevKit.Bindings.ReadOnlyNetworkGraph
    public func get_last_rapid_gossip_sync_timestamp() -> LightningDevKit.Bindings.Option_u32Z
    public func set_last_rapid_gossip_sync_timestamp(last_rapid_gossip_sync_timestamp: Swift.UInt32)
    public func update_node_from_announcement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func update_node_from_unsigned_announcement(msg: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func update_channel_from_announcement(msg: LightningDevKit.Bindings.ChannelAnnouncement, chain_access: LightningDevKit.Bindings.Option_AccessZ) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func update_channel_from_unsigned_announcement(msg: LightningDevKit.Bindings.UnsignedChannelAnnouncement, chain_access: LightningDevKit.Bindings.Option_AccessZ) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func add_channel_from_partial_announcement(short_channel_id: Swift.UInt64, timestamp: Swift.UInt64, features: LightningDevKit.Bindings.ChannelFeatures, node_id_1: [Swift.UInt8], node_id_2: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func channel_failed(short_channel_id: Swift.UInt64, is_permanent: Swift.Bool)
    public func node_failed(_node_id: [Swift.UInt8], is_permanent: Swift.Bool)
    public func remove_stale_channels()
    public func remove_stale_channels_with_time(current_time_unix: Swift.UInt64)
    public func update_channel(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public func update_channel_unsigned(msg: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    @objc deinit
  }
}
public typealias MonitorEvent = LightningDevKit.Bindings.MonitorEvent
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class MonitorEvent : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKMonitorEvent)
    public init(pointer: LightningDevKit.LDKMonitorEvent, anchor: LightningDevKit.NativeTypeWrapper)
    public enum MonitorEventValueType {
      case HTLCEvent, CommitmentTxConfirmed, UpdateCompleted, UpdateFailed
      public static func == (a: LightningDevKit.Bindings.MonitorEvent.MonitorEventValueType, b: LightningDevKit.Bindings.MonitorEvent.MonitorEventValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.MonitorEvent.MonitorEventValueType?
    public func getValueAsHTLCEvent() -> LightningDevKit.Bindings.HTLCUpdate?
    public func getValueAsCommitmentTxConfirmed() -> LightningDevKit.Bindings.OutPoint?
    public func getValueAsUpdateCompleted() -> LightningDevKit.Bindings.MonitorEvent.UpdateCompleted?
    public func getValueAsUpdateFailed() -> LightningDevKit.Bindings.OutPoint?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.MonitorEvent
    public class func htlcevent(a: LightningDevKit.Bindings.HTLCUpdate) -> LightningDevKit.Bindings.MonitorEvent
    public class func commitment_tx_confirmed(a: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.MonitorEvent
    public class func update_completed(funding_txo: LightningDevKit.Bindings.OutPoint, monitor_update_id: Swift.UInt64) -> LightningDevKit.Bindings.MonitorEvent
    public class func update_failed(a: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.MonitorEvent
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_MonitorEventZDecodeErrorZ
    @_hasMissingDesignatedInitializers public class UpdateCompleted : LightningDevKit.NativeTypeWrapper {
      public func getFunding_txo() -> LightningDevKit.Bindings.OutPoint?
      public func getMonitor_update_id() -> Swift.UInt64
      @objc deinit
    }
  }
}
public typealias Result_C2Tuple_PaymentHashPaymentSecretZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentSecretZNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ?
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
  }
}
public typealias Result_GossipTimestampFilterDecodeErrorZ = LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_GossipTimestampFilterDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_GossipTimestampFilterDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_GossipTimestampFilterDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.GossipTimestampFilter?
    public class func ok(o: LightningDevKit.Bindings.GossipTimestampFilter) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
  }
}
public typealias Record = LightningDevKit.Bindings.Record
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Record : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKRecord)
    public init(pointer: LightningDevKit.LDKRecord, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_level() -> LightningDevKit.LDKLevel
    public func set_level(val: LightningDevKit.LDKLevel)
    public func get_args() -> Swift.String
    public func set_args(val: Swift.String)
    public func get_module_path() -> Swift.String
    public func set_module_path(val: Swift.String)
    public func get_file() -> Swift.String
    public func set_file(val: Swift.String)
    public func get_line() -> Swift.UInt32
    public func set_line(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.Record
    @objc deinit
  }
}
public typealias LockableScore = LightningDevKit.Bindings.LockableScore
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class LockableScore : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKLockableScore)
    public init(pointer: LightningDevKit.LDKLockableScore, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func lock() -> LightningDevKit.Bindings.Score
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedLockableScore : LightningDevKit.LockableScore {
  override public func lock() -> LightningDevKit.Score
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKLockableScore)
  override public init(pointer: LightningDevKit.LDKLockableScore, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_BuiltCommitmentTransactionDecodeErrorZ = LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_BuiltCommitmentTransactionDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_BuiltCommitmentTransactionDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_BuiltCommitmentTransactionDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.BuiltCommitmentTransaction?
    public class func ok(o: LightningDevKit.Bindings.BuiltCommitmentTransaction) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
  }
}
public typealias KeysInterface = LightningDevKit.Bindings.KeysInterface
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class KeysInterface : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKKeysInterface)
    public init(pointer: LightningDevKit.LDKKeysInterface, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func get_node_secret(recipient: LightningDevKit.LDKRecipient) -> LightningDevKit.Bindings.Result_SecretKeyNoneZ
    open func get_destination_script() -> [Swift.UInt8]
    open func get_shutdown_scriptpubkey() -> LightningDevKit.Bindings.ShutdownScript
    open func get_channel_signer(inbound: Swift.Bool, channel_value_satoshis: Swift.UInt64) -> LightningDevKit.Bindings.Sign
    open func get_secure_random_bytes() -> [Swift.UInt8]
    open func read_chan_signer(reader: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
    open func sign_invoice(hrp_bytes: [Swift.UInt8], invoice_data: [Swift.UInt8], receipient: LightningDevKit.LDKRecipient) -> LightningDevKit.Bindings.Result_RecoverableSignatureNoneZ
    open func get_inbound_payment_key_material() -> [Swift.UInt8]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedKeysInterface : LightningDevKit.KeysInterface {
  override public func get_node_secret(recipient: LightningDevKit.LDKRecipient) -> LightningDevKit.Result_SecretKeyNoneZ
  override public func get_destination_script() -> [Swift.UInt8]
  override public func get_shutdown_scriptpubkey() -> LightningDevKit.ShutdownScript
  override public func get_channel_signer(inbound: Swift.Bool, channel_value_satoshis: Swift.UInt64) -> LightningDevKit.Sign
  override public func get_secure_random_bytes() -> [Swift.UInt8]
  override public func read_chan_signer(reader: [Swift.UInt8]) -> LightningDevKit.Result_SignDecodeErrorZ
  override public func sign_invoice(hrp_bytes: [Swift.UInt8], invoice_data: [Swift.UInt8], receipient: LightningDevKit.LDKRecipient) -> LightningDevKit.Result_RecoverableSignatureNoneZ
  override public func get_inbound_payment_key_material() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKKeysInterface)
  override public init(pointer: LightningDevKit.LDKKeysInterface, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias EventHandler = LightningDevKit.Bindings.EventHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class EventHandler : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKEventHandler)
    public init(pointer: LightningDevKit.LDKEventHandler, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func handle_event(event: LightningDevKit.Bindings.Event)
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedEventHandler : LightningDevKit.EventHandler {
  override public func handle_event(event: LightningDevKit.Event)
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKEventHandler)
  override public init(pointer: LightningDevKit.LDKEventHandler, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_ProbabilisticScorerDecodeErrorZ = LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ProbabilisticScorerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ProbabilisticScorerDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ProbabilisticScorerDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ProbabilisticScorer?
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func ok(o: LightningDevKit.Bindings.ProbabilisticScorer) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ProbabilisticScorerDecodeErrorZ
    @objc deinit
  }
}
public typealias AnnouncementSignatures = LightningDevKit.Bindings.AnnouncementSignatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AnnouncementSignatures : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, node_signature_arg: [Swift.UInt8], bitcoin_signature_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKAnnouncementSignatures)
    public init(pointer: LightningDevKit.LDKAnnouncementSignatures, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_short_channel_id() -> Swift.UInt64
    public func set_short_channel_id(val: Swift.UInt64)
    public func get_node_signature() -> [Swift.UInt8]
    public func set_node_signature(val: [Swift.UInt8])
    public func get_bitcoin_signature() -> [Swift.UInt8]
    public func set_bitcoin_signature(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.AnnouncementSignatures
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    @objc deinit
  }
}
public typealias InvoiceSignature = LightningDevKit.Bindings.InvoiceSignature
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoiceSignature : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKInvoiceSignature)
    public init(pointer: LightningDevKit.LDKInvoiceSignature, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.InvoiceSignature
    public class func eq(a: LightningDevKit.Bindings.InvoiceSignature, b: LightningDevKit.Bindings.InvoiceSignature) -> Swift.Bool
    @objc deinit
  }
}
public typealias RouteHintHop = LightningDevKit.Bindings.RouteHintHop
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteHintHop : LightningDevKit.NativeTypeWrapper {
    public init(src_node_id_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, fees_arg: LightningDevKit.Bindings.RoutingFees, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: LightningDevKit.Bindings.Option_u64Z, htlc_maximum_msat_arg: LightningDevKit.Bindings.Option_u64Z)
    public init(pointer: LightningDevKit.LDKRouteHintHop)
    public init(pointer: LightningDevKit.LDKRouteHintHop, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_src_node_id() -> [Swift.UInt8]
    public func set_src_node_id(val: [Swift.UInt8])
    public func get_short_channel_id() -> Swift.UInt64
    public func set_short_channel_id(val: Swift.UInt64)
    public func get_fees() -> LightningDevKit.Bindings.RoutingFees
    public func set_fees(val: LightningDevKit.Bindings.RoutingFees)
    public func get_cltv_expiry_delta() -> Swift.UInt16
    public func set_cltv_expiry_delta(val: Swift.UInt16)
    public func get_htlc_minimum_msat() -> LightningDevKit.Bindings.Option_u64Z
    public func set_htlc_minimum_msat(val: LightningDevKit.Bindings.Option_u64Z)
    public func get_htlc_maximum_msat() -> LightningDevKit.Bindings.Option_u64Z
    public func set_htlc_maximum_msat(val: LightningDevKit.Bindings.Option_u64Z)
    public func clone() -> LightningDevKit.Bindings.RouteHintHop
    public func hash() -> Swift.UInt64
    public class func eq(a: LightningDevKit.Bindings.RouteHintHop, b: LightningDevKit.Bindings.RouteHintHop) -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteHintHopDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_CounterpartyChannelTransactionParametersDecodeErrorZ = LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_CounterpartyChannelTransactionParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters?
    public class func ok(o: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
  }
}
public typealias ClosingSignedFeeRange = LightningDevKit.Bindings.ClosingSignedFeeRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingSignedFeeRange : LightningDevKit.NativeTypeWrapper {
    public init(min_fee_satoshis_arg: Swift.UInt64, max_fee_satoshis_arg: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKClosingSignedFeeRange)
    public init(pointer: LightningDevKit.LDKClosingSignedFeeRange, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_min_fee_satoshis() -> Swift.UInt64
    public func set_min_fee_satoshis(val: Swift.UInt64)
    public func get_max_fee_satoshis() -> Swift.UInt64
    public func set_max_fee_satoshis(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.ClosingSignedFeeRange
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    @objc deinit
  }
}
public typealias CommitmentTransaction = LightningDevKit.Bindings.CommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class CommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKCommitmentTransaction)
    public init(pointer: LightningDevKit.LDKCommitmentTransaction, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.CommitmentTransaction
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_CommitmentTransactionDecodeErrorZ
    public func commitment_number() -> Swift.UInt64
    public func to_broadcaster_value_sat() -> Swift.UInt64
    public func to_countersignatory_value_sat() -> Swift.UInt64
    public func feerate_per_kw() -> Swift.UInt32
    public func trust() -> LightningDevKit.Bindings.TrustedCommitmentTransaction
    public func verify(channel_parameters: LightningDevKit.Bindings.DirectedChannelTransactionParameters, broadcaster_keys: LightningDevKit.Bindings.ChannelPublicKeys, countersignatory_keys: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    @objc deinit
  }
}
public typealias GraphSyncError = LightningDevKit.Bindings.GraphSyncError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GraphSyncError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKGraphSyncError)
    public init(pointer: LightningDevKit.LDKGraphSyncError, anchor: LightningDevKit.NativeTypeWrapper)
    public enum GraphSyncErrorValueType {
      case DecodeError, LightningError
      public static func == (a: LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorValueType, b: LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorValueType?
    public func getValueAsDecodeError() -> LightningDevKit.Bindings.DecodeError?
    public func getValueAsLightningError() -> LightningDevKit.Bindings.LightningError?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.GraphSyncError
    public class func decode_error(a: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.GraphSyncError
    public class func lightning_error(a: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.GraphSyncError
  }
}
public typealias InitFeatures = LightningDevKit.Bindings.InitFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InitFeatures : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKInitFeatures)
    public init(pointer: LightningDevKit.LDKInitFeatures, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.InitFeatures, b: LightningDevKit.Bindings.InitFeatures) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.InitFeatures
    public func requires_unknown_bits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InitFeaturesDecodeErrorZ
    public func set_data_loss_protect_optional()
    public func set_data_loss_protect_required()
    public func supports_data_loss_protect() -> Swift.Bool
    public func requires_data_loss_protect() -> Swift.Bool
    public func set_initial_routing_sync_optional()
    public func set_initial_routing_sync_required()
    public func initial_routing_sync() -> Swift.Bool
    public func set_upfront_shutdown_script_optional()
    public func set_upfront_shutdown_script_required()
    public func supports_upfront_shutdown_script() -> Swift.Bool
    public func requires_upfront_shutdown_script() -> Swift.Bool
    public func set_gossip_queries_optional()
    public func set_gossip_queries_required()
    public func supports_gossip_queries() -> Swift.Bool
    public func requires_gossip_queries() -> Swift.Bool
    public func set_variable_length_onion_optional()
    public func set_variable_length_onion_required()
    public func supports_variable_length_onion() -> Swift.Bool
    public func requires_variable_length_onion() -> Swift.Bool
    public func set_static_remote_key_optional()
    public func set_static_remote_key_required()
    public func supports_static_remote_key() -> Swift.Bool
    public func requires_static_remote_key() -> Swift.Bool
    public func set_payment_secret_optional()
    public func set_payment_secret_required()
    public func supports_payment_secret() -> Swift.Bool
    public func requires_payment_secret() -> Swift.Bool
    public func set_basic_mpp_optional()
    public func set_basic_mpp_required()
    public func supports_basic_mpp() -> Swift.Bool
    public func requires_basic_mpp() -> Swift.Bool
    public func set_wumbo_optional()
    public func set_wumbo_required()
    public func supports_wumbo() -> Swift.Bool
    public func requires_wumbo() -> Swift.Bool
    public func set_shutdown_any_segwit_optional()
    public func set_shutdown_any_segwit_required()
    public func supports_shutdown_anysegwit() -> Swift.Bool
    public func requires_shutdown_anysegwit() -> Swift.Bool
    public func set_channel_type_optional()
    public func set_channel_type_required()
    public func supports_channel_type() -> Swift.Bool
    public func requires_channel_type() -> Swift.Bool
    public func set_scid_privacy_optional()
    public func set_scid_privacy_required()
    public func supports_scid_privacy() -> Swift.Bool
    public func requires_scid_privacy() -> Swift.Bool
    public func set_zero_conf_optional()
    public func set_zero_conf_required()
    public func supports_zero_conf() -> Swift.Bool
    public func requires_zero_conf() -> Swift.Bool
    @objc deinit
  }
}
public typealias TxCreationKeys = LightningDevKit.Bindings.TxCreationKeys
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TxCreationKeys : LightningDevKit.NativeTypeWrapper {
    public init(per_commitment_point_arg: [Swift.UInt8], revocation_key_arg: [Swift.UInt8], broadcaster_htlc_key_arg: [Swift.UInt8], countersignatory_htlc_key_arg: [Swift.UInt8], broadcaster_delayed_payment_key_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKTxCreationKeys)
    public init(pointer: LightningDevKit.LDKTxCreationKeys, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_per_commitment_point() -> [Swift.UInt8]
    public func set_per_commitment_point(val: [Swift.UInt8])
    public func get_revocation_key() -> [Swift.UInt8]
    public func set_revocation_key(val: [Swift.UInt8])
    public func get_broadcaster_htlc_key() -> [Swift.UInt8]
    public func set_broadcaster_htlc_key(val: [Swift.UInt8])
    public func get_countersignatory_htlc_key() -> [Swift.UInt8]
    public func set_countersignatory_htlc_key(val: [Swift.UInt8])
    public func get_broadcaster_delayed_payment_key() -> [Swift.UInt8]
    public func set_broadcaster_delayed_payment_key(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.TxCreationKeys
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public class func derive_new(per_commitment_point: [Swift.UInt8], broadcaster_delayed_payment_base: [Swift.UInt8], broadcaster_htlc_base: [Swift.UInt8], countersignatory_revocation_base: [Swift.UInt8], countersignatory_htlc_base: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TxCreationKeysErrorZ
    public class func from_channel_static_keys(per_commitment_point: [Swift.UInt8], broadcaster_keys: LightningDevKit.Bindings.ChannelPublicKeys, countersignatory_keys: LightningDevKit.Bindings.ChannelPublicKeys) -> LightningDevKit.Bindings.Result_TxCreationKeysErrorZ
    @objc deinit
  }
}
public typealias Result_PhantomRouteHintsDecodeErrorZ = LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PhantomRouteHintsDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PhantomRouteHintsDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PhantomRouteHintsDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PhantomRouteHints?
    public class func ok(o: LightningDevKit.Bindings.PhantomRouteHints) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
  }
}
public typealias Result_NodeAnnouncementInfoDecodeErrorZ = LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeAnnouncementInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NodeAnnouncementInfoDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NodeAnnouncementInfoDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeAnnouncementInfo?
    public class func ok(o: LightningDevKit.Bindings.NodeAnnouncementInfo) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NodeAnnouncementInfoDecodeErrorZ
  }
}
public typealias Result_TrustedCommitmentTransactionNoneZ = LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TrustedCommitmentTransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_TrustedCommitmentTransactionNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_TrustedCommitmentTransactionNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.TrustedCommitmentTransaction?
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func ok(o: LightningDevKit.Bindings.TrustedCommitmentTransaction) -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_TrustedCommitmentTransactionNoneZ
    @objc deinit
  }
}
public typealias ChannelMessageHandler = LightningDevKit.Bindings.ChannelMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class ChannelMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKChannelMessageHandler)
    public init(pointer: LightningDevKit.LDKChannelMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func handle_open_channel(their_node_id: [Swift.UInt8], their_features: LightningDevKit.Bindings.InitFeatures, msg: LightningDevKit.Bindings.OpenChannel)
    open func handle_accept_channel(their_node_id: [Swift.UInt8], their_features: LightningDevKit.Bindings.InitFeatures, msg: LightningDevKit.Bindings.AcceptChannel)
    open func handle_funding_created(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingCreated)
    open func handle_funding_signed(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.FundingSigned)
    open func handle_channel_ready(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReady)
    open func handle_shutdown(their_node_id: [Swift.UInt8], their_features: LightningDevKit.Bindings.InitFeatures, msg: LightningDevKit.Bindings.Shutdown)
    open func handle_closing_signed(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ClosingSigned)
    open func handle_update_add_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateAddHTLC)
    open func handle_update_fulfill_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFulfillHTLC)
    open func handle_update_fail_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFailHTLC)
    open func handle_update_fail_malformed_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFailMalformedHTLC)
    open func handle_commitment_signed(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.CommitmentSigned)
    open func handle_revoke_and_ack(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.RevokeAndACK)
    open func handle_update_fee(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.UpdateFee)
    open func handle_announcement_signatures(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.AnnouncementSignatures)
    open func peer_disconnected(their_node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
    open func peer_connected(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.Init)
    open func handle_channel_reestablish(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelReestablish)
    open func handle_channel_update(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ChannelUpdate)
    open func handle_error(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ErrorMessage)
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedChannelMessageHandler : LightningDevKit.ChannelMessageHandler {
  override public func handle_open_channel(their_node_id: [Swift.UInt8], their_features: LightningDevKit.InitFeatures, msg: LightningDevKit.OpenChannel)
  override public func handle_accept_channel(their_node_id: [Swift.UInt8], their_features: LightningDevKit.InitFeatures, msg: LightningDevKit.AcceptChannel)
  override public func handle_funding_created(their_node_id: [Swift.UInt8], msg: LightningDevKit.FundingCreated)
  override public func handle_funding_signed(their_node_id: [Swift.UInt8], msg: LightningDevKit.FundingSigned)
  override public func handle_channel_ready(their_node_id: [Swift.UInt8], msg: LightningDevKit.ChannelReady)
  override public func handle_shutdown(their_node_id: [Swift.UInt8], their_features: LightningDevKit.InitFeatures, msg: LightningDevKit.Shutdown)
  override public func handle_closing_signed(their_node_id: [Swift.UInt8], msg: LightningDevKit.ClosingSigned)
  override public func handle_update_add_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.UpdateAddHTLC)
  override public func handle_update_fulfill_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.UpdateFulfillHTLC)
  override public func handle_update_fail_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.UpdateFailHTLC)
  override public func handle_update_fail_malformed_htlc(their_node_id: [Swift.UInt8], msg: LightningDevKit.UpdateFailMalformedHTLC)
  override public func handle_commitment_signed(their_node_id: [Swift.UInt8], msg: LightningDevKit.CommitmentSigned)
  override public func handle_revoke_and_ack(their_node_id: [Swift.UInt8], msg: LightningDevKit.RevokeAndACK)
  override public func handle_update_fee(their_node_id: [Swift.UInt8], msg: LightningDevKit.UpdateFee)
  override public func handle_announcement_signatures(their_node_id: [Swift.UInt8], msg: LightningDevKit.AnnouncementSignatures)
  override public func peer_disconnected(their_node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
  override public func peer_connected(their_node_id: [Swift.UInt8], msg: LightningDevKit.Init)
  override public func handle_channel_reestablish(their_node_id: [Swift.UInt8], msg: LightningDevKit.ChannelReestablish)
  override public func handle_channel_update(their_node_id: [Swift.UInt8], msg: LightningDevKit.ChannelUpdate)
  override public func handle_error(their_node_id: [Swift.UInt8], msg: LightningDevKit.ErrorMessage)
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKChannelMessageHandler)
  override public init(pointer: LightningDevKit.LDKChannelMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_NodeInfoDecodeErrorZ = LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeInfoDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NodeInfoDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NodeInfoDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeInfo?
    public class func ok(o: LightningDevKit.Bindings.NodeInfo) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
  }
}
public typealias Option_u32Z = LightningDevKit.Bindings.Option_u32Z
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_u32Z : LightningDevKit.NativeTypeWrapper {
    public init(value: Swift.UInt32?)
    public init(pointer: LightningDevKit.LDKCOption_u32Z)
    public init(pointer: LightningDevKit.LDKCOption_u32Z, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> Swift.UInt32?
    public class func some(o: Swift.UInt32) -> LightningDevKit.Bindings.Option_u32Z
    public class func none() -> LightningDevKit.Bindings.Option_u32Z
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_u32Z
  }
}
public typealias UpdateFailHTLC = LightningDevKit.Bindings.UpdateFailHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFailHTLC : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKUpdateFailHTLC)
    public init(pointer: LightningDevKit.LDKUpdateFailHTLC, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_htlc_id() -> Swift.UInt64
    public func set_htlc_id(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.UpdateFailHTLC
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFailHTLCDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_NoneNoneZ = LightningDevKit.Bindings.Result_NoneNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NoneNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_NoneNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public class func ok() -> LightningDevKit.Bindings.Result_NoneNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_NoneNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NoneNoneZ
  }
}
public typealias Result_u32GraphSyncErrorZ = LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_u32GraphSyncErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_u32GraphSyncErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_u32GraphSyncErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.GraphSyncError?
    public func getValue() -> Swift.UInt32?
    public class func ok(o: Swift.UInt32) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public class func err(e: LightningDevKit.Bindings.GraphSyncError) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    @objc deinit
  }
}
public typealias UpdateFailMalformedHTLC = LightningDevKit.Bindings.UpdateFailMalformedHTLC
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UpdateFailMalformedHTLC : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKUpdateFailMalformedHTLC)
    public init(pointer: LightningDevKit.LDKUpdateFailMalformedHTLC, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_htlc_id() -> Swift.UInt64
    public func set_htlc_id(val: Swift.UInt64)
    public func get_failure_code() -> Swift.UInt16
    public func set_failure_code(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.UpdateFailMalformedHTLC
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UpdateFailMalformedHTLCDecodeErrorZ
    @objc deinit
  }
}
public typealias C2Tuple_u32TxOutZ = LightningDevKit.Bindings.C2Tuple_u32TxOutZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_u32TxOutZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_u32TxOutZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_u32TxOutZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_u32TxOutZ
    public class func new(a: Swift.UInt32, b: LightningDevKit.LDKTxOut) -> LightningDevKit.Bindings.C2Tuple_u32TxOutZ
    @objc deinit
    public func getA() -> Swift.UInt32
    public func getB() -> LightningDevKit.Bindings.TxOut
  }
}
public typealias Result_UnsignedNodeAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedNodeAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedNodeAnnouncement?
    public class func ok(o: LightningDevKit.Bindings.UnsignedNodeAnnouncement) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UnsignedNodeAnnouncementDecodeErrorZ
  }
}
public typealias Result_RouteHopDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHopDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RouteHopDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RouteHopDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHop?
    public class func ok(o: LightningDevKit.Bindings.RouteHop) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RouteHopDecodeErrorZ
  }
}
public typealias ChannelPublicKeys = LightningDevKit.Bindings.ChannelPublicKeys
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelPublicKeys : LightningDevKit.NativeTypeWrapper {
    public init(funding_pubkey_arg: [Swift.UInt8], revocation_basepoint_arg: [Swift.UInt8], payment_point_arg: [Swift.UInt8], delayed_payment_basepoint_arg: [Swift.UInt8], htlc_basepoint_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKChannelPublicKeys)
    public init(pointer: LightningDevKit.LDKChannelPublicKeys, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_funding_pubkey() -> [Swift.UInt8]
    public func set_funding_pubkey(val: [Swift.UInt8])
    public func get_revocation_basepoint() -> [Swift.UInt8]
    public func set_revocation_basepoint(val: [Swift.UInt8])
    public func get_payment_point() -> [Swift.UInt8]
    public func set_payment_point(val: [Swift.UInt8])
    public func get_delayed_payment_basepoint() -> [Swift.UInt8]
    public func set_delayed_payment_basepoint(val: [Swift.UInt8])
    public func get_htlc_basepoint() -> [Swift.UInt8]
    public func set_htlc_basepoint(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelPublicKeysDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_InvoiceSignOrCreationErrorZ = LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceSignOrCreationErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InvoiceSignOrCreationErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InvoiceSignOrCreationErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.SignOrCreationError?
    public func getValue() -> LightningDevKit.Bindings.Invoice?
    public class func ok(o: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
    public class func err(e: LightningDevKit.Bindings.SignOrCreationError) -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InvoiceSignOrCreationErrorZ
  }
}
public typealias PhantomRouteHints = LightningDevKit.Bindings.PhantomRouteHints
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PhantomRouteHints : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKPhantomRouteHints)
    public init(pointer: LightningDevKit.LDKPhantomRouteHints, anchor: LightningDevKit.NativeTypeWrapper)
    convenience public init(channels_arg: [LightningDevKit.Bindings.ChannelDetails], phantom_scid_arg: Swift.UInt64, real_node_pubkey_arg: [Swift.UInt8])
    public func get_channels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func set_channels(val: [LightningDevKit.Bindings.ChannelDetails])
    public func get_phantom_scid() -> Swift.UInt64
    public func set_phantom_scid(val: Swift.UInt64)
    public func get_real_node_pubkey() -> [Swift.UInt8]
    public func set_real_node_pubkey(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.PhantomRouteHints
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PhantomRouteHintsDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_C2Tuple_SignatureSignatureZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_SignatureSignatureZNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_SignatureSignatureZNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_SignatureSignatureZNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_SignatureSignatureZ?
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_SignatureSignatureZ) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_C2Tuple_SignatureSignatureZNoneZ
  }
}
public typealias Result_ChannelTransactionParametersDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelTransactionParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelTransactionParametersDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelTransactionParametersDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelTransactionParameters?
    public class func ok(o: LightningDevKit.Bindings.ChannelTransactionParameters) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
  }
}
public typealias Result_PaymentIdPaymentSendFailureZ = LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentIdPaymentSendFailureZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentIdPaymentSendFailureZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentIdPaymentSendFailureZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PaymentSendFailure?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
    public class func err(e: LightningDevKit.Bindings.PaymentSendFailure) -> LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
  }
}
public typealias ChannelTypeFeatures = LightningDevKit.Bindings.ChannelTypeFeatures
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelTypeFeatures : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKChannelTypeFeatures)
    public init(pointer: LightningDevKit.LDKChannelTypeFeatures, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.ChannelTypeFeatures, b: LightningDevKit.Bindings.ChannelTypeFeatures) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func requires_unknown_bits() -> Swift.Bool
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelTypeFeaturesDecodeErrorZ
    public func set_static_remote_key_optional()
    public func set_static_remote_key_required()
    public func supports_static_remote_key() -> Swift.Bool
    public func requires_static_remote_key() -> Swift.Bool
    public func set_scid_privacy_optional()
    public func set_scid_privacy_required()
    public func supports_scid_privacy() -> Swift.Bool
    public func requires_scid_privacy() -> Swift.Bool
    public func set_zero_conf_optional()
    public func set_zero_conf_required()
    public func supports_zero_conf() -> Swift.Bool
    public func requires_zero_conf() -> Swift.Bool
    @objc deinit
  }
}
public typealias RawDataPart = LightningDevKit.Bindings.RawDataPart
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RawDataPart : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKRawDataPart)
    public init(pointer: LightningDevKit.LDKRawDataPart, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_timestamp() -> LightningDevKit.Bindings.PositiveTimestamp
    public func set_timestamp(val: LightningDevKit.Bindings.PositiveTimestamp)
    public class func eq(a: LightningDevKit.Bindings.RawDataPart, b: LightningDevKit.Bindings.RawDataPart) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.RawDataPart
    @objc deinit
  }
}
public typealias Result_OpenChannelDecodeErrorZ = LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_OpenChannelDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_OpenChannelDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_OpenChannelDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.OpenChannel?
    public class func ok(o: LightningDevKit.Bindings.OpenChannel) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_OpenChannelDecodeErrorZ
  }
}
public typealias Score = LightningDevKit.Bindings.Score
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Score : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKScore)
    public init(pointer: LightningDevKit.LDKScore, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func channel_penalty_msat(short_channel_id: Swift.UInt64, source: LightningDevKit.Bindings.NodeId, target: LightningDevKit.Bindings.NodeId, usage: LightningDevKit.Bindings.ChannelUsage) -> Swift.UInt64
    open func payment_path_failed(path: [LightningDevKit.LDKRouteHop], short_channel_id: Swift.UInt64)
    open func payment_path_successful(path: [LightningDevKit.LDKRouteHop])
    open func probe_failed(path: [LightningDevKit.LDKRouteHop], short_channel_id: Swift.UInt64)
    open func probe_successful(path: [LightningDevKit.LDKRouteHop])
    open func write() -> [Swift.UInt8]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedScore : LightningDevKit.Score {
  override public func channel_penalty_msat(short_channel_id: Swift.UInt64, source: LightningDevKit.NodeId, target: LightningDevKit.NodeId, usage: LightningDevKit.ChannelUsage) -> Swift.UInt64
  public func payment_path_failed(path: [LightningDevKit.RouteHop], short_channel_id: Swift.UInt64)
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func payment_path_failed(path: [LightningDevKit.LDKRouteHop], short_channel_id: Swift.UInt64)
  public func payment_path_successful(path: [LightningDevKit.RouteHop])
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func payment_path_successful(path: [LightningDevKit.LDKRouteHop])
  public func probe_failed(path: [LightningDevKit.RouteHop], short_channel_id: Swift.UInt64)
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func probe_failed(path: [LightningDevKit.LDKRouteHop], short_channel_id: Swift.UInt64)
  public func probe_successful(path: [LightningDevKit.RouteHop])
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func probe_successful(path: [LightningDevKit.LDKRouteHop])
  override public func write() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKScore)
  override public init(pointer: LightningDevKit.LDKScore, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_NodeIdDecodeErrorZ = LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NodeIdDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NodeIdDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NodeIdDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NodeId?
    public class func ok(o: LightningDevKit.Bindings.NodeId) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NodeIdDecodeErrorZ
  }
}
public typealias Result_ClosingSignedFeeRangeDecodeErrorZ = LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ClosingSignedFeeRangeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ClosingSignedFeeRangeDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ClosingSignedFeeRangeDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ClosingSignedFeeRange?
    public class func ok(o: LightningDevKit.Bindings.ClosingSignedFeeRange) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ClosingSignedFeeRangeDecodeErrorZ
  }
}
public typealias Result_NetworkGraphDecodeErrorZ = LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NetworkGraphDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NetworkGraphDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NetworkGraphDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.NetworkGraph?
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public class func ok(o: LightningDevKit.Bindings.NetworkGraph) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_NetworkGraphDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_SignatureNoneZ = LightningDevKit.Bindings.Result_SignatureNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignatureNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SignatureNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_SignatureNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_SignatureNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_SignatureNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SignatureNoneZ
  }
}
public typealias Result__u832APIErrorZ = LightningDevKit.Bindings.Result__u832APIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result__u832APIErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult__u832APIErrorZ)
    public init(pointer: LightningDevKit.LDKCResult__u832APIErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result__u832APIErrorZ
    public class func err(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result__u832APIErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result__u832APIErrorZ
  }
}
public typealias Init = LightningDevKit.Bindings.Init
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Init : LightningDevKit.NativeTypeWrapper {
    public init(features_arg: LightningDevKit.Bindings.InitFeatures, remote_network_address_arg: LightningDevKit.Bindings.Option_NetAddressZ)
    public init(pointer: LightningDevKit.LDKInit)
    public init(pointer: LightningDevKit.LDKInit, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_features() -> LightningDevKit.Bindings.InitFeatures
    public func set_features(val: LightningDevKit.Bindings.InitFeatures)
    public func get_remote_network_address() -> LightningDevKit.Bindings.Option_NetAddressZ
    public func set_remote_network_address(val: LightningDevKit.Bindings.Option_NetAddressZ)
    public func clone() -> LightningDevKit.Bindings.Init
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_InitDecodeErrorZ
    @objc deinit
  }
}
public typealias Access = LightningDevKit.Bindings.Access
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Access : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKAccess)
    public init(pointer: LightningDevKit.LDKAccess, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func get_utxo(genesis_hash: [Swift.UInt8]?, short_channel_id: Swift.UInt64) -> LightningDevKit.Bindings.Result_TxOutAccessErrorZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedAccess : LightningDevKit.Access {
  override public func get_utxo(genesis_hash: [Swift.UInt8]?, short_channel_id: Swift.UInt64) -> LightningDevKit.Result_TxOutAccessErrorZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKAccess)
  override public init(pointer: LightningDevKit.LDKAccess, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Result_FixedPenaltyScorerDecodeErrorZ = LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FixedPenaltyScorerDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_FixedPenaltyScorerDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_FixedPenaltyScorerDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FixedPenaltyScorer?
    public class func ok(o: LightningDevKit.Bindings.FixedPenaltyScorer) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_FixedPenaltyScorerDecodeErrorZ
  }
}
public typealias Result_UnsignedChannelAnnouncementDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedChannelAnnouncementDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedChannelAnnouncement?
    public class func ok(o: LightningDevKit.Bindings.UnsignedChannelAnnouncement) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UnsignedChannelAnnouncementDecodeErrorZ
  }
}
public typealias UserConfig = LightningDevKit.Bindings.UserConfig
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UserConfig : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKUserConfig)
    public init(pointer: LightningDevKit.LDKUserConfig, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_handshake_config() -> LightningDevKit.Bindings.ChannelHandshakeConfig
    public func set_channel_handshake_config(val: LightningDevKit.Bindings.ChannelHandshakeConfig)
    public func get_channel_handshake_limits() -> LightningDevKit.Bindings.ChannelHandshakeLimits
    public func set_channel_handshake_limits(val: LightningDevKit.Bindings.ChannelHandshakeLimits)
    public func get_channel_config() -> LightningDevKit.Bindings.ChannelConfig
    public func set_channel_config(val: LightningDevKit.Bindings.ChannelConfig)
    public func get_accept_forwards_to_priv_channels() -> Swift.Bool
    public func set_accept_forwards_to_priv_channels(val: Swift.Bool)
    public func get_accept_inbound_channels() -> Swift.Bool
    public func set_accept_inbound_channels(val: Swift.Bool)
    public func get_manually_accept_inbound_channels() -> Swift.Bool
    public func set_manually_accept_inbound_channels(val: Swift.Bool)
    public func clone() -> LightningDevKit.Bindings.UserConfig
    @objc deinit
  }
}
public typealias Option_MonitorEventZ = LightningDevKit.Bindings.Option_MonitorEventZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_MonitorEventZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.MonitorEvent?)
    public init(pointer: LightningDevKit.LDKCOption_MonitorEventZ)
    public init(pointer: LightningDevKit.LDKCOption_MonitorEventZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.MonitorEvent?
    public class func some(o: LightningDevKit.Bindings.MonitorEvent) -> LightningDevKit.Bindings.Option_MonitorEventZ
    public class func none() -> LightningDevKit.Bindings.Option_MonitorEventZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_MonitorEventZ
  }
}
public typealias OutPoint = LightningDevKit.Bindings.OutPoint
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class OutPoint : LightningDevKit.NativeTypeWrapper {
    public init(txid_arg: [Swift.UInt8], index_arg: Swift.UInt16)
    public init(pointer: LightningDevKit.LDKOutPoint)
    public init(pointer: LightningDevKit.LDKOutPoint, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_txid() -> [Swift.UInt8]
    public func set_txid(val: [Swift.UInt8])
    public func get_index() -> Swift.UInt16
    public func set_index(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.OutPoint
    public class func eq(a: LightningDevKit.Bindings.OutPoint, b: LightningDevKit.Bindings.OutPoint) -> Swift.Bool
    public func hash() -> Swift.UInt64
    public func to_channel_id() -> [Swift.UInt8]
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_OutPointDecodeErrorZ
    @objc deinit
  }
}
public typealias InvoicePayer = LightningDevKit.Bindings.InvoicePayer
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvoicePayer : LightningDevKit.NativeTypeWrapper {
    public init(payer: LightningDevKit.Bindings.Payer, router: LightningDevKit.Bindings.Router, scorer: LightningDevKit.Bindings.MultiThreadedLockableScore, logger: LightningDevKit.Bindings.Logger, event_handler: LightningDevKit.Bindings.EventHandler, retry: LightningDevKit.Bindings.Retry)
    public init(pointer: LightningDevKit.LDKInvoicePayer)
    public init(pointer: LightningDevKit.LDKInvoicePayer, anchor: LightningDevKit.NativeTypeWrapper)
    public func pay_invoice(invoice: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func pay_zero_value_invoice(invoice: LightningDevKit.Bindings.Invoice, amount_msats: Swift.UInt64) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func pay_pubkey(pubkey: [Swift.UInt8], payment_preimage: [Swift.UInt8], amount_msats: Swift.UInt64, final_cltv_expiry_delta: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentIdPaymentErrorZ
    public func remove_cached_payment(payment_hash: [Swift.UInt8])
    public func as_EventHandler() -> LightningDevKit.NativelyImplementedEventHandler
    @objc deinit
  }
}
public typealias C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ = LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
    public class func new(a: [Swift.UInt8], b: [LightningDevKit.Bindings.C2Tuple_u32TxOutZ]) -> LightningDevKit.Bindings.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> [LightningDevKit.Bindings.C2Tuple_u32TxOutZ]
  }
}
public typealias RoutingFees = LightningDevKit.Bindings.RoutingFees
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RoutingFees : LightningDevKit.NativeTypeWrapper {
    public init(base_msat_arg: Swift.UInt32, proportional_millionths_arg: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKRoutingFees)
    public init(pointer: LightningDevKit.LDKRoutingFees, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_base_msat() -> Swift.UInt32
    public func set_base_msat(val: Swift.UInt32)
    public func get_proportional_millionths() -> Swift.UInt32
    public func set_proportional_millionths(val: Swift.UInt32)
    public class func eq(a: LightningDevKit.Bindings.RoutingFees, b: LightningDevKit.Bindings.RoutingFees) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.RoutingFees
    public func hash() -> Swift.UInt64
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RoutingFeesDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_UpdateFulfillHTLCDecodeErrorZ = LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UpdateFulfillHTLCDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UpdateFulfillHTLCDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UpdateFulfillHTLCDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UpdateFulfillHTLC?
    public class func ok(o: LightningDevKit.Bindings.UpdateFulfillHTLC) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UpdateFulfillHTLCDecodeErrorZ
  }
}
public typealias TrustedCommitmentTransaction = LightningDevKit.Bindings.TrustedCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TrustedCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKTrustedCommitmentTransaction)
    public init(pointer: LightningDevKit.LDKTrustedCommitmentTransaction, anchor: LightningDevKit.NativeTypeWrapper)
    public func txid() -> [Swift.UInt8]
    public func built_transaction() -> LightningDevKit.Bindings.BuiltCommitmentTransaction
    public func keys() -> LightningDevKit.Bindings.TxCreationKeys
    public func opt_anchors() -> Swift.Bool
    public func get_htlc_sigs(htlc_base_key: [Swift.UInt8], channel_parameters: LightningDevKit.Bindings.DirectedChannelTransactionParameters) -> LightningDevKit.Bindings.Result_CVec_SignatureZNoneZ
    @objc deinit
  }
}
public typealias Listen = LightningDevKit.Bindings.Listen
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Listen : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKListen)
    public init(pointer: LightningDevKit.LDKListen, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func filtered_block_connected(header: [Swift.UInt8]?, txdata: [LightningDevKit.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
    open func block_connected(block: [Swift.UInt8], height: Swift.UInt32)
    open func block_disconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedListen : LightningDevKit.Listen {
  public func filtered_block_connected(header: [Swift.UInt8]?, txdata: [LightningDevKit.C2Tuple_usizeTransactionZ], height: Swift.UInt32)
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func filtered_block_connected(header: [Swift.UInt8]?, txdata: [LightningDevKit.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
  override public func block_connected(block: [Swift.UInt8], height: Swift.UInt32)
  override public func block_disconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKListen)
  override public init(pointer: LightningDevKit.LDKListen, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias InvalidShutdownScript = LightningDevKit.Bindings.InvalidShutdownScript
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class InvalidShutdownScript : LightningDevKit.NativeTypeWrapper {
    public init(script_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKInvalidShutdownScript)
    public init(pointer: LightningDevKit.LDKInvalidShutdownScript, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_script() -> [Swift.UInt8]
    public func set_script(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.InvalidShutdownScript
    @objc deinit
  }
}
public typealias Result_AnnouncementSignaturesDecodeErrorZ = LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_AnnouncementSignaturesDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_AnnouncementSignaturesDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_AnnouncementSignaturesDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.AnnouncementSignatures?
    public class func ok(o: LightningDevKit.Bindings.AnnouncementSignatures) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_AnnouncementSignaturesDecodeErrorZ
  }
}
public typealias ClosingTransaction = LightningDevKit.Bindings.ClosingTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ClosingTransaction : LightningDevKit.NativeTypeWrapper {
    public init(to_holder_value_sat: Swift.UInt64, to_counterparty_value_sat: Swift.UInt64, to_holder_script: [Swift.UInt8], to_counterparty_script: [Swift.UInt8], funding_outpoint: LightningDevKit.Bindings.OutPoint)
    public init(pointer: LightningDevKit.LDKClosingTransaction)
    public init(pointer: LightningDevKit.LDKClosingTransaction, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.ClosingTransaction
    public func hash() -> Swift.UInt64
    public func trust() -> LightningDevKit.Bindings.TrustedClosingTransaction
    public func verify(funding_outpoint: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_TrustedClosingTransactionNoneZ
    public func to_holder_value_sat() -> Swift.UInt64
    public func to_counterparty_value_sat() -> Swift.UInt64
    public func to_holder_script() -> [Swift.UInt8]
    public func to_counterparty_script() -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias Result_SignDecodeErrorZ = LightningDevKit.Bindings.Result_SignDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_SignDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_SignDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_SignDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Sign?
    public class func ok(o: LightningDevKit.Bindings.Sign) -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_SignDecodeErrorZ
  }
}
public typealias Result_NoneSemanticErrorZ = LightningDevKit.Bindings.Result_NoneSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NoneSemanticErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NoneSemanticErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSemanticError?
    public class func ok() -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
    public class func err(e: LightningDevKit.LDKSemanticError) -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NoneSemanticErrorZ
  }
}
public typealias Result_ErrorMessageDecodeErrorZ = LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ErrorMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ErrorMessageDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ErrorMessageDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ErrorMessage?
    public class func ok(o: LightningDevKit.Bindings.ErrorMessage) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
  }
}
public typealias QueryChannelRange = LightningDevKit.Bindings.QueryChannelRange
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class QueryChannelRange : LightningDevKit.NativeTypeWrapper {
    public init(chain_hash_arg: [Swift.UInt8], first_blocknum_arg: Swift.UInt32, number_of_blocks_arg: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKQueryChannelRange)
    public init(pointer: LightningDevKit.LDKQueryChannelRange, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_first_blocknum() -> Swift.UInt32
    public func set_first_blocknum(val: Swift.UInt32)
    public func get_number_of_blocks() -> Swift.UInt32
    public func set_number_of_blocks(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.QueryChannelRange
    public func end_blocknum() -> Swift.UInt32
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_QueryChannelRangeDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_InvoiceSemanticErrorZ = LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InvoiceSemanticErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InvoiceSemanticErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKSemanticError?
    public func getValue() -> LightningDevKit.Bindings.Invoice?
    public class func ok(o: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
    public class func err(e: LightningDevKit.LDKSemanticError) -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InvoiceSemanticErrorZ
  }
}
public typealias Option_C2Tuple_u64u64ZZ = LightningDevKit.Bindings.Option_C2Tuple_u64u64ZZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_C2Tuple_u64u64ZZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.C2Tuple_u64u64Z?)
    public init(pointer: LightningDevKit.LDKCOption_C2Tuple_u64u64ZZ)
    public init(pointer: LightningDevKit.LDKCOption_C2Tuple_u64u64ZZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_u64u64Z?
    public class func some(o: LightningDevKit.Bindings.C2Tuple_u64u64Z) -> LightningDevKit.Bindings.Option_C2Tuple_u64u64ZZ
    public class func none() -> LightningDevKit.Bindings.Option_C2Tuple_u64u64ZZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_C2Tuple_u64u64ZZ
  }
}
public typealias ErrorMessage = LightningDevKit.Bindings.ErrorMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ErrorMessage : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], data_arg: Swift.String)
    public init(pointer: LightningDevKit.LDKErrorMessage)
    public init(pointer: LightningDevKit.LDKErrorMessage, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_data() -> Swift.String
    public func set_data(val: Swift.String)
    public func clone() -> LightningDevKit.Bindings.ErrorMessage
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ErrorMessageDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_COption_EventZDecodeErrorZ = LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_COption_EventZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_COption_EventZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_COption_EventZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.Option_EventZ?
    public class func ok(o: LightningDevKit.Bindings.Option_EventZ) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_COption_EventZDecodeErrorZ
  }
}
public typealias Result_FundingCreatedDecodeErrorZ = LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_FundingCreatedDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_FundingCreatedDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_FundingCreatedDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.FundingCreated?
    public class func ok(o: LightningDevKit.Bindings.FundingCreated) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
  }
}
public typealias Result_RevokeAndACKDecodeErrorZ = LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RevokeAndACKDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RevokeAndACKDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RevokeAndACKDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RevokeAndACK?
    public class func ok(o: LightningDevKit.Bindings.RevokeAndACK) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
  }
}
public typealias UnsignedChannelUpdate = LightningDevKit.Bindings.UnsignedChannelUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class UnsignedChannelUpdate : LightningDevKit.NativeTypeWrapper {
    public init(chain_hash_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, timestamp_arg: Swift.UInt32, flags_arg: Swift.UInt8, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: Swift.UInt64, htlc_maximum_msat_arg: Swift.UInt64, fee_base_msat_arg: Swift.UInt32, fee_proportional_millionths_arg: Swift.UInt32, excess_data_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKUnsignedChannelUpdate)
    public init(pointer: LightningDevKit.LDKUnsignedChannelUpdate, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_short_channel_id() -> Swift.UInt64
    public func set_short_channel_id(val: Swift.UInt64)
    public func get_timestamp() -> Swift.UInt32
    public func set_timestamp(val: Swift.UInt32)
    public func get_flags() -> Swift.UInt8
    public func set_flags(val: Swift.UInt8)
    public func get_cltv_expiry_delta() -> Swift.UInt16
    public func set_cltv_expiry_delta(val: Swift.UInt16)
    public func get_htlc_minimum_msat() -> Swift.UInt64
    public func set_htlc_minimum_msat(val: Swift.UInt64)
    public func get_htlc_maximum_msat() -> Swift.UInt64
    public func set_htlc_maximum_msat(val: Swift.UInt64)
    public func get_fee_base_msat() -> Swift.UInt32
    public func set_fee_base_msat(val: Swift.UInt32)
    public func get_fee_proportional_millionths() -> Swift.UInt32
    public func set_fee_proportional_millionths(val: Swift.UInt32)
    public func get_excess_data() -> [Swift.UInt8]
    public func set_excess_data(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.UnsignedChannelUpdate
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    @objc deinit
  }
}
public typealias ParseOrSemanticError = LightningDevKit.Bindings.ParseOrSemanticError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ParseOrSemanticError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKParseOrSemanticError)
    public init(pointer: LightningDevKit.LDKParseOrSemanticError, anchor: LightningDevKit.NativeTypeWrapper)
    public enum ParseOrSemanticErrorValueType {
      case ParseError, SemanticError
      public static func == (a: LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorValueType, b: LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorValueType?
    public func getValueAsParseError() -> LightningDevKit.Bindings.ParseError?
    public func getValueAsSemanticError() -> LightningDevKit.LDKSemanticError?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.ParseOrSemanticError
    public class func parse_error(a: LightningDevKit.Bindings.ParseError) -> LightningDevKit.Bindings.ParseOrSemanticError
    public class func semantic_error(a: LightningDevKit.LDKSemanticError) -> LightningDevKit.Bindings.ParseOrSemanticError
    public func to_str() -> Swift.String
  }
}
public typealias ChainParameters = LightningDevKit.Bindings.ChainParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChainParameters : LightningDevKit.NativeTypeWrapper {
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(network_arg: LightningDevKit.LDKNetwork, best_block_arg: LightningDevKit.Bindings.BestBlock)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKChainParameters)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKChainParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_network() -> LightningDevKit.LDKNetwork
    public func set_network(val: LightningDevKit.LDKNetwork)
    public func get_best_block() -> LightningDevKit.Bindings.BestBlock
    public func set_best_block(val: LightningDevKit.Bindings.BestBlock)
    public func clone() -> LightningDevKit.Bindings.ChainParameters
    @objc deinit
  }
}
public typealias Result_ChannelMonitorUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelMonitorUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelMonitorUpdateDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelMonitorUpdateDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelMonitorUpdate?
    public class func ok(o: LightningDevKit.Bindings.ChannelMonitorUpdate) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelMonitorUpdateDecodeErrorZ
  }
}
public typealias Result_WarningMessageDecodeErrorZ = LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_WarningMessageDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_WarningMessageDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_WarningMessageDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.WarningMessage?
    public class func ok(o: LightningDevKit.Bindings.WarningMessage) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
  }
}
public typealias Result_NoneChannelMonitorUpdateErrZ = LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneChannelMonitorUpdateErrZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NoneChannelMonitorUpdateErrZ)
    public init(pointer: LightningDevKit.LDKCResult_NoneChannelMonitorUpdateErrZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.LDKChannelMonitorUpdateErr?
    public class func ok() -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
    public class func err(e: LightningDevKit.LDKChannelMonitorUpdateErr) -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NoneChannelMonitorUpdateErrZ
  }
}
public typealias Result_NoneAPIErrorZ = LightningDevKit.Bindings.Result_NoneAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NoneAPIErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NoneAPIErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public class func ok() -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public class func err(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
  }
}
public typealias Result_RouteLightningErrorZ = LightningDevKit.Bindings.Result_RouteLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RouteLightningErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RouteLightningErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public func getValue() -> LightningDevKit.Bindings.Route?
    public class func ok(o: LightningDevKit.Bindings.Route) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    public class func err(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RouteLightningErrorZ
  }
}
public typealias Result_TxCreationKeysDecodeErrorZ = LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TxCreationKeysDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_TxCreationKeysDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_TxCreationKeysDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.TxCreationKeys?
    public class func ok(o: LightningDevKit.Bindings.TxCreationKeys) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_TxCreationKeysDecodeErrorZ
  }
}
public typealias RouteParameters = LightningDevKit.Bindings.RouteParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RouteParameters : LightningDevKit.NativeTypeWrapper {
    public init(payment_params_arg: LightningDevKit.Bindings.PaymentParameters, final_value_msat_arg: Swift.UInt64, final_cltv_expiry_delta_arg: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKRouteParameters)
    public init(pointer: LightningDevKit.LDKRouteParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_payment_params() -> LightningDevKit.Bindings.PaymentParameters
    public func set_payment_params(val: LightningDevKit.Bindings.PaymentParameters)
    public func get_final_value_msat() -> Swift.UInt64
    public func set_final_value_msat(val: Swift.UInt64)
    public func get_final_cltv_expiry_delta() -> Swift.UInt32
    public func set_final_cltv_expiry_delta(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.RouteParameters
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    @objc deinit
  }
}
public typealias SocketDescriptor = LightningDevKit.Bindings.SocketDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class SocketDescriptor : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKSocketDescriptor)
    public init(pointer: LightningDevKit.LDKSocketDescriptor, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.SocketDescriptor
    @objc deinit
    open func send_data(data: [Swift.UInt8], resume_read: Swift.Bool) -> Swift.UInt
    open func disconnect_socket()
    open func eq(other_arg: LightningDevKit.Bindings.SocketDescriptor) -> Swift.Bool
    open func hash() -> Swift.UInt64
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedSocketDescriptor : LightningDevKit.SocketDescriptor {
  override public func send_data(data: [Swift.UInt8], resume_read: Swift.Bool) -> Swift.UInt
  override public func disconnect_socket()
  override public func eq(other_arg: LightningDevKit.SocketDescriptor) -> Swift.Bool
  override public func hash() -> Swift.UInt64
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKSocketDescriptor)
  override public init(pointer: LightningDevKit.LDKSocketDescriptor, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias Retry = LightningDevKit.Bindings.Retry
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Retry : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKRetry)
    public init(pointer: LightningDevKit.LDKRetry, anchor: LightningDevKit.NativeTypeWrapper)
    public enum RetryValueType {
      case Attempts, Timeout
      public static func == (a: LightningDevKit.Bindings.Retry.RetryValueType, b: LightningDevKit.Bindings.Retry.RetryValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Retry.RetryValueType?
    public func getValueAsAttempts() -> Swift.UInt?
    public func getValueAsTimeout() -> Swift.UInt64?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Retry
    public class func attempts(a: Swift.UInt) -> LightningDevKit.Bindings.Retry
    public class func timeout(a: Swift.UInt64) -> LightningDevKit.Bindings.Retry
    public class func eq(a: LightningDevKit.Bindings.Retry, b: LightningDevKit.Bindings.Retry) -> Swift.Bool
    public func hash() -> Swift.UInt64
  }
}
public typealias DataLossProtect = LightningDevKit.Bindings.DataLossProtect
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class DataLossProtect : LightningDevKit.NativeTypeWrapper {
    public init(your_last_per_commitment_secret_arg: [Swift.UInt8], my_current_per_commitment_point_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKDataLossProtect)
    public init(pointer: LightningDevKit.LDKDataLossProtect, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_your_last_per_commitment_secret() -> [Swift.UInt8]
    public func set_your_last_per_commitment_secret(val: [Swift.UInt8])
    public func get_my_current_per_commitment_point() -> [Swift.UInt8]
    public func set_my_current_per_commitment_point(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.DataLossProtect
    @objc deinit
  }
}
public typealias CustomMessageHandler = LightningDevKit.Bindings.CustomMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class CustomMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCustomMessageHandler)
    public init(pointer: LightningDevKit.LDKCustomMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func handle_custom_message(msg: LightningDevKit.Bindings.BindingsType, sender_node_id: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func get_and_clear_pending_msg() -> [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedCustomMessageHandler : LightningDevKit.CustomMessageHandler {
  override public func handle_custom_message(msg: LightningDevKit.BindingsType, sender_node_id: [Swift.UInt8]) -> LightningDevKit.Result_NoneLightningErrorZ
  override public func get_and_clear_pending_msg() -> [LightningDevKit.LDKC2Tuple_PublicKeyTypeZ]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKCustomMessageHandler)
  override public init(pointer: LightningDevKit.LDKCustomMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias ChannelTransactionParameters = LightningDevKit.Bindings.ChannelTransactionParameters
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelTransactionParameters : LightningDevKit.NativeTypeWrapper {
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(holder_pubkeys_arg: LightningDevKit.Bindings.ChannelPublicKeys, holder_selected_contest_delay_arg: Swift.UInt16, is_outbound_from_holder_arg: Swift.Bool, counterparty_parameters_arg: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters, funding_outpoint_arg: LightningDevKit.Bindings.OutPoint, opt_anchors_arg: LightningDevKit.LDKCOption_NoneZ)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKChannelTransactionParameters)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKChannelTransactionParameters, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_holder_pubkeys() -> LightningDevKit.Bindings.ChannelPublicKeys
    public func set_holder_pubkeys(val: LightningDevKit.Bindings.ChannelPublicKeys)
    public func get_holder_selected_contest_delay() -> Swift.UInt16
    public func set_holder_selected_contest_delay(val: Swift.UInt16)
    public func get_is_outbound_from_holder() -> Swift.Bool
    public func set_is_outbound_from_holder(val: Swift.Bool)
    public func get_counterparty_parameters() -> LightningDevKit.Bindings.CounterpartyChannelTransactionParameters
    public func set_counterparty_parameters(val: LightningDevKit.Bindings.CounterpartyChannelTransactionParameters)
    public func get_funding_outpoint() -> LightningDevKit.Bindings.OutPoint?
    public func set_funding_outpoint(val: LightningDevKit.Bindings.OutPoint)
    public func get_opt_anchors() -> LightningDevKit.LDKCOption_NoneZ
    public func set_opt_anchors(val: LightningDevKit.LDKCOption_NoneZ)
    public func clone() -> LightningDevKit.Bindings.ChannelTransactionParameters
    public func is_populated() -> Swift.Bool
    public func as_holder_broadcastable() -> LightningDevKit.Bindings.DirectedChannelTransactionParameters
    public func as_counterparty_broadcastable() -> LightningDevKit.Bindings.DirectedChannelTransactionParameters
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelTransactionParametersDecodeErrorZ
    @objc deinit
  }
}
public typealias C2Tuple_OutPointScriptZ = LightningDevKit.Bindings.C2Tuple_OutPointScriptZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_OutPointScriptZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_OutPointScriptZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_OutPointScriptZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_OutPointScriptZ
    public class func new(a: LightningDevKit.Bindings.OutPoint, b: [Swift.UInt8]) -> LightningDevKit.Bindings.C2Tuple_OutPointScriptZ
    @objc deinit
    public func getA() -> LightningDevKit.Bindings.OutPoint?
    public func getB() -> [Swift.UInt8]
  }
}
public typealias RevokeAndACK = LightningDevKit.Bindings.RevokeAndACK
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RevokeAndACK : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], per_commitment_secret_arg: [Swift.UInt8], next_per_commitment_point_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKRevokeAndACK)
    public init(pointer: LightningDevKit.LDKRevokeAndACK, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_per_commitment_secret() -> [Swift.UInt8]
    public func set_per_commitment_secret(val: [Swift.UInt8])
    public func get_next_per_commitment_point() -> [Swift.UInt8]
    public func set_next_per_commitment_point(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.RevokeAndACK
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_RevokeAndACKDecodeErrorZ
    @objc deinit
  }
}
public typealias PositiveTimestamp = LightningDevKit.Bindings.PositiveTimestamp
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PositiveTimestamp : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKPositiveTimestamp)
    public init(pointer: LightningDevKit.LDKPositiveTimestamp, anchor: LightningDevKit.NativeTypeWrapper)
    public class func eq(a: LightningDevKit.Bindings.PositiveTimestamp, b: LightningDevKit.Bindings.PositiveTimestamp) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.PositiveTimestamp
    public class func from_unix_timestamp(unix_seconds: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func from_system_time(time: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public class func from_duration_since_epoch(duration: Swift.UInt64) -> LightningDevKit.Bindings.Result_PositiveTimestampCreationErrorZ
    public func as_unix_timestamp() -> Swift.UInt64
    public func as_duration_since_epoch() -> Swift.UInt64
    public func as_time() -> Swift.UInt64
    @objc deinit
  }
}
public typealias Result_C2Tuple_SignatureCVec_SignatureZZNoneZ = LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_SignatureCVec_SignatureZZNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_SignatureCVec_SignatureZZ?
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_SignatureCVec_SignatureZZ) -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  }
}
public typealias WarningMessage = LightningDevKit.Bindings.WarningMessage
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class WarningMessage : LightningDevKit.NativeTypeWrapper {
    public init(channel_id_arg: [Swift.UInt8], data_arg: Swift.String)
    public init(pointer: LightningDevKit.LDKWarningMessage)
    public init(pointer: LightningDevKit.LDKWarningMessage, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channel_id() -> [Swift.UInt8]
    public func set_channel_id(val: [Swift.UInt8])
    public func get_data() -> Swift.String
    public func set_data(val: Swift.String)
    public func clone() -> LightningDevKit.Bindings.WarningMessage
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_WarningMessageDecodeErrorZ
    @objc deinit
  }
}
public typealias StaticPaymentOutputDescriptor = LightningDevKit.Bindings.StaticPaymentOutputDescriptor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class StaticPaymentOutputDescriptor : LightningDevKit.NativeTypeWrapper {
    public init(outpoint_arg: LightningDevKit.Bindings.OutPoint, output_arg: LightningDevKit.LDKTxOut, channel_keys_id_arg: [Swift.UInt8], channel_value_satoshis_arg: Swift.UInt64)
    public init(pointer: LightningDevKit.LDKStaticPaymentOutputDescriptor)
    public init(pointer: LightningDevKit.LDKStaticPaymentOutputDescriptor, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_outpoint() -> LightningDevKit.Bindings.OutPoint?
    public func set_outpoint(val: LightningDevKit.Bindings.OutPoint)
    public func get_output() -> LightningDevKit.Bindings.TxOut
    public func set_output(val: LightningDevKit.LDKTxOut)
    public func get_channel_keys_id() -> [Swift.UInt8]
    public func set_channel_keys_id(val: [Swift.UInt8])
    public func get_channel_value_satoshis() -> Swift.UInt64
    public func set_channel_value_satoshis(val: Swift.UInt64)
    public func clone() -> LightningDevKit.Bindings.StaticPaymentOutputDescriptor
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_StaticPaymentOutputDescriptorDecodeErrorZ
    @objc deinit
  }
}
public typealias C2Tuple_PublicKeyTypeZ = LightningDevKit.Bindings.C2Tuple_PublicKeyTypeZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_PublicKeyTypeZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_PublicKeyTypeZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_PublicKeyTypeZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_PublicKeyTypeZ
    public class func new(a: [Swift.UInt8], b: LightningDevKit.Bindings.BindingsType) -> LightningDevKit.Bindings.C2Tuple_PublicKeyTypeZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> LightningDevKit.Bindings.BindingsType
  }
}
public typealias Result_RouteHintDecodeErrorZ = LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteHintDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RouteHintDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RouteHintDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteHint?
    public class func ok(o: LightningDevKit.Bindings.RouteHint) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RouteHintDecodeErrorZ
  }
}
public typealias Result_ReplyShortChannelIdsEndDecodeErrorZ = LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ReplyShortChannelIdsEndDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ReplyShortChannelIdsEnd?
    public class func ok(o: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ReplyShortChannelIdsEndDecodeErrorZ
  }
}
public typealias Result_HTLCUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_HTLCUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_HTLCUpdateDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_HTLCUpdateDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.HTLCUpdate?
    public class func ok(o: LightningDevKit.Bindings.HTLCUpdate) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_HTLCUpdateDecodeErrorZ
  }
}
public typealias Result_UnsignedChannelUpdateDecodeErrorZ = LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_UnsignedChannelUpdateDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_UnsignedChannelUpdateDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_UnsignedChannelUpdateDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.UnsignedChannelUpdate?
    public class func ok(o: LightningDevKit.Bindings.UnsignedChannelUpdate) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_UnsignedChannelUpdateDecodeErrorZ
  }
}
public typealias AcceptChannel = LightningDevKit.Bindings.AcceptChannel
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class AcceptChannel : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKAcceptChannel)
    public init(pointer: LightningDevKit.LDKAcceptChannel, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_temporary_channel_id() -> [Swift.UInt8]
    public func set_temporary_channel_id(val: [Swift.UInt8])
    public func get_dust_limit_satoshis() -> Swift.UInt64
    public func set_dust_limit_satoshis(val: Swift.UInt64)
    public func get_max_htlc_value_in_flight_msat() -> Swift.UInt64
    public func set_max_htlc_value_in_flight_msat(val: Swift.UInt64)
    public func get_channel_reserve_satoshis() -> Swift.UInt64
    public func set_channel_reserve_satoshis(val: Swift.UInt64)
    public func get_htlc_minimum_msat() -> Swift.UInt64
    public func set_htlc_minimum_msat(val: Swift.UInt64)
    public func get_minimum_depth() -> Swift.UInt32
    public func set_minimum_depth(val: Swift.UInt32)
    public func get_to_self_delay() -> Swift.UInt16
    public func set_to_self_delay(val: Swift.UInt16)
    public func get_max_accepted_htlcs() -> Swift.UInt16
    public func set_max_accepted_htlcs(val: Swift.UInt16)
    public func get_funding_pubkey() -> [Swift.UInt8]
    public func set_funding_pubkey(val: [Swift.UInt8])
    public func get_revocation_basepoint() -> [Swift.UInt8]
    public func set_revocation_basepoint(val: [Swift.UInt8])
    public func get_payment_point() -> [Swift.UInt8]
    public func set_payment_point(val: [Swift.UInt8])
    public func get_delayed_payment_basepoint() -> [Swift.UInt8]
    public func set_delayed_payment_basepoint(val: [Swift.UInt8])
    public func get_htlc_basepoint() -> [Swift.UInt8]
    public func set_htlc_basepoint(val: [Swift.UInt8])
    public func get_first_per_commitment_point() -> [Swift.UInt8]
    public func set_first_per_commitment_point(val: [Swift.UInt8])
    public func get_channel_type() -> LightningDevKit.Bindings.ChannelTypeFeatures
    public func set_channel_type(val: LightningDevKit.Bindings.ChannelTypeFeatures)
    public func clone() -> LightningDevKit.Bindings.AcceptChannel
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_AcceptChannelDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_RouteParametersDecodeErrorZ = LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_RouteParametersDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_RouteParametersDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_RouteParametersDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.RouteParameters?
    public class func ok(o: LightningDevKit.Bindings.RouteParameters) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_RouteParametersDecodeErrorZ
  }
}
public typealias Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ = LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.APIError?
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ?
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentSecretZ) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
    public class func err(e: LightningDevKit.Bindings.APIError) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
  }
}
public typealias Result_TransactionNoneZ = LightningDevKit.Bindings.Result_TransactionNoneZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_TransactionNoneZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_TransactionNoneZ)
    public init(pointer: LightningDevKit.LDKCResult_TransactionNoneZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getValue() -> [Swift.UInt8]?
    public class func ok(o: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_TransactionNoneZ
    public class func err() -> LightningDevKit.Bindings.Result_TransactionNoneZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_TransactionNoneZ
  }
}
public typealias Option_FilterZ = LightningDevKit.Bindings.Option_FilterZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_FilterZ : LightningDevKit.NativeTypeWrapper {
    public init(value: LightningDevKit.Bindings.Filter?)
    public init(pointer: LightningDevKit.LDKCOption_FilterZ)
    public init(pointer: LightningDevKit.LDKCOption_FilterZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> LightningDevKit.Bindings.Filter?
    public class func some(o: LightningDevKit.Bindings.Filter) -> LightningDevKit.Bindings.Option_FilterZ
    public class func none() -> LightningDevKit.Bindings.Option_FilterZ
    @objc deinit
  }
}
public typealias HTLCDestination = LightningDevKit.Bindings.HTLCDestination
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class HTLCDestination : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKHTLCDestination)
    public init(pointer: LightningDevKit.LDKHTLCDestination, anchor: LightningDevKit.NativeTypeWrapper)
    public enum HTLCDestinationValueType {
      case NextHopChannel, UnknownNextHop, FailedPayment
      public static func == (a: LightningDevKit.Bindings.HTLCDestination.HTLCDestinationValueType, b: LightningDevKit.Bindings.HTLCDestination.HTLCDestinationValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.HTLCDestination.HTLCDestinationValueType?
    public func getValueAsNextHopChannel() -> LightningDevKit.Bindings.HTLCDestination.NextHopChannel?
    public func getValueAsUnknownNextHop() -> LightningDevKit.Bindings.HTLCDestination.UnknownNextHop?
    public func getValueAsFailedPayment() -> LightningDevKit.Bindings.HTLCDestination.FailedPayment?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.HTLCDestination
    public class func next_hop_channel(node_id: [Swift.UInt8], channel_id: [Swift.UInt8]) -> LightningDevKit.Bindings.HTLCDestination
    public class func unknown_next_hop(requested_forward_scid: Swift.UInt64) -> LightningDevKit.Bindings.HTLCDestination
    public class func failed_payment(payment_hash: [Swift.UInt8]) -> LightningDevKit.Bindings.HTLCDestination
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_COption_HTLCDestinationZDecodeErrorZ
    @_hasMissingDesignatedInitializers public class NextHopChannel : LightningDevKit.NativeTypeWrapper {
      public func getNode_id() -> [Swift.UInt8]
      public func getChannel_id() -> [Swift.UInt8]
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class UnknownNextHop : LightningDevKit.NativeTypeWrapper {
      public func getRequested_forward_scid() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class FailedPayment : LightningDevKit.NativeTypeWrapper {
      public func getPayment_hash() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias Result_PaymentPurposeDecodeErrorZ = LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_PaymentPurposeDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_PaymentPurposeDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_PaymentPurposeDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.PaymentPurpose?
    public class func ok(o: LightningDevKit.Bindings.PaymentPurpose) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
  }
}
public typealias Result_InvoiceParseOrSemanticErrorZ = LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_InvoiceParseOrSemanticErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_InvoiceParseOrSemanticErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_InvoiceParseOrSemanticErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.ParseOrSemanticError?
    public func getValue() -> LightningDevKit.Bindings.Invoice?
    public class func ok(o: LightningDevKit.Bindings.Invoice) -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
    public class func err(e: LightningDevKit.Bindings.ParseOrSemanticError) -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_InvoiceParseOrSemanticErrorZ
  }
}
public typealias ParseError = LightningDevKit.Bindings.ParseError
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ParseError : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKParseError)
    public init(pointer: LightningDevKit.LDKParseError, anchor: LightningDevKit.NativeTypeWrapper)
    public enum ParseErrorValueType {
      case Bech32Error, ParseAmountError, MalformedSignature, DescriptionDecodeError, InvalidSliceLength
      public static func == (a: LightningDevKit.Bindings.ParseError.ParseErrorValueType, b: LightningDevKit.Bindings.ParseError.ParseErrorValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.ParseError.ParseErrorValueType?
    public func getValueAsBech32Error() -> LightningDevKit.Bindings.Bech32Error?
    public func getValueAsParseAmountError() -> ()?
    public func getValueAsMalformedSignature() -> LightningDevKit.LDKSecp256k1Error?
    public func getValueAsDescriptionDecodeError() -> ()?
    public func getValueAsInvalidSliceLength() -> Swift.String?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.ParseError
    public class func bech32_error(a: LightningDevKit.Bindings.Bech32Error) -> LightningDevKit.Bindings.ParseError
    public class func malformed_signature(a: LightningDevKit.LDKSecp256k1Error) -> LightningDevKit.Bindings.ParseError
    public class func bad_prefix() -> LightningDevKit.Bindings.ParseError
    public class func unknown_currency() -> LightningDevKit.Bindings.ParseError
    public class func unknown_si_prefix() -> LightningDevKit.Bindings.ParseError
    public class func malformed_hrp() -> LightningDevKit.Bindings.ParseError
    public class func too_short_data_part() -> LightningDevKit.Bindings.ParseError
    public class func unexpected_end_of_tagged_fields() -> LightningDevKit.Bindings.ParseError
    public class func padding_error() -> LightningDevKit.Bindings.ParseError
    public class func integer_overflow_error() -> LightningDevKit.Bindings.ParseError
    public class func invalid_seg_wit_program_length() -> LightningDevKit.Bindings.ParseError
    public class func invalid_pub_key_hash_length() -> LightningDevKit.Bindings.ParseError
    public class func invalid_script_hash_length() -> LightningDevKit.Bindings.ParseError
    public class func invalid_recovery_id() -> LightningDevKit.Bindings.ParseError
    public class func invalid_slice_length(a: Swift.String) -> LightningDevKit.Bindings.ParseError
    public class func skip() -> LightningDevKit.Bindings.ParseError
    public func to_str() -> Swift.String
  }
}
public typealias NodeInfo = LightningDevKit.Bindings.NodeInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NodeInfo : LightningDevKit.NativeTypeWrapper {
    public init(channels_arg: [Swift.UInt64], lowest_inbound_channel_fees_arg: LightningDevKit.Bindings.RoutingFees, announcement_info_arg: LightningDevKit.Bindings.NodeAnnouncementInfo)
    public init(pointer: LightningDevKit.LDKNodeInfo)
    public init(pointer: LightningDevKit.LDKNodeInfo, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_channels() -> [Swift.UInt64]
    public func set_channels(val: [Swift.UInt64])
    public func get_lowest_inbound_channel_fees() -> LightningDevKit.Bindings.RoutingFees
    public func set_lowest_inbound_channel_fees(val: LightningDevKit.Bindings.RoutingFees)
    public func get_announcement_info() -> LightningDevKit.Bindings.NodeAnnouncementInfo
    public func set_announcement_info(val: LightningDevKit.Bindings.NodeAnnouncementInfo)
    public func clone() -> LightningDevKit.Bindings.NodeInfo
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NodeInfoDecodeErrorZ
    @objc deinit
  }
}
public typealias ChannelManager = LightningDevKit.Bindings.ChannelManager
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelManager : LightningDevKit.NativeTypeWrapper {
    public init(fee_est: LightningDevKit.Bindings.FeeEstimator, chain_monitor: LightningDevKit.Bindings.Watch, tx_broadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, keys_manager: LightningDevKit.Bindings.KeysInterface, config: LightningDevKit.Bindings.UserConfig, params: LightningDevKit.Bindings.ChainParameters)
    public init(pointer: LightningDevKit.LDKChannelManager)
    public init(pointer: LightningDevKit.LDKChannelManager, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_current_default_configuration() -> LightningDevKit.Bindings.UserConfig
    public func create_channel(their_network_key: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, push_msat: Swift.UInt64, user_channel_id: Swift.UInt64, override_config: LightningDevKit.Bindings.UserConfig) -> LightningDevKit.Bindings.Result__u832APIErrorZ
    public func list_channels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func list_usable_channels() -> [LightningDevKit.Bindings.ChannelDetails]
    public func close_channel(channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func close_channel_with_target_feerate(channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], target_feerate_sats_per_1000_weight: Swift.UInt32) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func force_close_broadcasting_latest_txn(channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func force_close_without_broadcasting_txn(channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func force_close_all_channels_broadcasting_latest_txn()
    public func force_close_all_channels_without_broadcasting_txn()
    public func send_payment(route: LightningDevKit.Bindings.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentIdPaymentSendFailureZ
    public func retry_payment(route: LightningDevKit.Bindings.Route, payment_id: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NonePaymentSendFailureZ
    public func abandon_payment(payment_id: [Swift.UInt8])
    public func send_spontaneous_payment(route: LightningDevKit.Bindings.Route, payment_preimage: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    public func send_probe(hops: [LightningDevKit.Bindings.RouteHop]) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
    public func funding_transaction_generated(temporary_channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], funding_transaction: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func broadcast_node_announcement(rgb: [Swift.UInt8], alias: [Swift.UInt8], addresses: [LightningDevKit.Bindings.NetAddress])
    public func update_channel_config(counterparty_node_id: [Swift.UInt8], channel_ids: [[Swift.UInt8]], config: LightningDevKit.Bindings.ChannelConfig) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func process_pending_htlc_forwards()
    public func timer_tick_occurred()
    public func fail_htlc_backwards(payment_hash: [Swift.UInt8])
    public func claim_funds(payment_preimage: [Swift.UInt8])
    public func get_our_node_id() -> [Swift.UInt8]
    public func accept_inbound_channel(temporary_channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], user_channel_id: Swift.UInt64) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func accept_inbound_channel_from_trusted_peer_0conf(temporary_channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], user_channel_id: Swift.UInt64) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func create_inbound_payment(min_value_msat: LightningDevKit.Bindings.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
    public func create_inbound_payment_legacy(min_value_msat: LightningDevKit.Bindings.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
    public func create_inbound_payment_for_hash(payment_hash: [Swift.UInt8], min_value_msat: LightningDevKit.Bindings.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentSecretNoneZ
    public func create_inbound_payment_for_hash_legacy(payment_hash: [Swift.UInt8], min_value_msat: LightningDevKit.Bindings.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LightningDevKit.Bindings.Result_PaymentSecretAPIErrorZ
    public func get_payment_preimage(payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPreimageAPIErrorZ
    public func get_phantom_scid() -> Swift.UInt64
    public func get_phantom_route_hints() -> LightningDevKit.Bindings.PhantomRouteHints
    public func as_MessageSendEventsProvider() -> LightningDevKit.NativelyImplementedMessageSendEventsProvider
    public func as_EventsProvider() -> LightningDevKit.NativelyImplementedEventsProvider
    public func as_Listen() -> LightningDevKit.NativelyImplementedListen
    public func as_Confirm() -> LightningDevKit.NativelyImplementedConfirm
    public func await_persistable_update_timeout(max_wait: Swift.UInt64) -> Swift.Bool
    public func await_persistable_update()
    public func current_best_block() -> LightningDevKit.Bindings.BestBlock
    public func as_ChannelMessageHandler() -> LightningDevKit.NativelyImplementedChannelMessageHandler
    public func write() -> [Swift.UInt8]
    public func as_Payer() -> LightningDevKit.NativelyImplementedPayer
    @objc deinit
  }
}
public typealias Option_CVec_NetAddressZZ = LightningDevKit.Bindings.Option_CVec_NetAddressZZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Option_CVec_NetAddressZZ : LightningDevKit.NativeTypeWrapper {
    public init(value: [LightningDevKit.Bindings.NetAddress]?)
    public init(pointer: LightningDevKit.LDKCOption_CVec_NetAddressZZ)
    public init(pointer: LightningDevKit.LDKCOption_CVec_NetAddressZZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func getValue() -> [LightningDevKit.Bindings.NetAddress]?
    public class func some(o: [LightningDevKit.Bindings.NetAddress]) -> LightningDevKit.Bindings.Option_CVec_NetAddressZZ
    public class func none() -> LightningDevKit.Bindings.Option_CVec_NetAddressZZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Option_CVec_NetAddressZZ
  }
}
public typealias C2Tuple_SignatureSignatureZ = LightningDevKit.Bindings.C2Tuple_SignatureSignatureZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_SignatureSignatureZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_SignatureSignatureZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_SignatureSignatureZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_SignatureSignatureZ
    public class func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LightningDevKit.Bindings.C2Tuple_SignatureSignatureZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> [Swift.UInt8]
  }
}
public typealias RawInvoice = LightningDevKit.Bindings.RawInvoice
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RawInvoice : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKRawInvoice)
    public init(pointer: LightningDevKit.LDKRawInvoice, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_data() -> LightningDevKit.Bindings.RawDataPart
    public func set_data(val: LightningDevKit.Bindings.RawDataPart)
    public class func eq(a: LightningDevKit.Bindings.RawInvoice, b: LightningDevKit.Bindings.RawInvoice) -> Swift.Bool
    public func clone() -> LightningDevKit.Bindings.RawInvoice
    public func hash() -> [Swift.UInt8]
    public func payment_hash() -> LightningDevKit.Bindings.Sha256
    public func description() -> LightningDevKit.Bindings.Description
    public func payee_pub_key() -> LightningDevKit.Bindings.PayeePubKey
    public func description_hash() -> LightningDevKit.Bindings.Sha256
    public func expiry_time() -> LightningDevKit.Bindings.ExpiryTime
    public func min_final_cltv_expiry() -> LightningDevKit.Bindings.MinFinalCltvExpiry
    public func payment_secret() -> [Swift.UInt8]
    public func features() -> LightningDevKit.Bindings.InvoiceFeatures
    public func private_routes() -> [LightningDevKit.Bindings.PrivateRoute]
    public func amount_pico_btc() -> LightningDevKit.Bindings.Option_u64Z
    public func currency() -> LightningDevKit.LDKCurrency
    @objc deinit
  }
}
public typealias ChannelHandshakeLimits = LightningDevKit.Bindings.ChannelHandshakeLimits
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelHandshakeLimits : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKChannelHandshakeLimits)
    public init(pointer: LightningDevKit.LDKChannelHandshakeLimits, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_min_funding_satoshis() -> Swift.UInt64
    public func set_min_funding_satoshis(val: Swift.UInt64)
    public func get_max_funding_satoshis() -> Swift.UInt64
    public func set_max_funding_satoshis(val: Swift.UInt64)
    public func get_max_htlc_minimum_msat() -> Swift.UInt64
    public func set_max_htlc_minimum_msat(val: Swift.UInt64)
    public func get_min_max_htlc_value_in_flight_msat() -> Swift.UInt64
    public func set_min_max_htlc_value_in_flight_msat(val: Swift.UInt64)
    public func get_max_channel_reserve_satoshis() -> Swift.UInt64
    public func set_max_channel_reserve_satoshis(val: Swift.UInt64)
    public func get_min_max_accepted_htlcs() -> Swift.UInt16
    public func set_min_max_accepted_htlcs(val: Swift.UInt16)
    public func get_max_minimum_depth() -> Swift.UInt32
    public func set_max_minimum_depth(val: Swift.UInt32)
    public func get_trust_own_funding_0conf() -> Swift.Bool
    public func set_trust_own_funding_0conf(val: Swift.Bool)
    public func get_force_announced_channel_preference() -> Swift.Bool
    public func set_force_announced_channel_preference(val: Swift.Bool)
    public func get_their_to_self_delay() -> Swift.UInt16
    public func set_their_to_self_delay(val: Swift.UInt16)
    public func clone() -> LightningDevKit.Bindings.ChannelHandshakeLimits
    @objc deinit
  }
}
public typealias Balance = LightningDevKit.Bindings.Balance
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Balance : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKBalance)
    public init(pointer: LightningDevKit.LDKBalance, anchor: LightningDevKit.NativeTypeWrapper)
    public enum BalanceValueType {
      case ClaimableOnChannelClose, ClaimableAwaitingConfirmations, ContentiousClaimable, MaybeClaimableHTLCAwaitingTimeout
      public static func == (a: LightningDevKit.Bindings.Balance.BalanceValueType, b: LightningDevKit.Bindings.Balance.BalanceValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.Balance.BalanceValueType?
    public func getValueAsClaimableOnChannelClose() -> LightningDevKit.Bindings.Balance.ClaimableOnChannelClose?
    public func getValueAsClaimableAwaitingConfirmations() -> LightningDevKit.Bindings.Balance.ClaimableAwaitingConfirmations?
    public func getValueAsContentiousClaimable() -> LightningDevKit.Bindings.Balance.ContentiousClaimable?
    public func getValueAsMaybeClaimableHTLCAwaitingTimeout() -> LightningDevKit.Bindings.Balance.MaybeClaimableHTLCAwaitingTimeout?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Balance
    public class func claimable_on_channel_close(claimable_amount_satoshis: Swift.UInt64) -> LightningDevKit.Bindings.Balance
    public class func claimable_awaiting_confirmations(claimable_amount_satoshis: Swift.UInt64, confirmation_height: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func contentious_claimable(claimable_amount_satoshis: Swift.UInt64, timeout_height: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func maybe_claimable_htlcawaiting_timeout(claimable_amount_satoshis: Swift.UInt64, claimable_height: Swift.UInt32) -> LightningDevKit.Bindings.Balance
    public class func eq(a: LightningDevKit.Bindings.Balance, b: LightningDevKit.Bindings.Balance) -> Swift.Bool
    @_hasMissingDesignatedInitializers public class ClaimableOnChannelClose : LightningDevKit.NativeTypeWrapper {
      public func getClaimable_amount_satoshis() -> Swift.UInt64
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ClaimableAwaitingConfirmations : LightningDevKit.NativeTypeWrapper {
      public func getClaimable_amount_satoshis() -> Swift.UInt64
      public func getConfirmation_height() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ContentiousClaimable : LightningDevKit.NativeTypeWrapper {
      public func getClaimable_amount_satoshis() -> Swift.UInt64
      public func getTimeout_height() -> Swift.UInt32
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class MaybeClaimableHTLCAwaitingTimeout : LightningDevKit.NativeTypeWrapper {
      public func getClaimable_amount_satoshis() -> Swift.UInt64
      public func getClaimable_height() -> Swift.UInt32
      @objc deinit
    }
  }
}
public typealias C2Tuple_SignatureCVec_SignatureZZ = LightningDevKit.Bindings.C2Tuple_SignatureCVec_SignatureZZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_SignatureCVec_SignatureZZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_SignatureCVec_SignatureZZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_SignatureCVec_SignatureZZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_SignatureCVec_SignatureZZ
    public class func new(a: [Swift.UInt8], b: [[Swift.UInt8]]) -> LightningDevKit.Bindings.C2Tuple_SignatureCVec_SignatureZZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> [[Swift.UInt8]]
  }
}
public typealias NetAddress = LightningDevKit.Bindings.NetAddress
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class NetAddress : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKNetAddress)
    public init(pointer: LightningDevKit.LDKNetAddress, anchor: LightningDevKit.NativeTypeWrapper)
    public enum NetAddressValueType {
      case IPv4, IPv6, OnionV2, OnionV3, Hostname
      public static func == (a: LightningDevKit.Bindings.NetAddress.NetAddressValueType, b: LightningDevKit.Bindings.NetAddress.NetAddressValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.NetAddress.NetAddressValueType?
    public func getValueAsIPv4() -> LightningDevKit.Bindings.NetAddress.IPv4?
    public func getValueAsIPv6() -> LightningDevKit.Bindings.NetAddress.IPv6?
    public func getValueAsOnionV2() -> [Swift.UInt8]?
    public func getValueAsOnionV3() -> LightningDevKit.Bindings.NetAddress.OnionV3?
    public func getValueAsHostname() -> LightningDevKit.Bindings.NetAddress.Hostname?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.NetAddress
    public class func ipv4(addr: [Swift.UInt8], port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func ipv6(addr: [Swift.UInt8], port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func onion_v2(a: [Swift.UInt8]) -> LightningDevKit.Bindings.NetAddress
    public class func onion_v3(ed25519_pubkey: [Swift.UInt8], checksum: Swift.UInt16, version: Swift.UInt8, port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public class func hostname(hostname: LightningDevKit.Bindings.Hostname, port: Swift.UInt16) -> LightningDevKit.Bindings.NetAddress
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_NetAddressDecodeErrorZ
    @_hasMissingDesignatedInitializers public class IPv4 : LightningDevKit.NativeTypeWrapper {
      public func getAddr() -> [Swift.UInt8]
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class IPv6 : LightningDevKit.NativeTypeWrapper {
      public func getAddr() -> [Swift.UInt8]
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class OnionV3 : LightningDevKit.NativeTypeWrapper {
      public func getEd25519_pubkey() -> [Swift.UInt8]
      public func getChecksum() -> Swift.UInt16
      public func getVersion() -> Swift.UInt8
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Hostname : LightningDevKit.NativeTypeWrapper {
      public func getHostname() -> LightningDevKit.Bindings.Hostname
      public func getPort() -> Swift.UInt16
      @objc deinit
    }
  }
}
public typealias C2Tuple_PaymentHashPaymentIdZ = LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentIdZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class C2Tuple_PaymentHashPaymentIdZ : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKC2Tuple_PaymentHashPaymentIdZ)
    public init(pointer: LightningDevKit.LDKC2Tuple_PaymentHashPaymentIdZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentIdZ
    public class func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LightningDevKit.Bindings.C2Tuple_PaymentHashPaymentIdZ
    @objc deinit
    public func getA() -> [Swift.UInt8]
    public func getB() -> [Swift.UInt8]
  }
}
public typealias Result_DelayedPaymentOutputDescriptorDecodeErrorZ = LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_DelayedPaymentOutputDescriptorDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.DelayedPaymentOutputDescriptor?
    public class func ok(o: LightningDevKit.Bindings.DelayedPaymentOutputDescriptor) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
  }
}
public typealias GossipTimestampFilter = LightningDevKit.Bindings.GossipTimestampFilter
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class GossipTimestampFilter : LightningDevKit.NativeTypeWrapper {
    public init(chain_hash_arg: [Swift.UInt8], first_timestamp_arg: Swift.UInt32, timestamp_range_arg: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKGossipTimestampFilter)
    public init(pointer: LightningDevKit.LDKGossipTimestampFilter, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_chain_hash() -> [Swift.UInt8]
    public func set_chain_hash(val: [Swift.UInt8])
    public func get_first_timestamp() -> Swift.UInt32
    public func set_first_timestamp(val: Swift.UInt32)
    public func get_timestamp_range() -> Swift.UInt32
    public func set_timestamp_range(val: Swift.UInt32)
    public func clone() -> LightningDevKit.Bindings.GossipTimestampFilter
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_GossipTimestampFilterDecodeErrorZ
    @objc deinit
  }
}
public typealias FundingCreated = LightningDevKit.Bindings.FundingCreated
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FundingCreated : LightningDevKit.NativeTypeWrapper {
    public init(temporary_channel_id_arg: [Swift.UInt8], funding_txid_arg: [Swift.UInt8], funding_output_index_arg: Swift.UInt16, signature_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKFundingCreated)
    public init(pointer: LightningDevKit.LDKFundingCreated, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_temporary_channel_id() -> [Swift.UInt8]
    public func set_temporary_channel_id(val: [Swift.UInt8])
    public func get_funding_txid() -> [Swift.UInt8]
    public func set_funding_txid(val: [Swift.UInt8])
    public func get_funding_output_index() -> Swift.UInt16
    public func set_funding_output_index(val: Swift.UInt16)
    public func get_signature() -> [Swift.UInt8]
    public func set_signature(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.FundingCreated
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_FundingCreatedDecodeErrorZ
    @objc deinit
  }
}
public typealias Result_NoneLightningErrorZ = LightningDevKit.Bindings.Result_NoneLightningErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_NoneLightningErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_NoneLightningErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_NoneLightningErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.LightningError?
    public class func ok() -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    public class func err(e: LightningDevKit.Bindings.LightningError) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
  }
}
public typealias Result_boolPeerHandleErrorZ = LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_boolPeerHandleErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_boolPeerHandleErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_boolPeerHandleErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.PeerHandleError?
    public func getValue() -> Swift.Bool?
    public class func ok(o: Swift.Bool) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    public class func err(e: LightningDevKit.Bindings.PeerHandleError) -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_boolPeerHandleErrorZ
  }
}
public typealias Result_ChannelCounterpartyDecodeErrorZ = LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ChannelCounterpartyDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ChannelCounterpartyDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ChannelCounterpartyDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ChannelCounterparty?
    public class func ok(o: LightningDevKit.Bindings.ChannelCounterparty) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ChannelCounterpartyDecodeErrorZ
  }
}
public typealias Result_ShutdownScriptDecodeErrorZ = LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ShutdownScriptDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_ShutdownScriptDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    public class func ok(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ShutdownScriptDecodeErrorZ
  }
}
public typealias TrustedClosingTransaction = LightningDevKit.Bindings.TrustedClosingTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class TrustedClosingTransaction : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKTrustedClosingTransaction)
    public init(pointer: LightningDevKit.LDKTrustedClosingTransaction, anchor: LightningDevKit.NativeTypeWrapper)
    public func built_transaction() -> [Swift.UInt8]
    public func get_sighash_all(funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
    public func sign(funding_key: [Swift.UInt8], funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias RoutingMessageHandler = LightningDevKit.Bindings.RoutingMessageHandler
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class RoutingMessageHandler : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKRoutingMessageHandler)
    public init(pointer: LightningDevKit.LDKRoutingMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func handle_node_announcement(msg: LightningDevKit.Bindings.NodeAnnouncement) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func handle_channel_announcement(msg: LightningDevKit.Bindings.ChannelAnnouncement) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func handle_channel_update(msg: LightningDevKit.Bindings.ChannelUpdate) -> LightningDevKit.Bindings.Result_boolLightningErrorZ
    open func get_next_channel_announcements(starting_point: Swift.UInt64, batch_amount: Swift.UInt8) -> [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
    open func get_next_node_announcements(starting_point: [Swift.UInt8], batch_amount: Swift.UInt8) -> [LightningDevKit.LDKNodeAnnouncement]
    open func peer_connected(their_node_id: [Swift.UInt8], initValue: LightningDevKit.Bindings.Init)
    open func handle_reply_channel_range(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyChannelRange) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handle_reply_short_channel_ids_end(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.ReplyShortChannelIdsEnd) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handle_query_channel_range(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryChannelRange) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func handle_query_short_channel_ids(their_node_id: [Swift.UInt8], msg: LightningDevKit.Bindings.QueryShortChannelIds) -> LightningDevKit.Bindings.Result_NoneLightningErrorZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedRoutingMessageHandler : LightningDevKit.RoutingMessageHandler {
  override public func handle_node_announcement(msg: LightningDevKit.NodeAnnouncement) -> LightningDevKit.Result_boolLightningErrorZ
  override public func handle_channel_announcement(msg: LightningDevKit.ChannelAnnouncement) -> LightningDevKit.Result_boolLightningErrorZ
  override public func handle_channel_update(msg: LightningDevKit.ChannelUpdate) -> LightningDevKit.Result_boolLightningErrorZ
  override public func get_next_channel_announcements(starting_point: Swift.UInt64, batch_amount: Swift.UInt8) -> [LightningDevKit.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  override public func get_next_node_announcements(starting_point: [Swift.UInt8], batch_amount: Swift.UInt8) -> [LightningDevKit.LDKNodeAnnouncement]
  override public func peer_connected(their_node_id: [Swift.UInt8], initValue: LightningDevKit.Init)
  override public func handle_reply_channel_range(their_node_id: [Swift.UInt8], msg: LightningDevKit.ReplyChannelRange) -> LightningDevKit.Result_NoneLightningErrorZ
  override public func handle_reply_short_channel_ids_end(their_node_id: [Swift.UInt8], msg: LightningDevKit.ReplyShortChannelIdsEnd) -> LightningDevKit.Result_NoneLightningErrorZ
  override public func handle_query_channel_range(their_node_id: [Swift.UInt8], msg: LightningDevKit.QueryChannelRange) -> LightningDevKit.Result_NoneLightningErrorZ
  override public func handle_query_short_channel_ids(their_node_id: [Swift.UInt8], msg: LightningDevKit.QueryShortChannelIds) -> LightningDevKit.Result_NoneLightningErrorZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKRoutingMessageHandler)
  override public init(pointer: LightningDevKit.LDKRoutingMessageHandler, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias BuiltCommitmentTransaction = LightningDevKit.Bindings.BuiltCommitmentTransaction
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BuiltCommitmentTransaction : LightningDevKit.NativeTypeWrapper {
    public init(transaction_arg: [Swift.UInt8], txid_arg: [Swift.UInt8])
    public init(pointer: LightningDevKit.LDKBuiltCommitmentTransaction)
    public init(pointer: LightningDevKit.LDKBuiltCommitmentTransaction, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_transaction() -> [Swift.UInt8]
    public func set_transaction(val: [Swift.UInt8])
    public func get_txid() -> [Swift.UInt8]
    public func set_txid(val: [Swift.UInt8])
    public func clone() -> LightningDevKit.Bindings.BuiltCommitmentTransaction
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_BuiltCommitmentTransactionDecodeErrorZ
    public func get_sighash_all(funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
    public func sign(funding_key: [Swift.UInt8], funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
    @objc deinit
  }
}
public typealias BindingsType = LightningDevKit.Bindings.BindingsType
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class BindingsType : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKType)
    public init(pointer: LightningDevKit.LDKType, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.BindingsType
    @objc deinit
    open func type_id() -> Swift.UInt16
    open func debug_str() -> Swift.String
    open func write() -> [Swift.UInt8]
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedBindingsType : LightningDevKit.BindingsType {
  override public func type_id() -> Swift.UInt16
  override public func debug_str() -> Swift.String
  override public func write() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKType)
  override public init(pointer: LightningDevKit.LDKType, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
public typealias RapidGossipSync = LightningDevKit.Bindings.RapidGossipSync
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class RapidGossipSync : LightningDevKit.NativeTypeWrapper {
    public init(network_graph: LightningDevKit.Bindings.NetworkGraph)
    public init(pointer: LightningDevKit.LDKRapidGossipSync)
    public init(pointer: LightningDevKit.LDKRapidGossipSync, anchor: LightningDevKit.NativeTypeWrapper)
    public func sync_network_graph_with_file_path(sync_path: Swift.String) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    public func is_initial_sync_complete() -> Swift.Bool
    public func update_network_graph(update_data: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_u32GraphSyncErrorZ
    @objc deinit
  }
}
public typealias Result_ShutdownScriptInvalidShutdownScriptZ = LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_ShutdownScriptInvalidShutdownScriptZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_ShutdownScriptInvalidShutdownScriptZ)
    public init(pointer: LightningDevKit.LDKCResult_ShutdownScriptInvalidShutdownScriptZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.InvalidShutdownScript?
    public func getValue() -> LightningDevKit.Bindings.ShutdownScript?
    public class func ok(o: LightningDevKit.Bindings.ShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    public class func err(e: LightningDevKit.Bindings.InvalidShutdownScript) -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_ShutdownScriptInvalidShutdownScriptZ
  }
}
public typealias BestBlock = LightningDevKit.Bindings.BestBlock
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class BestBlock : LightningDevKit.NativeTypeWrapper {
    public init(block_hash: [Swift.UInt8], height: Swift.UInt32)
    public init(pointer: LightningDevKit.LDKBestBlock)
    public init(pointer: LightningDevKit.LDKBestBlock, anchor: LightningDevKit.NativeTypeWrapper)
    public func clone() -> LightningDevKit.Bindings.BestBlock
    public func block_hash() -> [Swift.UInt8]
    public func height() -> Swift.UInt32
    @objc deinit
  }
}
public typealias Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ = LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ : LightningDevKit.NativeTypeWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ)
    public init(pointer: LightningDevKit.LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ, anchor: LightningDevKit.NativeTypeWrapper)
    public func isOk() -> Swift.Bool
    public func getError() -> LightningDevKit.Bindings.DecodeError?
    public func getValue() -> LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ?
    public class func ok(o: LightningDevKit.Bindings.C2Tuple_BlockHashChannelMonitorZ) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
    public class func err(e: LightningDevKit.Bindings.DecodeError) -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  }
}
public typealias ChannelUpdate = LightningDevKit.Bindings.ChannelUpdate
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUpdate : LightningDevKit.NativeTypeWrapper {
    public init(signature_arg: [Swift.UInt8], contents_arg: LightningDevKit.Bindings.UnsignedChannelUpdate)
    public init(pointer: LightningDevKit.LDKChannelUpdate)
    public init(pointer: LightningDevKit.LDKChannelUpdate, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_signature() -> [Swift.UInt8]
    public func set_signature(val: [Swift.UInt8])
    public func get_contents() -> LightningDevKit.Bindings.UnsignedChannelUpdate
    public func set_contents(val: LightningDevKit.Bindings.UnsignedChannelUpdate)
    public func clone() -> LightningDevKit.Bindings.ChannelUpdate
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelUpdateDecodeErrorZ
    @objc deinit
  }
}
public typealias FilesystemPersister = LightningDevKit.Bindings.FilesystemPersister
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class FilesystemPersister : LightningDevKit.NativeTypeWrapper {
    public init(path_to_channel_data: Swift.String)
    public init(pointer: LightningDevKit.LDKFilesystemPersister)
    public init(pointer: LightningDevKit.LDKFilesystemPersister, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_data_dir() -> Swift.String
    public func read_channelmonitors(keys_manager: LightningDevKit.Bindings.KeysInterface) -> LightningDevKit.Bindings.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
    @objc deinit
  }
}
public typealias ChannelUpdateInfo = LightningDevKit.Bindings.ChannelUpdateInfo
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChannelUpdateInfo : LightningDevKit.NativeTypeWrapper {
    public init(last_update_arg: Swift.UInt32, enabled_arg: Swift.Bool, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: Swift.UInt64, htlc_maximum_msat_arg: Swift.UInt64, fees_arg: LightningDevKit.Bindings.RoutingFees, last_update_message_arg: LightningDevKit.Bindings.ChannelUpdate)
    public init(pointer: LightningDevKit.LDKChannelUpdateInfo)
    public init(pointer: LightningDevKit.LDKChannelUpdateInfo, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_last_update() -> Swift.UInt32
    public func set_last_update(val: Swift.UInt32)
    public func get_enabled() -> Swift.Bool
    public func set_enabled(val: Swift.Bool)
    public func get_cltv_expiry_delta() -> Swift.UInt16
    public func set_cltv_expiry_delta(val: Swift.UInt16)
    public func get_htlc_minimum_msat() -> Swift.UInt64
    public func set_htlc_minimum_msat(val: Swift.UInt64)
    public func get_htlc_maximum_msat() -> Swift.UInt64
    public func set_htlc_maximum_msat(val: Swift.UInt64)
    public func get_fees() -> LightningDevKit.Bindings.RoutingFees
    public func set_fees(val: LightningDevKit.Bindings.RoutingFees)
    public func get_last_update_message() -> LightningDevKit.Bindings.ChannelUpdate
    public func set_last_update_message(val: LightningDevKit.Bindings.ChannelUpdate)
    public func clone() -> LightningDevKit.Bindings.ChannelUpdateInfo
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_ChannelUpdateInfoDecodeErrorZ
    @objc deinit
  }
}
public typealias PaymentPurpose = LightningDevKit.Bindings.PaymentPurpose
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class PaymentPurpose : LightningDevKit.NativeTypeWrapper {
    public init(pointer: LightningDevKit.LDKPaymentPurpose)
    public init(pointer: LightningDevKit.LDKPaymentPurpose, anchor: LightningDevKit.NativeTypeWrapper)
    public enum PaymentPurposeValueType {
      case InvoicePayment, SpontaneousPayment
      public static func == (a: LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeValueType, b: LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeValueType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func getValueType() -> LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeValueType?
    public func getValueAsInvoicePayment() -> LightningDevKit.Bindings.PaymentPurpose.InvoicePayment?
    public func getValueAsSpontaneousPayment() -> [Swift.UInt8]?
    @objc deinit
    public func clone() -> LightningDevKit.Bindings.PaymentPurpose
    public class func invoice_payment(payment_preimage: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentPurpose
    public class func spontaneous_payment(a: [Swift.UInt8]) -> LightningDevKit.Bindings.PaymentPurpose
    public func write() -> [Swift.UInt8]
    public class func read(ser: [Swift.UInt8]) -> LightningDevKit.Bindings.Result_PaymentPurposeDecodeErrorZ
    @_hasMissingDesignatedInitializers public class InvoicePayment : LightningDevKit.NativeTypeWrapper {
      public func getPayment_preimage() -> [Swift.UInt8]
      public func getPayment_secret() -> [Swift.UInt8]
      @objc deinit
    }
  }
}
public typealias ChainMonitor = LightningDevKit.Bindings.ChainMonitor
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers public class ChainMonitor : LightningDevKit.NativeTypeWrapper {
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(chain_source: LightningDevKit.Bindings.Option_FilterZ, broadcaster: LightningDevKit.Bindings.BroadcasterInterface, logger: LightningDevKit.Bindings.Logger, feeest: LightningDevKit.Bindings.FeeEstimator, persister: LightningDevKit.Bindings.Persist)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKChainMonitor)
    #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
    @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
    public init(pointer: LightningDevKit.LDKChainMonitor, anchor: LightningDevKit.NativeTypeWrapper)
    public func get_claimable_balances(ignored_channels: [LightningDevKit.Bindings.ChannelDetails]) -> [LightningDevKit.Bindings.Balance]
    public func get_monitor(funding_txo: LightningDevKit.Bindings.OutPoint) -> LightningDevKit.Bindings.Result_LockedChannelMonitorNoneZ
    public func list_monitors() -> [LightningDevKit.Bindings.OutPoint]
    public func channel_monitor_updated(funding_txo: LightningDevKit.Bindings.OutPoint, completed_update_id: LightningDevKit.Bindings.MonitorUpdateId) -> LightningDevKit.Bindings.Result_NoneAPIErrorZ
    public func as_Listen() -> LightningDevKit.NativelyImplementedListen
    public func as_Confirm() -> LightningDevKit.NativelyImplementedConfirm
    public func as_Watch() -> LightningDevKit.NativelyImplementedWatch
    public func as_EventsProvider() -> LightningDevKit.NativelyImplementedEventsProvider
    @objc deinit
  }
}
public typealias Persister = LightningDevKit.Bindings.Persister
extension LightningDevKit.Bindings {
  @_hasMissingDesignatedInitializers open class Persister : LightningDevKit.NativeTraitWrapper {
    public init()
    public init(pointer: LightningDevKit.LDKPersister)
    public init(pointer: LightningDevKit.LDKPersister, anchor: LightningDevKit.NativeTypeWrapper)
    @objc deinit
    open func persist_manager(channel_manager: LightningDevKit.Bindings.ChannelManager) -> LightningDevKit.Bindings.Result_NoneErrorZ
    open func persist_graph(network_graph: LightningDevKit.Bindings.NetworkGraph) -> LightningDevKit.Bindings.Result_NoneErrorZ
    open func persist_scorer(scorer: LightningDevKit.Bindings.MultiThreadedLockableScore) -> LightningDevKit.Bindings.Result_NoneErrorZ
    open func free()
  }
}
@_inheritsConvenienceInitializers public class NativelyImplementedPersister : LightningDevKit.Persister {
  override public func persist_manager(channel_manager: LightningDevKit.ChannelManager) -> LightningDevKit.Result_NoneErrorZ
  override public func persist_graph(network_graph: LightningDevKit.NetworkGraph) -> LightningDevKit.Result_NoneErrorZ
  override public func persist_scorer(scorer: LightningDevKit.MultiThreadedLockableScore) -> LightningDevKit.Result_NoneErrorZ
  override public func free()
  override public init()
  override public init(pointer: LightningDevKit.LDKPersister)
  override public init(pointer: LightningDevKit.LDKPersister, anchor: LightningDevKit.NativeTypeWrapper)
  @objc deinit
}
extension LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.SpendableOutputDescriptor.SpendableOutputDescriptorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.SignOrCreationError.SignOrCreationErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.Equatable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.Hashable {}
extension LightningDevKit.Bindings.PrintSeverity : Swift.RawRepresentable {}
extension LightningDevKit.Bindings.PaymentError.PaymentErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentError.PaymentErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.Bech32Error.Bech32ErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.Bech32Error.Bech32ErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.Fallback.FallbackValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.Fallback.FallbackValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.MessageSendEvent.MessageSendEventValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.MessageSendEvent.MessageSendEventValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentSendFailure.PaymentSendFailureValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.APIError.APIErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.APIError.APIErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.ErrorAction.ErrorActionValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.ErrorAction.ErrorActionValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.Event.EventValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.Event.EventValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.EffectiveCapacity.EffectiveCapacityValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.ClosureReason.ClosureReasonValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.ClosureReason.ClosureReasonValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.NetworkUpdate.NetworkUpdateValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.GossipSync.GossipSyncValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.GossipSync.GossipSyncValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.MonitorEvent.MonitorEventValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.MonitorEvent.MonitorEventValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.GraphSyncError.GraphSyncErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.ParseOrSemanticError.ParseOrSemanticErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.Retry.RetryValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.Retry.RetryValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.HTLCDestination.HTLCDestinationValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.HTLCDestination.HTLCDestinationValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.ParseError.ParseErrorValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.ParseError.ParseErrorValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.Balance.BalanceValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.Balance.BalanceValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.NetAddress.NetAddressValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.NetAddress.NetAddressValueType : Swift.Hashable {}
extension LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeValueType : Swift.Equatable {}
extension LightningDevKit.Bindings.PaymentPurpose.PaymentPurposeValueType : Swift.Hashable {}
